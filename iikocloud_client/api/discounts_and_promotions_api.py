# coding: utf-8

"""
    iikoCloud API

    <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt
from typing import Optional
from typing_extensions import Annotated
from iikocloud_client.models.net_common_get_by_organization_id_request import NetCommonGetByOrganizationIdRequest
from iikocloud_client.models.net_loyalty_result_calculate_checkin_request import NetLoyaltyResultCalculateCheckinRequest
from iikocloud_client.models.net_loyalty_result_calculate_checkin_response import NetLoyaltyResultCalculateCheckinResponse
from iikocloud_client.models.net_loyalty_result_coupon_info_request import NetLoyaltyResultCouponInfoRequest
from iikocloud_client.models.net_loyalty_result_coupon_info_response import NetLoyaltyResultCouponInfoResponse
from iikocloud_client.models.net_loyalty_result_get_manual_conditions_response import NetLoyaltyResultGetManualConditionsResponse
from iikocloud_client.models.net_loyalty_result_not_activated_coupon_request import NetLoyaltyResultNotActivatedCouponRequest
from iikocloud_client.models.net_loyalty_result_not_activated_coupon_response import NetLoyaltyResultNotActivatedCouponResponse
from iikocloud_client.models.net_loyalty_result_series_with_not_activated_coupons_request import NetLoyaltyResultSeriesWithNotActivatedCouponsRequest
from iikocloud_client.models.net_loyalty_result_series_with_not_activated_coupons_response import NetLoyaltyResultSeriesWithNotActivatedCouponsResponse
from iikocloud_client.models.net_organization_get_programs_request import NetOrganizationGetProgramsRequest
from iikocloud_client.models.net_organization_get_programs_response import NetOrganizationGetProgramsResponse

from iikocloud_client.api_client import ApiClient, RequestSerialized
from iikocloud_client.api_response import ApiResponse
from iikocloud_client.rest import RESTResponseType


class DiscountsAndPromotionsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    async def loyalty_iiko_calculate_post(
        self,
        timeout: Annotated[Optional[StrictInt], Field(description="Timeout in seconds.")] = None,
        net_loyalty_result_calculate_checkin_request: Optional[NetLoyaltyResultCalculateCheckinRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> NetLoyaltyResultCalculateCheckinResponse:
        """Calculate checkin.

        Calculate discounts and other loyalty items for an order.   > Restriction group: `Loyalty: order calculate`.

        :param timeout: Timeout in seconds.
        :type timeout: int
        :param net_loyalty_result_calculate_checkin_request:
        :type net_loyalty_result_calculate_checkin_request: NetLoyaltyResultCalculateCheckinRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._loyalty_iiko_calculate_post_serialize(
            timeout=timeout,
            net_loyalty_result_calculate_checkin_request=net_loyalty_result_calculate_checkin_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "NetLoyaltyResultCalculateCheckinResponse",
            '400': "TransportErrorsErrorResponse",
            '401': "TransportErrorsErrorResponse",
            '500': "TransportErrorsErrorResponse",
            '408': "TransportErrorsErrorResponse",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    async def loyalty_iiko_calculate_post_with_http_info(
        self,
        timeout: Annotated[Optional[StrictInt], Field(description="Timeout in seconds.")] = None,
        net_loyalty_result_calculate_checkin_request: Optional[NetLoyaltyResultCalculateCheckinRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[NetLoyaltyResultCalculateCheckinResponse]:
        """Calculate checkin.

        Calculate discounts and other loyalty items for an order.   > Restriction group: `Loyalty: order calculate`.

        :param timeout: Timeout in seconds.
        :type timeout: int
        :param net_loyalty_result_calculate_checkin_request:
        :type net_loyalty_result_calculate_checkin_request: NetLoyaltyResultCalculateCheckinRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._loyalty_iiko_calculate_post_serialize(
            timeout=timeout,
            net_loyalty_result_calculate_checkin_request=net_loyalty_result_calculate_checkin_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "NetLoyaltyResultCalculateCheckinResponse",
            '400': "TransportErrorsErrorResponse",
            '401': "TransportErrorsErrorResponse",
            '500': "TransportErrorsErrorResponse",
            '408': "TransportErrorsErrorResponse",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    async def loyalty_iiko_calculate_post_without_preload_content(
        self,
        timeout: Annotated[Optional[StrictInt], Field(description="Timeout in seconds.")] = None,
        net_loyalty_result_calculate_checkin_request: Optional[NetLoyaltyResultCalculateCheckinRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Calculate checkin.

        Calculate discounts and other loyalty items for an order.   > Restriction group: `Loyalty: order calculate`.

        :param timeout: Timeout in seconds.
        :type timeout: int
        :param net_loyalty_result_calculate_checkin_request:
        :type net_loyalty_result_calculate_checkin_request: NetLoyaltyResultCalculateCheckinRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._loyalty_iiko_calculate_post_serialize(
            timeout=timeout,
            net_loyalty_result_calculate_checkin_request=net_loyalty_result_calculate_checkin_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "NetLoyaltyResultCalculateCheckinResponse",
            '400': "TransportErrorsErrorResponse",
            '401': "TransportErrorsErrorResponse",
            '500': "TransportErrorsErrorResponse",
            '408': "TransportErrorsErrorResponse",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _loyalty_iiko_calculate_post_serialize(
        self,
        timeout,
        net_loyalty_result_calculate_checkin_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if timeout is not None:
            _header_params['Timeout'] = timeout
        # process the form parameters
        # process the body parameter
        if net_loyalty_result_calculate_checkin_request is not None:
            _body_params = net_loyalty_result_calculate_checkin_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/loyalty/iiko/calculate',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    async def loyalty_iiko_coupons_by_series_post(
        self,
        timeout: Annotated[Optional[StrictInt], Field(description="Timeout in seconds.")] = None,
        net_loyalty_result_not_activated_coupon_request: Optional[NetLoyaltyResultNotActivatedCouponRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> NetLoyaltyResultNotActivatedCouponResponse:
        """Get non-activated coupons

        Get list of non-activated coupons.   > Restriction group: `Loyalty: coupons`.

        :param timeout: Timeout in seconds.
        :type timeout: int
        :param net_loyalty_result_not_activated_coupon_request:
        :type net_loyalty_result_not_activated_coupon_request: NetLoyaltyResultNotActivatedCouponRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._loyalty_iiko_coupons_by_series_post_serialize(
            timeout=timeout,
            net_loyalty_result_not_activated_coupon_request=net_loyalty_result_not_activated_coupon_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "NetLoyaltyResultNotActivatedCouponResponse",
            '400': "TransportErrorsErrorResponse",
            '401': "TransportErrorsErrorResponse",
            '500': "TransportErrorsErrorResponse",
            '408': "TransportErrorsErrorResponse",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    async def loyalty_iiko_coupons_by_series_post_with_http_info(
        self,
        timeout: Annotated[Optional[StrictInt], Field(description="Timeout in seconds.")] = None,
        net_loyalty_result_not_activated_coupon_request: Optional[NetLoyaltyResultNotActivatedCouponRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[NetLoyaltyResultNotActivatedCouponResponse]:
        """Get non-activated coupons

        Get list of non-activated coupons.   > Restriction group: `Loyalty: coupons`.

        :param timeout: Timeout in seconds.
        :type timeout: int
        :param net_loyalty_result_not_activated_coupon_request:
        :type net_loyalty_result_not_activated_coupon_request: NetLoyaltyResultNotActivatedCouponRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._loyalty_iiko_coupons_by_series_post_serialize(
            timeout=timeout,
            net_loyalty_result_not_activated_coupon_request=net_loyalty_result_not_activated_coupon_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "NetLoyaltyResultNotActivatedCouponResponse",
            '400': "TransportErrorsErrorResponse",
            '401': "TransportErrorsErrorResponse",
            '500': "TransportErrorsErrorResponse",
            '408': "TransportErrorsErrorResponse",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    async def loyalty_iiko_coupons_by_series_post_without_preload_content(
        self,
        timeout: Annotated[Optional[StrictInt], Field(description="Timeout in seconds.")] = None,
        net_loyalty_result_not_activated_coupon_request: Optional[NetLoyaltyResultNotActivatedCouponRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get non-activated coupons

        Get list of non-activated coupons.   > Restriction group: `Loyalty: coupons`.

        :param timeout: Timeout in seconds.
        :type timeout: int
        :param net_loyalty_result_not_activated_coupon_request:
        :type net_loyalty_result_not_activated_coupon_request: NetLoyaltyResultNotActivatedCouponRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._loyalty_iiko_coupons_by_series_post_serialize(
            timeout=timeout,
            net_loyalty_result_not_activated_coupon_request=net_loyalty_result_not_activated_coupon_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "NetLoyaltyResultNotActivatedCouponResponse",
            '400': "TransportErrorsErrorResponse",
            '401': "TransportErrorsErrorResponse",
            '500': "TransportErrorsErrorResponse",
            '408': "TransportErrorsErrorResponse",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _loyalty_iiko_coupons_by_series_post_serialize(
        self,
        timeout,
        net_loyalty_result_not_activated_coupon_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if timeout is not None:
            _header_params['Timeout'] = timeout
        # process the form parameters
        # process the body parameter
        if net_loyalty_result_not_activated_coupon_request is not None:
            _body_params = net_loyalty_result_not_activated_coupon_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/loyalty/iiko/coupons/by_series',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    async def loyalty_iiko_coupons_info_post(
        self,
        timeout: Annotated[Optional[StrictInt], Field(description="Timeout in seconds.")] = None,
        net_loyalty_result_coupon_info_request: Optional[NetLoyaltyResultCouponInfoRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> NetLoyaltyResultCouponInfoResponse:
        """Get coupon info.

        Get information about the specified coupon.   > Restriction group: `Loyalty: coupons`.

        :param timeout: Timeout in seconds.
        :type timeout: int
        :param net_loyalty_result_coupon_info_request:
        :type net_loyalty_result_coupon_info_request: NetLoyaltyResultCouponInfoRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._loyalty_iiko_coupons_info_post_serialize(
            timeout=timeout,
            net_loyalty_result_coupon_info_request=net_loyalty_result_coupon_info_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "NetLoyaltyResultCouponInfoResponse",
            '400': "TransportErrorsErrorResponse",
            '401': "TransportErrorsErrorResponse",
            '500': "TransportErrorsErrorResponse",
            '408': "TransportErrorsErrorResponse",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    async def loyalty_iiko_coupons_info_post_with_http_info(
        self,
        timeout: Annotated[Optional[StrictInt], Field(description="Timeout in seconds.")] = None,
        net_loyalty_result_coupon_info_request: Optional[NetLoyaltyResultCouponInfoRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[NetLoyaltyResultCouponInfoResponse]:
        """Get coupon info.

        Get information about the specified coupon.   > Restriction group: `Loyalty: coupons`.

        :param timeout: Timeout in seconds.
        :type timeout: int
        :param net_loyalty_result_coupon_info_request:
        :type net_loyalty_result_coupon_info_request: NetLoyaltyResultCouponInfoRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._loyalty_iiko_coupons_info_post_serialize(
            timeout=timeout,
            net_loyalty_result_coupon_info_request=net_loyalty_result_coupon_info_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "NetLoyaltyResultCouponInfoResponse",
            '400': "TransportErrorsErrorResponse",
            '401': "TransportErrorsErrorResponse",
            '500': "TransportErrorsErrorResponse",
            '408': "TransportErrorsErrorResponse",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    async def loyalty_iiko_coupons_info_post_without_preload_content(
        self,
        timeout: Annotated[Optional[StrictInt], Field(description="Timeout in seconds.")] = None,
        net_loyalty_result_coupon_info_request: Optional[NetLoyaltyResultCouponInfoRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get coupon info.

        Get information about the specified coupon.   > Restriction group: `Loyalty: coupons`.

        :param timeout: Timeout in seconds.
        :type timeout: int
        :param net_loyalty_result_coupon_info_request:
        :type net_loyalty_result_coupon_info_request: NetLoyaltyResultCouponInfoRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._loyalty_iiko_coupons_info_post_serialize(
            timeout=timeout,
            net_loyalty_result_coupon_info_request=net_loyalty_result_coupon_info_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "NetLoyaltyResultCouponInfoResponse",
            '400': "TransportErrorsErrorResponse",
            '401': "TransportErrorsErrorResponse",
            '500': "TransportErrorsErrorResponse",
            '408': "TransportErrorsErrorResponse",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _loyalty_iiko_coupons_info_post_serialize(
        self,
        timeout,
        net_loyalty_result_coupon_info_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if timeout is not None:
            _header_params['Timeout'] = timeout
        # process the form parameters
        # process the body parameter
        if net_loyalty_result_coupon_info_request is not None:
            _body_params = net_loyalty_result_coupon_info_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/loyalty/iiko/coupons/info',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    async def loyalty_iiko_coupons_series_post(
        self,
        timeout: Annotated[Optional[StrictInt], Field(description="Timeout in seconds.")] = None,
        net_loyalty_result_series_with_not_activated_coupons_request: Optional[NetLoyaltyResultSeriesWithNotActivatedCouponsRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> NetLoyaltyResultSeriesWithNotActivatedCouponsResponse:
        """Get coupon series with non-activated coupons.

        Get a list of coupon series in which there are not deleted and not activated coupons.   > Restriction group: `Loyalty: coupons`.

        :param timeout: Timeout in seconds.
        :type timeout: int
        :param net_loyalty_result_series_with_not_activated_coupons_request:
        :type net_loyalty_result_series_with_not_activated_coupons_request: NetLoyaltyResultSeriesWithNotActivatedCouponsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._loyalty_iiko_coupons_series_post_serialize(
            timeout=timeout,
            net_loyalty_result_series_with_not_activated_coupons_request=net_loyalty_result_series_with_not_activated_coupons_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "NetLoyaltyResultSeriesWithNotActivatedCouponsResponse",
            '400': "TransportErrorsErrorResponse",
            '401': "TransportErrorsErrorResponse",
            '500': "TransportErrorsErrorResponse",
            '408': "TransportErrorsErrorResponse",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    async def loyalty_iiko_coupons_series_post_with_http_info(
        self,
        timeout: Annotated[Optional[StrictInt], Field(description="Timeout in seconds.")] = None,
        net_loyalty_result_series_with_not_activated_coupons_request: Optional[NetLoyaltyResultSeriesWithNotActivatedCouponsRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[NetLoyaltyResultSeriesWithNotActivatedCouponsResponse]:
        """Get coupon series with non-activated coupons.

        Get a list of coupon series in which there are not deleted and not activated coupons.   > Restriction group: `Loyalty: coupons`.

        :param timeout: Timeout in seconds.
        :type timeout: int
        :param net_loyalty_result_series_with_not_activated_coupons_request:
        :type net_loyalty_result_series_with_not_activated_coupons_request: NetLoyaltyResultSeriesWithNotActivatedCouponsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._loyalty_iiko_coupons_series_post_serialize(
            timeout=timeout,
            net_loyalty_result_series_with_not_activated_coupons_request=net_loyalty_result_series_with_not_activated_coupons_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "NetLoyaltyResultSeriesWithNotActivatedCouponsResponse",
            '400': "TransportErrorsErrorResponse",
            '401': "TransportErrorsErrorResponse",
            '500': "TransportErrorsErrorResponse",
            '408': "TransportErrorsErrorResponse",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    async def loyalty_iiko_coupons_series_post_without_preload_content(
        self,
        timeout: Annotated[Optional[StrictInt], Field(description="Timeout in seconds.")] = None,
        net_loyalty_result_series_with_not_activated_coupons_request: Optional[NetLoyaltyResultSeriesWithNotActivatedCouponsRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get coupon series with non-activated coupons.

        Get a list of coupon series in which there are not deleted and not activated coupons.   > Restriction group: `Loyalty: coupons`.

        :param timeout: Timeout in seconds.
        :type timeout: int
        :param net_loyalty_result_series_with_not_activated_coupons_request:
        :type net_loyalty_result_series_with_not_activated_coupons_request: NetLoyaltyResultSeriesWithNotActivatedCouponsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._loyalty_iiko_coupons_series_post_serialize(
            timeout=timeout,
            net_loyalty_result_series_with_not_activated_coupons_request=net_loyalty_result_series_with_not_activated_coupons_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "NetLoyaltyResultSeriesWithNotActivatedCouponsResponse",
            '400': "TransportErrorsErrorResponse",
            '401': "TransportErrorsErrorResponse",
            '500': "TransportErrorsErrorResponse",
            '408': "TransportErrorsErrorResponse",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _loyalty_iiko_coupons_series_post_serialize(
        self,
        timeout,
        net_loyalty_result_series_with_not_activated_coupons_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if timeout is not None:
            _header_params['Timeout'] = timeout
        # process the form parameters
        # process the body parameter
        if net_loyalty_result_series_with_not_activated_coupons_request is not None:
            _body_params = net_loyalty_result_series_with_not_activated_coupons_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/loyalty/iiko/coupons/series',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    async def loyalty_iiko_manual_condition_post(
        self,
        timeout: Annotated[Optional[StrictInt], Field(description="Timeout in seconds.")] = None,
        net_common_get_by_organization_id_request: Optional[NetCommonGetByOrganizationIdRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> NetLoyaltyResultGetManualConditionsResponse:
        """Get manual conditions.

        Get all organization's manual conditions.   > Restriction group: `Loyalty: dictionaries`.

        :param timeout: Timeout in seconds.
        :type timeout: int
        :param net_common_get_by_organization_id_request:
        :type net_common_get_by_organization_id_request: NetCommonGetByOrganizationIdRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._loyalty_iiko_manual_condition_post_serialize(
            timeout=timeout,
            net_common_get_by_organization_id_request=net_common_get_by_organization_id_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "NetLoyaltyResultGetManualConditionsResponse",
            '400': "TransportErrorsErrorResponse",
            '401': "TransportErrorsErrorResponse",
            '500': "TransportErrorsErrorResponse",
            '408': "TransportErrorsErrorResponse",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    async def loyalty_iiko_manual_condition_post_with_http_info(
        self,
        timeout: Annotated[Optional[StrictInt], Field(description="Timeout in seconds.")] = None,
        net_common_get_by_organization_id_request: Optional[NetCommonGetByOrganizationIdRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[NetLoyaltyResultGetManualConditionsResponse]:
        """Get manual conditions.

        Get all organization's manual conditions.   > Restriction group: `Loyalty: dictionaries`.

        :param timeout: Timeout in seconds.
        :type timeout: int
        :param net_common_get_by_organization_id_request:
        :type net_common_get_by_organization_id_request: NetCommonGetByOrganizationIdRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._loyalty_iiko_manual_condition_post_serialize(
            timeout=timeout,
            net_common_get_by_organization_id_request=net_common_get_by_organization_id_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "NetLoyaltyResultGetManualConditionsResponse",
            '400': "TransportErrorsErrorResponse",
            '401': "TransportErrorsErrorResponse",
            '500': "TransportErrorsErrorResponse",
            '408': "TransportErrorsErrorResponse",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    async def loyalty_iiko_manual_condition_post_without_preload_content(
        self,
        timeout: Annotated[Optional[StrictInt], Field(description="Timeout in seconds.")] = None,
        net_common_get_by_organization_id_request: Optional[NetCommonGetByOrganizationIdRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get manual conditions.

        Get all organization's manual conditions.   > Restriction group: `Loyalty: dictionaries`.

        :param timeout: Timeout in seconds.
        :type timeout: int
        :param net_common_get_by_organization_id_request:
        :type net_common_get_by_organization_id_request: NetCommonGetByOrganizationIdRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._loyalty_iiko_manual_condition_post_serialize(
            timeout=timeout,
            net_common_get_by_organization_id_request=net_common_get_by_organization_id_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "NetLoyaltyResultGetManualConditionsResponse",
            '400': "TransportErrorsErrorResponse",
            '401': "TransportErrorsErrorResponse",
            '500': "TransportErrorsErrorResponse",
            '408': "TransportErrorsErrorResponse",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _loyalty_iiko_manual_condition_post_serialize(
        self,
        timeout,
        net_common_get_by_organization_id_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if timeout is not None:
            _header_params['Timeout'] = timeout
        # process the form parameters
        # process the body parameter
        if net_common_get_by_organization_id_request is not None:
            _body_params = net_common_get_by_organization_id_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/loyalty/iiko/manual_condition',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    async def loyalty_iiko_program_post(
        self,
        timeout: Annotated[Optional[StrictInt], Field(description="Timeout in seconds.")] = None,
        net_organization_get_programs_request: Optional[NetOrganizationGetProgramsRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> NetOrganizationGetProgramsResponse:
        """Get programs.

        Get all loyalty programs for organization.   > Restriction group: `Loyalty: dictionaries`.

        :param timeout: Timeout in seconds.
        :type timeout: int
        :param net_organization_get_programs_request:
        :type net_organization_get_programs_request: NetOrganizationGetProgramsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._loyalty_iiko_program_post_serialize(
            timeout=timeout,
            net_organization_get_programs_request=net_organization_get_programs_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "NetOrganizationGetProgramsResponse",
            '400': "TransportErrorsErrorResponse",
            '401': "TransportErrorsErrorResponse",
            '500': "TransportErrorsErrorResponse",
            '408': "TransportErrorsErrorResponse",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    async def loyalty_iiko_program_post_with_http_info(
        self,
        timeout: Annotated[Optional[StrictInt], Field(description="Timeout in seconds.")] = None,
        net_organization_get_programs_request: Optional[NetOrganizationGetProgramsRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[NetOrganizationGetProgramsResponse]:
        """Get programs.

        Get all loyalty programs for organization.   > Restriction group: `Loyalty: dictionaries`.

        :param timeout: Timeout in seconds.
        :type timeout: int
        :param net_organization_get_programs_request:
        :type net_organization_get_programs_request: NetOrganizationGetProgramsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._loyalty_iiko_program_post_serialize(
            timeout=timeout,
            net_organization_get_programs_request=net_organization_get_programs_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "NetOrganizationGetProgramsResponse",
            '400': "TransportErrorsErrorResponse",
            '401': "TransportErrorsErrorResponse",
            '500': "TransportErrorsErrorResponse",
            '408': "TransportErrorsErrorResponse",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    async def loyalty_iiko_program_post_without_preload_content(
        self,
        timeout: Annotated[Optional[StrictInt], Field(description="Timeout in seconds.")] = None,
        net_organization_get_programs_request: Optional[NetOrganizationGetProgramsRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get programs.

        Get all loyalty programs for organization.   > Restriction group: `Loyalty: dictionaries`.

        :param timeout: Timeout in seconds.
        :type timeout: int
        :param net_organization_get_programs_request:
        :type net_organization_get_programs_request: NetOrganizationGetProgramsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._loyalty_iiko_program_post_serialize(
            timeout=timeout,
            net_organization_get_programs_request=net_organization_get_programs_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "NetOrganizationGetProgramsResponse",
            '400': "TransportErrorsErrorResponse",
            '401': "TransportErrorsErrorResponse",
            '500': "TransportErrorsErrorResponse",
            '408': "TransportErrorsErrorResponse",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _loyalty_iiko_program_post_serialize(
        self,
        timeout,
        net_organization_get_programs_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if timeout is not None:
            _header_params['Timeout'] = timeout
        # process the form parameters
        # process the body parameter
        if net_organization_get_programs_request is not None:
            _body_params = net_organization_get_programs_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/loyalty/iiko/program',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


