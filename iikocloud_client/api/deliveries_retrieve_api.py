# coding: utf-8

"""
    iikoCloud API

    <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt
from typing import Optional
from typing_extensions import Annotated
from iikocloud_client.models.transport_deliveries_request_orders_by_delivery_date_and_filter_request import TransportDeliveriesRequestOrdersByDeliveryDateAndFilterRequest
from iikocloud_client.models.transport_deliveries_request_orders_by_delivery_date_and_phone_request import TransportDeliveriesRequestOrdersByDeliveryDateAndPhoneRequest
from iikocloud_client.models.transport_deliveries_request_orders_by_delivery_date_and_status_request import TransportDeliveriesRequestOrdersByDeliveryDateAndStatusRequest
from iikocloud_client.models.transport_deliveries_request_orders_by_id_request import TransportDeliveriesRequestOrdersByIdRequest
from iikocloud_client.models.transport_deliveries_request_orders_by_revision_request import TransportDeliveriesRequestOrdersByRevisionRequest
from iikocloud_client.models.transport_deliveries_request_orders_history_by_delivery_date_and_phone_request import TransportDeliveriesRequestOrdersHistoryByDeliveryDateAndPhoneRequest
from iikocloud_client.models.transport_deliveries_response_orders_response import TransportDeliveriesResponseOrdersResponse
from iikocloud_client.models.transport_deliveries_response_orders_with_revision_response import TransportDeliveriesResponseOrdersWithRevisionResponse

from iikocloud_client.api_client import ApiClient, RequestSerialized
from iikocloud_client.api_response import ApiResponse
from iikocloud_client.rest import RESTResponseType


class DeliveriesRetrieveApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    async def api1_deliveries_by_delivery_date_and_phone_post(
        self,
        timeout: Annotated[Optional[StrictInt], Field(description="Timeout in seconds.")] = None,
        transport_deliveries_request_orders_by_delivery_date_and_phone_request: Optional[TransportDeliveriesRequestOrdersByDeliveryDateAndPhoneRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TransportDeliveriesResponseOrdersWithRevisionResponse:
        """Retrieve list of orders by telephone number, dates and revision.

           > Restriction group: `Orders: receiving`.

        :param timeout: Timeout in seconds.
        :type timeout: int
        :param transport_deliveries_request_orders_by_delivery_date_and_phone_request:
        :type transport_deliveries_request_orders_by_delivery_date_and_phone_request: TransportDeliveriesRequestOrdersByDeliveryDateAndPhoneRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api1_deliveries_by_delivery_date_and_phone_post_serialize(
            timeout=timeout,
            transport_deliveries_request_orders_by_delivery_date_and_phone_request=transport_deliveries_request_orders_by_delivery_date_and_phone_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TransportDeliveriesResponseOrdersWithRevisionResponse",
            '400': "TransportErrorsErrorResponse",
            '401': "TransportErrorsErrorResponse",
            '500': "TransportErrorsErrorResponse",
            '408': "TransportErrorsErrorResponse",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    async def api1_deliveries_by_delivery_date_and_phone_post_with_http_info(
        self,
        timeout: Annotated[Optional[StrictInt], Field(description="Timeout in seconds.")] = None,
        transport_deliveries_request_orders_by_delivery_date_and_phone_request: Optional[TransportDeliveriesRequestOrdersByDeliveryDateAndPhoneRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TransportDeliveriesResponseOrdersWithRevisionResponse]:
        """Retrieve list of orders by telephone number, dates and revision.

           > Restriction group: `Orders: receiving`.

        :param timeout: Timeout in seconds.
        :type timeout: int
        :param transport_deliveries_request_orders_by_delivery_date_and_phone_request:
        :type transport_deliveries_request_orders_by_delivery_date_and_phone_request: TransportDeliveriesRequestOrdersByDeliveryDateAndPhoneRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api1_deliveries_by_delivery_date_and_phone_post_serialize(
            timeout=timeout,
            transport_deliveries_request_orders_by_delivery_date_and_phone_request=transport_deliveries_request_orders_by_delivery_date_and_phone_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TransportDeliveriesResponseOrdersWithRevisionResponse",
            '400': "TransportErrorsErrorResponse",
            '401': "TransportErrorsErrorResponse",
            '500': "TransportErrorsErrorResponse",
            '408': "TransportErrorsErrorResponse",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    async def api1_deliveries_by_delivery_date_and_phone_post_without_preload_content(
        self,
        timeout: Annotated[Optional[StrictInt], Field(description="Timeout in seconds.")] = None,
        transport_deliveries_request_orders_by_delivery_date_and_phone_request: Optional[TransportDeliveriesRequestOrdersByDeliveryDateAndPhoneRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve list of orders by telephone number, dates and revision.

           > Restriction group: `Orders: receiving`.

        :param timeout: Timeout in seconds.
        :type timeout: int
        :param transport_deliveries_request_orders_by_delivery_date_and_phone_request:
        :type transport_deliveries_request_orders_by_delivery_date_and_phone_request: TransportDeliveriesRequestOrdersByDeliveryDateAndPhoneRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api1_deliveries_by_delivery_date_and_phone_post_serialize(
            timeout=timeout,
            transport_deliveries_request_orders_by_delivery_date_and_phone_request=transport_deliveries_request_orders_by_delivery_date_and_phone_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TransportDeliveriesResponseOrdersWithRevisionResponse",
            '400': "TransportErrorsErrorResponse",
            '401': "TransportErrorsErrorResponse",
            '500': "TransportErrorsErrorResponse",
            '408': "TransportErrorsErrorResponse",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api1_deliveries_by_delivery_date_and_phone_post_serialize(
        self,
        timeout,
        transport_deliveries_request_orders_by_delivery_date_and_phone_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if timeout is not None:
            _header_params['Timeout'] = timeout
        # process the form parameters
        # process the body parameter
        if transport_deliveries_request_orders_by_delivery_date_and_phone_request is not None:
            _body_params = transport_deliveries_request_orders_by_delivery_date_and_phone_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/1/deliveries/by_delivery_date_and_phone',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    async def api1_deliveries_by_delivery_date_and_source_key_and_filter_post(
        self,
        timeout: Annotated[Optional[StrictInt], Field(description="Timeout in seconds.")] = None,
        transport_deliveries_request_orders_by_delivery_date_and_filter_request: Optional[TransportDeliveriesRequestOrdersByDeliveryDateAndFilterRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TransportDeliveriesResponseOrdersWithRevisionResponse:
        """Search orders by search text and additional filters (date, problem, statuses and other).

           > Restriction group: `Orders: receiving`.

        :param timeout: Timeout in seconds.
        :type timeout: int
        :param transport_deliveries_request_orders_by_delivery_date_and_filter_request:
        :type transport_deliveries_request_orders_by_delivery_date_and_filter_request: TransportDeliveriesRequestOrdersByDeliveryDateAndFilterRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api1_deliveries_by_delivery_date_and_source_key_and_filter_post_serialize(
            timeout=timeout,
            transport_deliveries_request_orders_by_delivery_date_and_filter_request=transport_deliveries_request_orders_by_delivery_date_and_filter_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TransportDeliveriesResponseOrdersWithRevisionResponse",
            '400': "TransportErrorsErrorResponse",
            '401': "TransportErrorsErrorResponse",
            '500': "TransportErrorsErrorResponse",
            '408': "TransportErrorsErrorResponse",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    async def api1_deliveries_by_delivery_date_and_source_key_and_filter_post_with_http_info(
        self,
        timeout: Annotated[Optional[StrictInt], Field(description="Timeout in seconds.")] = None,
        transport_deliveries_request_orders_by_delivery_date_and_filter_request: Optional[TransportDeliveriesRequestOrdersByDeliveryDateAndFilterRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TransportDeliveriesResponseOrdersWithRevisionResponse]:
        """Search orders by search text and additional filters (date, problem, statuses and other).

           > Restriction group: `Orders: receiving`.

        :param timeout: Timeout in seconds.
        :type timeout: int
        :param transport_deliveries_request_orders_by_delivery_date_and_filter_request:
        :type transport_deliveries_request_orders_by_delivery_date_and_filter_request: TransportDeliveriesRequestOrdersByDeliveryDateAndFilterRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api1_deliveries_by_delivery_date_and_source_key_and_filter_post_serialize(
            timeout=timeout,
            transport_deliveries_request_orders_by_delivery_date_and_filter_request=transport_deliveries_request_orders_by_delivery_date_and_filter_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TransportDeliveriesResponseOrdersWithRevisionResponse",
            '400': "TransportErrorsErrorResponse",
            '401': "TransportErrorsErrorResponse",
            '500': "TransportErrorsErrorResponse",
            '408': "TransportErrorsErrorResponse",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    async def api1_deliveries_by_delivery_date_and_source_key_and_filter_post_without_preload_content(
        self,
        timeout: Annotated[Optional[StrictInt], Field(description="Timeout in seconds.")] = None,
        transport_deliveries_request_orders_by_delivery_date_and_filter_request: Optional[TransportDeliveriesRequestOrdersByDeliveryDateAndFilterRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Search orders by search text and additional filters (date, problem, statuses and other).

           > Restriction group: `Orders: receiving`.

        :param timeout: Timeout in seconds.
        :type timeout: int
        :param transport_deliveries_request_orders_by_delivery_date_and_filter_request:
        :type transport_deliveries_request_orders_by_delivery_date_and_filter_request: TransportDeliveriesRequestOrdersByDeliveryDateAndFilterRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api1_deliveries_by_delivery_date_and_source_key_and_filter_post_serialize(
            timeout=timeout,
            transport_deliveries_request_orders_by_delivery_date_and_filter_request=transport_deliveries_request_orders_by_delivery_date_and_filter_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TransportDeliveriesResponseOrdersWithRevisionResponse",
            '400': "TransportErrorsErrorResponse",
            '401': "TransportErrorsErrorResponse",
            '500': "TransportErrorsErrorResponse",
            '408': "TransportErrorsErrorResponse",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api1_deliveries_by_delivery_date_and_source_key_and_filter_post_serialize(
        self,
        timeout,
        transport_deliveries_request_orders_by_delivery_date_and_filter_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if timeout is not None:
            _header_params['Timeout'] = timeout
        # process the form parameters
        # process the body parameter
        if transport_deliveries_request_orders_by_delivery_date_and_filter_request is not None:
            _body_params = transport_deliveries_request_orders_by_delivery_date_and_filter_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/1/deliveries/by_delivery_date_and_source_key_and_filter',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    async def api1_deliveries_by_delivery_date_and_status_post(
        self,
        timeout: Annotated[Optional[StrictInt], Field(description="Timeout in seconds.")] = None,
        transport_deliveries_request_orders_by_delivery_date_and_status_request: Optional[TransportDeliveriesRequestOrdersByDeliveryDateAndStatusRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TransportDeliveriesResponseOrdersWithRevisionResponse:
        """Retrieve list of orders by statuses and dates.

           > Restriction group: `Orders: receiving`.

        :param timeout: Timeout in seconds.
        :type timeout: int
        :param transport_deliveries_request_orders_by_delivery_date_and_status_request:
        :type transport_deliveries_request_orders_by_delivery_date_and_status_request: TransportDeliveriesRequestOrdersByDeliveryDateAndStatusRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api1_deliveries_by_delivery_date_and_status_post_serialize(
            timeout=timeout,
            transport_deliveries_request_orders_by_delivery_date_and_status_request=transport_deliveries_request_orders_by_delivery_date_and_status_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TransportDeliveriesResponseOrdersWithRevisionResponse",
            '400': "TransportErrorsErrorResponse",
            '401': "TransportErrorsErrorResponse",
            '500': "TransportErrorsErrorResponse",
            '408': "TransportErrorsErrorResponse",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    async def api1_deliveries_by_delivery_date_and_status_post_with_http_info(
        self,
        timeout: Annotated[Optional[StrictInt], Field(description="Timeout in seconds.")] = None,
        transport_deliveries_request_orders_by_delivery_date_and_status_request: Optional[TransportDeliveriesRequestOrdersByDeliveryDateAndStatusRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TransportDeliveriesResponseOrdersWithRevisionResponse]:
        """Retrieve list of orders by statuses and dates.

           > Restriction group: `Orders: receiving`.

        :param timeout: Timeout in seconds.
        :type timeout: int
        :param transport_deliveries_request_orders_by_delivery_date_and_status_request:
        :type transport_deliveries_request_orders_by_delivery_date_and_status_request: TransportDeliveriesRequestOrdersByDeliveryDateAndStatusRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api1_deliveries_by_delivery_date_and_status_post_serialize(
            timeout=timeout,
            transport_deliveries_request_orders_by_delivery_date_and_status_request=transport_deliveries_request_orders_by_delivery_date_and_status_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TransportDeliveriesResponseOrdersWithRevisionResponse",
            '400': "TransportErrorsErrorResponse",
            '401': "TransportErrorsErrorResponse",
            '500': "TransportErrorsErrorResponse",
            '408': "TransportErrorsErrorResponse",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    async def api1_deliveries_by_delivery_date_and_status_post_without_preload_content(
        self,
        timeout: Annotated[Optional[StrictInt], Field(description="Timeout in seconds.")] = None,
        transport_deliveries_request_orders_by_delivery_date_and_status_request: Optional[TransportDeliveriesRequestOrdersByDeliveryDateAndStatusRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve list of orders by statuses and dates.

           > Restriction group: `Orders: receiving`.

        :param timeout: Timeout in seconds.
        :type timeout: int
        :param transport_deliveries_request_orders_by_delivery_date_and_status_request:
        :type transport_deliveries_request_orders_by_delivery_date_and_status_request: TransportDeliveriesRequestOrdersByDeliveryDateAndStatusRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api1_deliveries_by_delivery_date_and_status_post_serialize(
            timeout=timeout,
            transport_deliveries_request_orders_by_delivery_date_and_status_request=transport_deliveries_request_orders_by_delivery_date_and_status_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TransportDeliveriesResponseOrdersWithRevisionResponse",
            '400': "TransportErrorsErrorResponse",
            '401': "TransportErrorsErrorResponse",
            '500': "TransportErrorsErrorResponse",
            '408': "TransportErrorsErrorResponse",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api1_deliveries_by_delivery_date_and_status_post_serialize(
        self,
        timeout,
        transport_deliveries_request_orders_by_delivery_date_and_status_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if timeout is not None:
            _header_params['Timeout'] = timeout
        # process the form parameters
        # process the body parameter
        if transport_deliveries_request_orders_by_delivery_date_and_status_request is not None:
            _body_params = transport_deliveries_request_orders_by_delivery_date_and_status_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/1/deliveries/by_delivery_date_and_status',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    async def api1_deliveries_by_id_post(
        self,
        timeout: Annotated[Optional[StrictInt], Field(description="Timeout in seconds.")] = None,
        transport_deliveries_request_orders_by_id_request: Optional[TransportDeliveriesRequestOrdersByIdRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TransportDeliveriesResponseOrdersResponse:
        """Retrieve orders by IDs.

           > Restriction group: `Orders: receiving`.

        :param timeout: Timeout in seconds.
        :type timeout: int
        :param transport_deliveries_request_orders_by_id_request:
        :type transport_deliveries_request_orders_by_id_request: TransportDeliveriesRequestOrdersByIdRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api1_deliveries_by_id_post_serialize(
            timeout=timeout,
            transport_deliveries_request_orders_by_id_request=transport_deliveries_request_orders_by_id_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TransportDeliveriesResponseOrdersResponse",
            '400': "TransportErrorsErrorResponse",
            '401': "TransportErrorsErrorResponse",
            '500': "TransportErrorsErrorResponse",
            '408': "TransportErrorsErrorResponse",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    async def api1_deliveries_by_id_post_with_http_info(
        self,
        timeout: Annotated[Optional[StrictInt], Field(description="Timeout in seconds.")] = None,
        transport_deliveries_request_orders_by_id_request: Optional[TransportDeliveriesRequestOrdersByIdRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TransportDeliveriesResponseOrdersResponse]:
        """Retrieve orders by IDs.

           > Restriction group: `Orders: receiving`.

        :param timeout: Timeout in seconds.
        :type timeout: int
        :param transport_deliveries_request_orders_by_id_request:
        :type transport_deliveries_request_orders_by_id_request: TransportDeliveriesRequestOrdersByIdRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api1_deliveries_by_id_post_serialize(
            timeout=timeout,
            transport_deliveries_request_orders_by_id_request=transport_deliveries_request_orders_by_id_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TransportDeliveriesResponseOrdersResponse",
            '400': "TransportErrorsErrorResponse",
            '401': "TransportErrorsErrorResponse",
            '500': "TransportErrorsErrorResponse",
            '408': "TransportErrorsErrorResponse",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    async def api1_deliveries_by_id_post_without_preload_content(
        self,
        timeout: Annotated[Optional[StrictInt], Field(description="Timeout in seconds.")] = None,
        transport_deliveries_request_orders_by_id_request: Optional[TransportDeliveriesRequestOrdersByIdRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve orders by IDs.

           > Restriction group: `Orders: receiving`.

        :param timeout: Timeout in seconds.
        :type timeout: int
        :param transport_deliveries_request_orders_by_id_request:
        :type transport_deliveries_request_orders_by_id_request: TransportDeliveriesRequestOrdersByIdRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api1_deliveries_by_id_post_serialize(
            timeout=timeout,
            transport_deliveries_request_orders_by_id_request=transport_deliveries_request_orders_by_id_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TransportDeliveriesResponseOrdersResponse",
            '400': "TransportErrorsErrorResponse",
            '401': "TransportErrorsErrorResponse",
            '500': "TransportErrorsErrorResponse",
            '408': "TransportErrorsErrorResponse",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api1_deliveries_by_id_post_serialize(
        self,
        timeout,
        transport_deliveries_request_orders_by_id_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if timeout is not None:
            _header_params['Timeout'] = timeout
        # process the form parameters
        # process the body parameter
        if transport_deliveries_request_orders_by_id_request is not None:
            _body_params = transport_deliveries_request_orders_by_id_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/1/deliveries/by_id',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    async def api1_deliveries_by_revision_post(
        self,
        timeout: Annotated[Optional[StrictInt], Field(description="Timeout in seconds.")] = None,
        transport_deliveries_request_orders_by_revision_request: Optional[TransportDeliveriesRequestOrdersByRevisionRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TransportDeliveriesResponseOrdersWithRevisionResponse:
        """Retrieve list of orders changed from the time revision was passed.

           > Restriction group: `Orders: receiving by revision`.

        :param timeout: Timeout in seconds.
        :type timeout: int
        :param transport_deliveries_request_orders_by_revision_request:
        :type transport_deliveries_request_orders_by_revision_request: TransportDeliveriesRequestOrdersByRevisionRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api1_deliveries_by_revision_post_serialize(
            timeout=timeout,
            transport_deliveries_request_orders_by_revision_request=transport_deliveries_request_orders_by_revision_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TransportDeliveriesResponseOrdersWithRevisionResponse",
            '400': "TransportErrorsErrorResponse",
            '401': "TransportErrorsErrorResponse",
            '500': "TransportErrorsErrorResponse",
            '408': "TransportErrorsErrorResponse",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    async def api1_deliveries_by_revision_post_with_http_info(
        self,
        timeout: Annotated[Optional[StrictInt], Field(description="Timeout in seconds.")] = None,
        transport_deliveries_request_orders_by_revision_request: Optional[TransportDeliveriesRequestOrdersByRevisionRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TransportDeliveriesResponseOrdersWithRevisionResponse]:
        """Retrieve list of orders changed from the time revision was passed.

           > Restriction group: `Orders: receiving by revision`.

        :param timeout: Timeout in seconds.
        :type timeout: int
        :param transport_deliveries_request_orders_by_revision_request:
        :type transport_deliveries_request_orders_by_revision_request: TransportDeliveriesRequestOrdersByRevisionRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api1_deliveries_by_revision_post_serialize(
            timeout=timeout,
            transport_deliveries_request_orders_by_revision_request=transport_deliveries_request_orders_by_revision_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TransportDeliveriesResponseOrdersWithRevisionResponse",
            '400': "TransportErrorsErrorResponse",
            '401': "TransportErrorsErrorResponse",
            '500': "TransportErrorsErrorResponse",
            '408': "TransportErrorsErrorResponse",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    async def api1_deliveries_by_revision_post_without_preload_content(
        self,
        timeout: Annotated[Optional[StrictInt], Field(description="Timeout in seconds.")] = None,
        transport_deliveries_request_orders_by_revision_request: Optional[TransportDeliveriesRequestOrdersByRevisionRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve list of orders changed from the time revision was passed.

           > Restriction group: `Orders: receiving by revision`.

        :param timeout: Timeout in seconds.
        :type timeout: int
        :param transport_deliveries_request_orders_by_revision_request:
        :type transport_deliveries_request_orders_by_revision_request: TransportDeliveriesRequestOrdersByRevisionRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api1_deliveries_by_revision_post_serialize(
            timeout=timeout,
            transport_deliveries_request_orders_by_revision_request=transport_deliveries_request_orders_by_revision_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TransportDeliveriesResponseOrdersWithRevisionResponse",
            '400': "TransportErrorsErrorResponse",
            '401': "TransportErrorsErrorResponse",
            '500': "TransportErrorsErrorResponse",
            '408': "TransportErrorsErrorResponse",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api1_deliveries_by_revision_post_serialize(
        self,
        timeout,
        transport_deliveries_request_orders_by_revision_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if timeout is not None:
            _header_params['Timeout'] = timeout
        # process the form parameters
        # process the body parameter
        if transport_deliveries_request_orders_by_revision_request is not None:
            _body_params = transport_deliveries_request_orders_by_revision_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/1/deliveries/by_revision',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    async def api1_deliveries_history_by_delivery_date_and_phone_post(
        self,
        timeout: Annotated[Optional[StrictInt], Field(description="Timeout in seconds.")] = None,
        transport_deliveries_request_orders_history_by_delivery_date_and_phone_request: Optional[TransportDeliveriesRequestOrdersHistoryByDeliveryDateAndPhoneRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TransportDeliveriesResponseOrdersWithRevisionResponse:
        """Retrieve list of history orders by telephone number, dates and revision.

           > Restriction group: `Orders: receiving`.

        :param timeout: Timeout in seconds.
        :type timeout: int
        :param transport_deliveries_request_orders_history_by_delivery_date_and_phone_request:
        :type transport_deliveries_request_orders_history_by_delivery_date_and_phone_request: TransportDeliveriesRequestOrdersHistoryByDeliveryDateAndPhoneRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api1_deliveries_history_by_delivery_date_and_phone_post_serialize(
            timeout=timeout,
            transport_deliveries_request_orders_history_by_delivery_date_and_phone_request=transport_deliveries_request_orders_history_by_delivery_date_and_phone_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TransportDeliveriesResponseOrdersWithRevisionResponse",
            '400': "TransportErrorsErrorResponse",
            '401': "TransportErrorsErrorResponse",
            '500': "TransportErrorsErrorResponse",
            '408': "TransportErrorsErrorResponse",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    async def api1_deliveries_history_by_delivery_date_and_phone_post_with_http_info(
        self,
        timeout: Annotated[Optional[StrictInt], Field(description="Timeout in seconds.")] = None,
        transport_deliveries_request_orders_history_by_delivery_date_and_phone_request: Optional[TransportDeliveriesRequestOrdersHistoryByDeliveryDateAndPhoneRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TransportDeliveriesResponseOrdersWithRevisionResponse]:
        """Retrieve list of history orders by telephone number, dates and revision.

           > Restriction group: `Orders: receiving`.

        :param timeout: Timeout in seconds.
        :type timeout: int
        :param transport_deliveries_request_orders_history_by_delivery_date_and_phone_request:
        :type transport_deliveries_request_orders_history_by_delivery_date_and_phone_request: TransportDeliveriesRequestOrdersHistoryByDeliveryDateAndPhoneRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api1_deliveries_history_by_delivery_date_and_phone_post_serialize(
            timeout=timeout,
            transport_deliveries_request_orders_history_by_delivery_date_and_phone_request=transport_deliveries_request_orders_history_by_delivery_date_and_phone_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TransportDeliveriesResponseOrdersWithRevisionResponse",
            '400': "TransportErrorsErrorResponse",
            '401': "TransportErrorsErrorResponse",
            '500': "TransportErrorsErrorResponse",
            '408': "TransportErrorsErrorResponse",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    async def api1_deliveries_history_by_delivery_date_and_phone_post_without_preload_content(
        self,
        timeout: Annotated[Optional[StrictInt], Field(description="Timeout in seconds.")] = None,
        transport_deliveries_request_orders_history_by_delivery_date_and_phone_request: Optional[TransportDeliveriesRequestOrdersHistoryByDeliveryDateAndPhoneRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve list of history orders by telephone number, dates and revision.

           > Restriction group: `Orders: receiving`.

        :param timeout: Timeout in seconds.
        :type timeout: int
        :param transport_deliveries_request_orders_history_by_delivery_date_and_phone_request:
        :type transport_deliveries_request_orders_history_by_delivery_date_and_phone_request: TransportDeliveriesRequestOrdersHistoryByDeliveryDateAndPhoneRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api1_deliveries_history_by_delivery_date_and_phone_post_serialize(
            timeout=timeout,
            transport_deliveries_request_orders_history_by_delivery_date_and_phone_request=transport_deliveries_request_orders_history_by_delivery_date_and_phone_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TransportDeliveriesResponseOrdersWithRevisionResponse",
            '400': "TransportErrorsErrorResponse",
            '401': "TransportErrorsErrorResponse",
            '500': "TransportErrorsErrorResponse",
            '408': "TransportErrorsErrorResponse",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api1_deliveries_history_by_delivery_date_and_phone_post_serialize(
        self,
        timeout,
        transport_deliveries_request_orders_history_by_delivery_date_and_phone_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if timeout is not None:
            _header_params['Timeout'] = timeout
        # process the form parameters
        # process the body parameter
        if transport_deliveries_request_orders_history_by_delivery_date_and_phone_request is not None:
            _body_params = transport_deliveries_request_orders_history_by_delivery_date_and_phone_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/1/deliveries/history/by_delivery_date_and_phone',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


