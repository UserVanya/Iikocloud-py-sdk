# coding: utf-8

"""
    iikoCloud API

    <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from iikocloud_client.models.net_loyalty_result_available_combo import NetLoyaltyResultAvailableCombo
from iikocloud_client.models.net_loyalty_result_discount_operation import NetLoyaltyResultDiscountOperation
from iikocloud_client.models.net_loyalty_result_free_products_group import NetLoyaltyResultFreeProductsGroup
from iikocloud_client.models.net_loyalty_result_upsale import NetLoyaltyResultUpsale
from typing import Optional, Set
from typing_extensions import Self

class NetLoyaltyResultLoyaltyProgramResult(BaseModel):
    """
    Loyalty result for order.
    """ # noqa: E501
    marketing_campaign_id: Optional[StrictStr] = Field(default=None, description="Program marketing campaign id.", alias="marketingCampaignId")
    name: Optional[StrictStr] = Field(default=None, description="Program name.")
    discounts: Optional[List[NetLoyaltyResultDiscountOperation]] = Field(default=None, description="Discount operations applied to order items.")
    upsales: Optional[List[NetLoyaltyResultUpsale]] = Field(default=None, description="Suggested items to add or advices for customer.")
    free_products: Optional[List[NetLoyaltyResultFreeProductsGroup]] = Field(default=None, description="Program free products.", alias="freeProducts")
    available_combo_specifications: Optional[List[StrictStr]] = Field(default=None, description="Ids of combo specification available in current order.", alias="availableComboSpecifications")
    available_combos: Optional[List[NetLoyaltyResultAvailableCombo]] = Field(default=None, description="Partially added combos, available for assembly.", alias="availableCombos")
    need_to_activate_certificate: Optional[StrictBool] = Field(default=None, description="Certificate number is required for activation.", alias="needToActivateCertificate")
    __properties: ClassVar[List[str]] = ["marketingCampaignId", "name", "discounts", "upsales", "freeProducts", "availableComboSpecifications", "availableCombos", "needToActivateCertificate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NetLoyaltyResultLoyaltyProgramResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in discounts (list)
        _items = []
        if self.discounts:
            for _item_discounts in self.discounts:
                if _item_discounts:
                    _items.append(_item_discounts.to_dict())
            _dict['discounts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in upsales (list)
        _items = []
        if self.upsales:
            for _item_upsales in self.upsales:
                if _item_upsales:
                    _items.append(_item_upsales.to_dict())
            _dict['upsales'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in free_products (list)
        _items = []
        if self.free_products:
            for _item_free_products in self.free_products:
                if _item_free_products:
                    _items.append(_item_free_products.to_dict())
            _dict['freeProducts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in available_combos (list)
        _items = []
        if self.available_combos:
            for _item_available_combos in self.available_combos:
                if _item_available_combos:
                    _items.append(_item_available_combos.to_dict())
            _dict['availableCombos'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NetLoyaltyResultLoyaltyProgramResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "marketingCampaignId": obj.get("marketingCampaignId"),
            "name": obj.get("name"),
            "discounts": [NetLoyaltyResultDiscountOperation.from_dict(_item) for _item in obj["discounts"]] if obj.get("discounts") is not None else None,
            "upsales": [NetLoyaltyResultUpsale.from_dict(_item) for _item in obj["upsales"]] if obj.get("upsales") is not None else None,
            "freeProducts": [NetLoyaltyResultFreeProductsGroup.from_dict(_item) for _item in obj["freeProducts"]] if obj.get("freeProducts") is not None else None,
            "availableComboSpecifications": obj.get("availableComboSpecifications"),
            "availableCombos": [NetLoyaltyResultAvailableCombo.from_dict(_item) for _item in obj["availableCombos"]] if obj.get("availableCombos") is not None else None,
            "needToActivateCertificate": obj.get("needToActivateCertificate")
        })
        return _obj


