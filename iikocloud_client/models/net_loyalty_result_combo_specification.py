# coding: utf-8

"""
    iikoCloud API

    <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from iikocloud_client.models.net_loyalty_result_combo_group import NetLoyaltyResultComboGroup
from iikocloud_client.models.net_loyalty_result_combo_price_modification_type import NetLoyaltyResultComboPriceModificationType
from typing import Optional, Set
from typing_extensions import Self

class NetLoyaltyResultComboSpecification(BaseModel):
    """
    Information about combos of organization.
    """ # noqa: E501
    source_action_id: Optional[StrictStr] = Field(default=None, description="Id of action that added the combo.", alias="sourceActionId")
    category_id: Optional[StrictStr] = Field(default=None, description="Combo's category id.", alias="categoryId")
    name: Optional[StrictStr] = Field(default=None, description="Name. Can be null.")
    price_modification_type: Optional[NetLoyaltyResultComboPriceModificationType] = Field(default=None, description="Price modification type.  <br>0 - fixed combo price,<br />1 - fixed position price,<br />2 - cheapest position discount,<br />3 - most expensive position discount,<br />4 - percentage discount for each position.", alias="priceModificationType")
    price_modification: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Price modification.", alias="priceModification")
    is_active: Optional[StrictBool] = Field(default=None, description="Is active.", alias="isActive")
    start_date: Optional[StrictStr] = Field(default=None, description="Start date.", alias="startDate")
    expiration_date: Optional[StrictStr] = Field(default=None, description="Expiration date.", alias="expirationDate")
    lacking_groups_to_suggest: Optional[StrictInt] = Field(default=None, description="Lacking groups to suggest.", alias="lackingGroupsToSuggest")
    include_modifiers: Optional[StrictBool] = Field(default=None, description="Include modifiers.", alias="includeModifiers")
    groups: Optional[List[NetLoyaltyResultComboGroup]] = Field(default=None, description="Groups.")
    __properties: ClassVar[List[str]] = ["sourceActionId", "categoryId", "name", "priceModificationType", "priceModification", "isActive", "startDate", "expirationDate", "lackingGroupsToSuggest", "includeModifiers", "groups"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NetLoyaltyResultComboSpecification from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in groups (list)
        _items = []
        if self.groups:
            for _item_groups in self.groups:
                if _item_groups:
                    _items.append(_item_groups.to_dict())
            _dict['groups'] = _items
        # set to None if category_id (nullable) is None
        # and model_fields_set contains the field
        if self.category_id is None and "category_id" in self.model_fields_set:
            _dict['categoryId'] = None

        # set to None if is_active (nullable) is None
        # and model_fields_set contains the field
        if self.is_active is None and "is_active" in self.model_fields_set:
            _dict['isActive'] = None

        # set to None if start_date (nullable) is None
        # and model_fields_set contains the field
        if self.start_date is None and "start_date" in self.model_fields_set:
            _dict['startDate'] = None

        # set to None if expiration_date (nullable) is None
        # and model_fields_set contains the field
        if self.expiration_date is None and "expiration_date" in self.model_fields_set:
            _dict['expirationDate'] = None

        # set to None if lacking_groups_to_suggest (nullable) is None
        # and model_fields_set contains the field
        if self.lacking_groups_to_suggest is None and "lacking_groups_to_suggest" in self.model_fields_set:
            _dict['lackingGroupsToSuggest'] = None

        # set to None if include_modifiers (nullable) is None
        # and model_fields_set contains the field
        if self.include_modifiers is None and "include_modifiers" in self.model_fields_set:
            _dict['includeModifiers'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NetLoyaltyResultComboSpecification from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sourceActionId": obj.get("sourceActionId"),
            "categoryId": obj.get("categoryId"),
            "name": obj.get("name"),
            "priceModificationType": obj.get("priceModificationType"),
            "priceModification": obj.get("priceModification"),
            "isActive": obj.get("isActive"),
            "startDate": obj.get("startDate"),
            "expirationDate": obj.get("expirationDate"),
            "lackingGroupsToSuggest": obj.get("lackingGroupsToSuggest"),
            "includeModifiers": obj.get("includeModifiers"),
            "groups": [NetLoyaltyResultComboGroup.from_dict(_item) for _item in obj["groups"]] if obj.get("groups") is not None else None
        })
        return _obj


