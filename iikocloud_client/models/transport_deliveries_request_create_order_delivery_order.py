# coding: utf-8

"""
    iikoCloud API

    <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from iikocloud_client.models.transport_deliveries_common_cheque_additional_info import TransportDeliveriesCommonChequeAdditionalInfo
from iikocloud_client.models.transport_deliveries_request_create_order_combo import TransportDeliveriesRequestCreateOrderCombo
from iikocloud_client.models.transport_deliveries_request_create_order_customer import TransportDeliveriesRequestCreateOrderCustomer
from iikocloud_client.models.transport_deliveries_request_create_order_delivery_point import TransportDeliveriesRequestCreateOrderDeliveryPoint
from iikocloud_client.models.transport_deliveries_request_create_order_discounts_info import TransportDeliveriesRequestCreateOrderDiscountsInfo
from iikocloud_client.models.transport_deliveries_request_create_order_external_data import TransportDeliveriesRequestCreateOrderExternalData
from iikocloud_client.models.transport_deliveries_request_create_order_guests import TransportDeliveriesRequestCreateOrderGuests
from iikocloud_client.models.transport_deliveries_request_create_order_loyalty_info import TransportDeliveriesRequestCreateOrderLoyaltyInfo
from iikocloud_client.models.transport_deliveries_request_create_order_order_item import TransportDeliveriesRequestCreateOrderOrderItem
from iikocloud_client.models.transport_deliveries_request_create_order_order_service_type import TransportDeliveriesRequestCreateOrderOrderServiceType
from iikocloud_client.models.transport_deliveries_request_create_order_payment import TransportDeliveriesRequestCreateOrderPayment
from iikocloud_client.models.transport_deliveries_request_create_order_tips_payment import TransportDeliveriesRequestCreateOrderTipsPayment
from typing import Optional, Set
from typing_extensions import Self

class TransportDeliveriesRequestCreateOrderDeliveryOrder(BaseModel):
    """
    Delivery order.
    """ # noqa: E501
    menu_id: Optional[StrictStr] = Field(default=None, description="External menu ID.", alias="menuId")
    id: Optional[StrictStr] = Field(default=None, description="Order ID. Must be unique.  > If sent null, it generates automatically on iikoTransport side.")
    external_number: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=50)]] = Field(default=None, description="Order external number.   > Allowed from version `8.0.6`.", alias="externalNumber")
    complete_before: Optional[StrictStr] = Field(default=None, description="Order fulfillment date.  > Date and time must be local for delivery terminal, without time zone (take a look at example).   > If null, order is urgent and time is calculated based on customer settings,  > i.e. the shortest delivery time possible.  > Permissible values: from current day and 60 days on.", alias="completeBefore")
    phone: Annotated[str, Field(min_length=8, strict=True, max_length=40)] = Field(description="Telephone number.  > Must begin with symbol \"+\" and must be at least 8 digits.")
    order_type_id: Optional[StrictStr] = Field(default=None, description="Order type ID.     Can be obtained by `/api/1/deliveries/order_types` operation.    > Only one of the fields must be defined: **orderTypeId** or **orderServiceType**.", alias="orderTypeId")
    order_service_type: Optional[TransportDeliveriesRequestCreateOrderOrderServiceType] = Field(default=None, description="Order service type.  > Only one of the fields must be defined: **orderTypeId** or **orderServiceType**.   > Allowed from version `7.0.3`.", alias="orderServiceType")
    delivery_point: Optional[TransportDeliveriesRequestCreateOrderDeliveryPoint] = Field(default=None, description="Delivery point details.  > Not required in case of customer pickup. Otherwise, required.", alias="deliveryPoint")
    comment: Optional[StrictStr] = Field(default=None, description="Order comment.")
    customer: Optional[TransportDeliveriesRequestCreateOrderCustomer] = Field(default=None, description="Customer.                'Regular' customer:    - can be used only if a customer agrees to take part in the store's loyalty programs  - customer details will be added (updated) to the store's customer database  - benefits (accumulation of rewards, etc.) of active loyalty programs will be made available to the customer     'One-time' customer:    - should be used if a customer does not agree to take part in the store's loyalty programs or an aggregator (external system) does not provide customer details  - customer details will NOT be added to the store's customer database and will be used ONLY to complete the current order")
    guests: Optional[TransportDeliveriesRequestCreateOrderGuests] = Field(default=None, description="Guest details. Not equal to the customer who makes an order.")
    marketing_source_id: Optional[StrictStr] = Field(default=None, description="Marketing source (advertisement) ID.                 Can be obtained by `/api/1/marketing_sources` operation.", alias="marketingSourceId")
    operator_id: Optional[StrictStr] = Field(default=None, description="Operator ID.   > Allowed from version `7.6.3`.", alias="operatorId")
    delivery_duration: Optional[StrictInt] = Field(default=None, description="Delivery duration.   > Allowed from version `8.8.6`.", alias="deliveryDuration")
    delivery_zone: Optional[StrictStr] = Field(default=None, description="Name of delivery zone.   > Allowed from version `8.8.6`.", alias="deliveryZone")
    items: List[TransportDeliveriesRequestCreateOrderOrderItem] = Field(description="Order items.")
    combos: Optional[List[TransportDeliveriesRequestCreateOrderCombo]] = Field(default=None, description="Combos included in order.")
    payments: Optional[List[TransportDeliveriesRequestCreateOrderPayment]] = Field(default=None, description="Order payment components.   > Type **LoyaltyCard** allowed from version `7.1.5`.")
    tips: Optional[List[TransportDeliveriesRequestCreateOrderTipsPayment]] = Field(default=None, description="Order tips components.")
    source_key: Optional[StrictStr] = Field(default=None, description="The string key (marker) of the source (partner - api user) that created the order. Needed to limit the visibility of orders for external integration.", alias="sourceKey")
    discounts_info: Optional[TransportDeliveriesRequestCreateOrderDiscountsInfo] = Field(default=None, description="Discounts/surcharges.", alias="discountsInfo")
    loyalty_info: Optional[TransportDeliveriesRequestCreateOrderLoyaltyInfo] = Field(default=None, description="Information about Loyalty app.", alias="loyaltyInfo")
    cheque_additional_info: Optional[TransportDeliveriesCommonChequeAdditionalInfo] = Field(default=None, description="Cheque additional information.", alias="chequeAdditionalInfo")
    external_data: Optional[List[TransportDeliveriesRequestCreateOrderExternalData]] = Field(default=None, description="Order external data.   > Allowed from version `8.0.6`.", alias="externalData")
    __properties: ClassVar[List[str]] = ["menuId", "id", "externalNumber", "completeBefore", "phone", "orderTypeId", "orderServiceType", "deliveryPoint", "comment", "customer", "guests", "marketingSourceId", "operatorId", "deliveryDuration", "deliveryZone", "items", "combos", "payments", "tips", "sourceKey", "discountsInfo", "loyaltyInfo", "chequeAdditionalInfo", "externalData"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TransportDeliveriesRequestCreateOrderDeliveryOrder from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of delivery_point
        if self.delivery_point:
            _dict['deliveryPoint'] = self.delivery_point.to_dict()
        # override the default output from pydantic by calling `to_dict()` of customer
        if self.customer:
            _dict['customer'] = self.customer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of guests
        if self.guests:
            _dict['guests'] = self.guests.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item_items in self.items:
                if _item_items:
                    _items.append(_item_items.to_dict())
            _dict['items'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in combos (list)
        _items = []
        if self.combos:
            for _item_combos in self.combos:
                if _item_combos:
                    _items.append(_item_combos.to_dict())
            _dict['combos'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in payments (list)
        _items = []
        if self.payments:
            for _item_payments in self.payments:
                if _item_payments:
                    _items.append(_item_payments.to_dict())
            _dict['payments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tips (list)
        _items = []
        if self.tips:
            for _item_tips in self.tips:
                if _item_tips:
                    _items.append(_item_tips.to_dict())
            _dict['tips'] = _items
        # override the default output from pydantic by calling `to_dict()` of discounts_info
        if self.discounts_info:
            _dict['discountsInfo'] = self.discounts_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of loyalty_info
        if self.loyalty_info:
            _dict['loyaltyInfo'] = self.loyalty_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cheque_additional_info
        if self.cheque_additional_info:
            _dict['chequeAdditionalInfo'] = self.cheque_additional_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in external_data (list)
        _items = []
        if self.external_data:
            for _item_external_data in self.external_data:
                if _item_external_data:
                    _items.append(_item_external_data.to_dict())
            _dict['externalData'] = _items
        # set to None if menu_id (nullable) is None
        # and model_fields_set contains the field
        if self.menu_id is None and "menu_id" in self.model_fields_set:
            _dict['menuId'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if external_number (nullable) is None
        # and model_fields_set contains the field
        if self.external_number is None and "external_number" in self.model_fields_set:
            _dict['externalNumber'] = None

        # set to None if complete_before (nullable) is None
        # and model_fields_set contains the field
        if self.complete_before is None and "complete_before" in self.model_fields_set:
            _dict['completeBefore'] = None

        # set to None if order_type_id (nullable) is None
        # and model_fields_set contains the field
        if self.order_type_id is None and "order_type_id" in self.model_fields_set:
            _dict['orderTypeId'] = None

        # set to None if order_service_type (nullable) is None
        # and model_fields_set contains the field
        if self.order_service_type is None and "order_service_type" in self.model_fields_set:
            _dict['orderServiceType'] = None

        # set to None if delivery_point (nullable) is None
        # and model_fields_set contains the field
        if self.delivery_point is None and "delivery_point" in self.model_fields_set:
            _dict['deliveryPoint'] = None

        # set to None if comment (nullable) is None
        # and model_fields_set contains the field
        if self.comment is None and "comment" in self.model_fields_set:
            _dict['comment'] = None

        # set to None if customer (nullable) is None
        # and model_fields_set contains the field
        if self.customer is None and "customer" in self.model_fields_set:
            _dict['customer'] = None

        # set to None if guests (nullable) is None
        # and model_fields_set contains the field
        if self.guests is None and "guests" in self.model_fields_set:
            _dict['guests'] = None

        # set to None if marketing_source_id (nullable) is None
        # and model_fields_set contains the field
        if self.marketing_source_id is None and "marketing_source_id" in self.model_fields_set:
            _dict['marketingSourceId'] = None

        # set to None if operator_id (nullable) is None
        # and model_fields_set contains the field
        if self.operator_id is None and "operator_id" in self.model_fields_set:
            _dict['operatorId'] = None

        # set to None if delivery_duration (nullable) is None
        # and model_fields_set contains the field
        if self.delivery_duration is None and "delivery_duration" in self.model_fields_set:
            _dict['deliveryDuration'] = None

        # set to None if delivery_zone (nullable) is None
        # and model_fields_set contains the field
        if self.delivery_zone is None and "delivery_zone" in self.model_fields_set:
            _dict['deliveryZone'] = None

        # set to None if combos (nullable) is None
        # and model_fields_set contains the field
        if self.combos is None and "combos" in self.model_fields_set:
            _dict['combos'] = None

        # set to None if payments (nullable) is None
        # and model_fields_set contains the field
        if self.payments is None and "payments" in self.model_fields_set:
            _dict['payments'] = None

        # set to None if tips (nullable) is None
        # and model_fields_set contains the field
        if self.tips is None and "tips" in self.model_fields_set:
            _dict['tips'] = None

        # set to None if source_key (nullable) is None
        # and model_fields_set contains the field
        if self.source_key is None and "source_key" in self.model_fields_set:
            _dict['sourceKey'] = None

        # set to None if discounts_info (nullable) is None
        # and model_fields_set contains the field
        if self.discounts_info is None and "discounts_info" in self.model_fields_set:
            _dict['discountsInfo'] = None

        # set to None if loyalty_info (nullable) is None
        # and model_fields_set contains the field
        if self.loyalty_info is None and "loyalty_info" in self.model_fields_set:
            _dict['loyaltyInfo'] = None

        # set to None if cheque_additional_info (nullable) is None
        # and model_fields_set contains the field
        if self.cheque_additional_info is None and "cheque_additional_info" in self.model_fields_set:
            _dict['chequeAdditionalInfo'] = None

        # set to None if external_data (nullable) is None
        # and model_fields_set contains the field
        if self.external_data is None and "external_data" in self.model_fields_set:
            _dict['externalData'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TransportDeliveriesRequestCreateOrderDeliveryOrder from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "menuId": obj.get("menuId"),
            "id": obj.get("id"),
            "externalNumber": obj.get("externalNumber"),
            "completeBefore": obj.get("completeBefore"),
            "phone": obj.get("phone"),
            "orderTypeId": obj.get("orderTypeId"),
            "orderServiceType": obj.get("orderServiceType"),
            "deliveryPoint": TransportDeliveriesRequestCreateOrderDeliveryPoint.from_dict(obj["deliveryPoint"]) if obj.get("deliveryPoint") is not None else None,
            "comment": obj.get("comment"),
            "customer": TransportDeliveriesRequestCreateOrderCustomer.from_dict(obj["customer"]) if obj.get("customer") is not None else None,
            "guests": TransportDeliveriesRequestCreateOrderGuests.from_dict(obj["guests"]) if obj.get("guests") is not None else None,
            "marketingSourceId": obj.get("marketingSourceId"),
            "operatorId": obj.get("operatorId"),
            "deliveryDuration": obj.get("deliveryDuration"),
            "deliveryZone": obj.get("deliveryZone"),
            "items": [TransportDeliveriesRequestCreateOrderOrderItem.from_dict(_item) for _item in obj["items"]] if obj.get("items") is not None else None,
            "combos": [TransportDeliveriesRequestCreateOrderCombo.from_dict(_item) for _item in obj["combos"]] if obj.get("combos") is not None else None,
            "payments": [TransportDeliveriesRequestCreateOrderPayment.from_dict(_item) for _item in obj["payments"]] if obj.get("payments") is not None else None,
            "tips": [TransportDeliveriesRequestCreateOrderTipsPayment.from_dict(_item) for _item in obj["tips"]] if obj.get("tips") is not None else None,
            "sourceKey": obj.get("sourceKey"),
            "discountsInfo": TransportDeliveriesRequestCreateOrderDiscountsInfo.from_dict(obj["discountsInfo"]) if obj.get("discountsInfo") is not None else None,
            "loyaltyInfo": TransportDeliveriesRequestCreateOrderLoyaltyInfo.from_dict(obj["loyaltyInfo"]) if obj.get("loyaltyInfo") is not None else None,
            "chequeAdditionalInfo": TransportDeliveriesCommonChequeAdditionalInfo.from_dict(obj["chequeAdditionalInfo"]) if obj.get("chequeAdditionalInfo") is not None else None,
            "externalData": [TransportDeliveriesRequestCreateOrderExternalData.from_dict(_item) for _item in obj["externalData"]] if obj.get("externalData") is not None else None
        })
        return _obj


