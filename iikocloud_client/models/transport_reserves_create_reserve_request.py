# coding: utf-8

"""
    iikoCloud API

    <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from iikocloud_client.models.transport_deliveries_request_create_order_regular_customer import TransportDeliveriesRequestCreateOrderRegularCustomer
from iikocloud_client.models.transport_orders_common_create_order_settings import TransportOrdersCommonCreateOrderSettings
from iikocloud_client.models.transport_reserves_guests_info import TransportReservesGuestsInfo
from iikocloud_client.models.transport_reserves_request_reserve_order import TransportReservesRequestReserveOrder
from typing import Optional, Set
from typing_extensions import Self

class TransportReservesCreateReserveRequest(BaseModel):
    """
    Banquet/reserve creation model.
    """ # noqa: E501
    organization_id: StrictStr = Field(description="Organization ID of a new banquet/reserve.                Can be obtained by `/organizations` operation.", alias="organizationId")
    terminal_group_id: Optional[StrictStr] = Field(default=None, description="Front group ID an banquet/reserve must be sent to.                Can be obtained by `/terminal_groups` operation.", alias="terminalGroupId")
    id: Optional[StrictStr] = Field(default=None, description="Banquet/reserve ID. Must be unique.")
    external_number: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=50)]] = Field(default=None, description="Banquet/reserve external number.   > Allowed from version `8.0.6`.", alias="externalNumber")
    order: Optional[TransportReservesRequestReserveOrder] = Field(default=None, description="Order. Used only at a banquet.")
    customer: TransportDeliveriesRequestCreateOrderRegularCustomer = Field(description="Customer.")
    phone: StrictStr = Field(description="Telephone number.  > Must begin with symbol \"+\" and must be at least 8 digits.")
    guests_count: Optional[StrictInt] = Field(default=None, description="Number of guests.", alias="guestsCount")
    comment: Optional[StrictStr] = Field(default=None, description="Banquet/reserve comment.")
    duration_in_minutes: StrictInt = Field(description="Estimated banquet duration.", alias="durationInMinutes")
    should_remind: StrictBool = Field(description="Whether to remind staff to prepare table beforehand.", alias="shouldRemind")
    table_ids: List[StrictStr] = Field(description="Reserved tables.", alias="tableIds")
    estimated_start_time: StrictStr = Field(description="Estimated time when reserve will be closed or banquet will be started (Local for the terminal).  Reservation can be made up to 90 days prior to the date.", alias="estimatedStartTime")
    transport_to_front_timeout: Optional[StrictInt] = Field(default=None, description="Timeout in seconds that specifies how much time is given for banquet/reserve to reach iikoFront.   After this time, banquet/reserve is nullified if iikoFront doesn't take it. By default - 8 seconds.", alias="transportToFrontTimeout")
    guests: Optional[TransportReservesGuestsInfo] = Field(default=None, description="Guests information.")
    event_type: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=160)]] = Field(default=None, description="Event type.   > Allowed from version `8.5.6`.", alias="eventType")
    create_reserve_settings: Optional[TransportOrdersCommonCreateOrderSettings] = Field(default=None, description="Reserve creation parameters.", alias="createReserveSettings")
    __properties: ClassVar[List[str]] = ["organizationId", "terminalGroupId", "id", "externalNumber", "order", "customer", "phone", "guestsCount", "comment", "durationInMinutes", "shouldRemind", "tableIds", "estimatedStartTime", "transportToFrontTimeout", "guests", "eventType", "createReserveSettings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TransportReservesCreateReserveRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of order
        if self.order:
            _dict['order'] = self.order.to_dict()
        # override the default output from pydantic by calling `to_dict()` of customer
        if self.customer:
            _dict['customer'] = self.customer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of guests
        if self.guests:
            _dict['guests'] = self.guests.to_dict()
        # override the default output from pydantic by calling `to_dict()` of create_reserve_settings
        if self.create_reserve_settings:
            _dict['createReserveSettings'] = self.create_reserve_settings.to_dict()
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if external_number (nullable) is None
        # and model_fields_set contains the field
        if self.external_number is None and "external_number" in self.model_fields_set:
            _dict['externalNumber'] = None

        # set to None if order (nullable) is None
        # and model_fields_set contains the field
        if self.order is None and "order" in self.model_fields_set:
            _dict['order'] = None

        # set to None if guests_count (nullable) is None
        # and model_fields_set contains the field
        if self.guests_count is None and "guests_count" in self.model_fields_set:
            _dict['guestsCount'] = None

        # set to None if comment (nullable) is None
        # and model_fields_set contains the field
        if self.comment is None and "comment" in self.model_fields_set:
            _dict['comment'] = None

        # set to None if transport_to_front_timeout (nullable) is None
        # and model_fields_set contains the field
        if self.transport_to_front_timeout is None and "transport_to_front_timeout" in self.model_fields_set:
            _dict['transportToFrontTimeout'] = None

        # set to None if guests (nullable) is None
        # and model_fields_set contains the field
        if self.guests is None and "guests" in self.model_fields_set:
            _dict['guests'] = None

        # set to None if event_type (nullable) is None
        # and model_fields_set contains the field
        if self.event_type is None and "event_type" in self.model_fields_set:
            _dict['eventType'] = None

        # set to None if create_reserve_settings (nullable) is None
        # and model_fields_set contains the field
        if self.create_reserve_settings is None and "create_reserve_settings" in self.model_fields_set:
            _dict['createReserveSettings'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TransportReservesCreateReserveRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "organizationId": obj.get("organizationId"),
            "terminalGroupId": obj.get("terminalGroupId"),
            "id": obj.get("id"),
            "externalNumber": obj.get("externalNumber"),
            "order": TransportReservesRequestReserveOrder.from_dict(obj["order"]) if obj.get("order") is not None else None,
            "customer": TransportDeliveriesRequestCreateOrderRegularCustomer.from_dict(obj["customer"]) if obj.get("customer") is not None else None,
            "phone": obj.get("phone"),
            "guestsCount": obj.get("guestsCount"),
            "comment": obj.get("comment"),
            "durationInMinutes": obj.get("durationInMinutes"),
            "shouldRemind": obj.get("shouldRemind"),
            "tableIds": obj.get("tableIds"),
            "estimatedStartTime": obj.get("estimatedStartTime"),
            "transportToFrontTimeout": obj.get("transportToFrontTimeout"),
            "guests": TransportReservesGuestsInfo.from_dict(obj["guests"]) if obj.get("guests") is not None else None,
            "eventType": obj.get("eventType"),
            "createReserveSettings": TransportOrdersCommonCreateOrderSettings.from_dict(obj["createReserveSettings"]) if obj.get("createReserveSettings") is not None else None
        })
        return _obj


