# coding: utf-8

"""
    iikoCloud API

    <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from iikocloud_client.models.transport_delivery_restrictions_action_on_validation_rejection import TransportDeliveryRestrictionsActionOnValidationRejection
from iikocloud_client.models.transport_delivery_restrictions_delivery_geocode_service_type import TransportDeliveryRestrictionsDeliveryGeocodeServiceType
from iikocloud_client.models.transport_delivery_restrictions_delivery_restriction_item import TransportDeliveryRestrictionsDeliveryRestrictionItem
from iikocloud_client.models.transport_delivery_restrictions_delivery_restrictions_mode import TransportDeliveryRestrictionsDeliveryRestrictionsMode
from iikocloud_client.models.transport_delivery_restrictions_delivery_zone import TransportDeliveryRestrictionsDeliveryZone
from typing import Optional, Set
from typing_extensions import Self

class TransportDeliveryRestrictionsDeliveryRestrictions(BaseModel):
    """
    Delivery restrictions.
    """ # noqa: E501
    organization_id: StrictStr = Field(description="Organization ID.                Can be obtained by `/api/1/organizations` operation.", alias="organizationId")
    delivery_geocode_service_type: TransportDeliveryRestrictionsDeliveryGeocodeServiceType = Field(description="Geocoding service type.", alias="deliveryGeocodeServiceType")
    delivery_regions_map_url: Optional[StrictStr] = Field(description="Link to the map of delivery service regions.", alias="deliveryRegionsMapUrl")
    default_delivery_duration_in_minutes: StrictInt = Field(description="General standard of delivery time.", alias="defaultDeliveryDurationInMinutes")
    default_self_service_duration_in_minutes: StrictInt = Field(description="Default pickup time.", alias="defaultSelfServiceDurationInMinutes")
    use_same_delivery_duration: StrictBool = Field(description="Indication that all delivery points in all delivery zones use common delivery time limits.", alias="useSameDeliveryDuration")
    use_same_min_sum: StrictBool = Field(description="Indication that all delivery points for all delivery zones use the total minimum order amount.", alias="useSameMinSum")
    default_min_sum: Optional[Union[StrictFloat, StrictInt]] = Field(description="Total minimum order amount.", alias="defaultMinSum")
    use_same_work_time_interval: StrictBool = Field(description="Indication that all delivery points in all zones use common time limits.", alias="useSameWorkTimeInterval")
    default_from: Optional[StrictInt] = Field(description="The beginning of the interval of the total work time for all points and delivery zones,   in minutes from the beginning of the day.", alias="defaultFrom")
    default_to: Optional[StrictInt] = Field(description="End of the total work time interval for all points and delivery zones,   in minutes from the beginning of the day.", alias="defaultTo")
    use_same_restrictions_on_all_week: StrictBool = Field(description="Indication that all delivery points in all zones use the same schedule for all days of the week.", alias="useSameRestrictionsOnAllWeek")
    restrictions: List[TransportDeliveryRestrictionsDeliveryRestrictionItem] = Field(description="Restrictions.")
    delivery_zones: List[TransportDeliveryRestrictionsDeliveryZone] = Field(description="Delivery zones.", alias="deliveryZones")
    reject_on_geocoding_error: StrictBool = Field(description="Reject delivery if we could not geocode the address.", alias="rejectOnGeocodingError")
    add_delivery_service_cost: StrictBool = Field(description="Add shipping cost to order.", alias="addDeliveryServiceCost")
    use_same_delivery_service_product: StrictBool = Field(description="Indication that the cost is the same for all points of delivery.", alias="useSameDeliveryServiceProduct")
    default_delivery_service_product_id: Optional[StrictStr] = Field(description="Link to \"delivery service payment\".", alias="defaultDeliveryServiceProductId")
    use_external_assignation_service: StrictBool = Field(description="Use external delivery distribution service.", alias="useExternalAssignationService")
    front_trusts_call_center_check: StrictBool = Field(description="Indication whether or not to trust on the fronts the call center mapping restrictions from the call center  if the composition of the order has not changed since the last check. If true, then trust.", alias="frontTrustsCallCenterCheck")
    external_assignation_service_url: Optional[StrictStr] = Field(description="Address of external delivery distribution service.", alias="externalAssignationServiceUrl")
    require_exact_address_for_geocoding: StrictBool = Field(description="Require an exact geocoding address.", alias="requireExactAddressForGeocoding")
    zones_mode: TransportDeliveryRestrictionsDeliveryRestrictionsMode = Field(description="Delivery restrictions mode.", alias="zonesMode")
    auto_assign_external_deliveries: StrictBool = Field(description="Automatically assigned delivery method based on cartography.", alias="autoAssignExternalDeliveries")
    action_on_validation_rejection: TransportDeliveryRestrictionsActionOnValidationRejection = Field(description="Action on problems with auto-assignment.", alias="actionOnValidationRejection")
    __properties: ClassVar[List[str]] = ["organizationId", "deliveryGeocodeServiceType", "deliveryRegionsMapUrl", "defaultDeliveryDurationInMinutes", "defaultSelfServiceDurationInMinutes", "useSameDeliveryDuration", "useSameMinSum", "defaultMinSum", "useSameWorkTimeInterval", "defaultFrom", "defaultTo", "useSameRestrictionsOnAllWeek", "restrictions", "deliveryZones", "rejectOnGeocodingError", "addDeliveryServiceCost", "useSameDeliveryServiceProduct", "defaultDeliveryServiceProductId", "useExternalAssignationService", "frontTrustsCallCenterCheck", "externalAssignationServiceUrl", "requireExactAddressForGeocoding", "zonesMode", "autoAssignExternalDeliveries", "actionOnValidationRejection"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TransportDeliveryRestrictionsDeliveryRestrictions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in restrictions (list)
        _items = []
        if self.restrictions:
            for _item_restrictions in self.restrictions:
                if _item_restrictions:
                    _items.append(_item_restrictions.to_dict())
            _dict['restrictions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in delivery_zones (list)
        _items = []
        if self.delivery_zones:
            for _item_delivery_zones in self.delivery_zones:
                if _item_delivery_zones:
                    _items.append(_item_delivery_zones.to_dict())
            _dict['deliveryZones'] = _items
        # set to None if delivery_regions_map_url (nullable) is None
        # and model_fields_set contains the field
        if self.delivery_regions_map_url is None and "delivery_regions_map_url" in self.model_fields_set:
            _dict['deliveryRegionsMapUrl'] = None

        # set to None if default_min_sum (nullable) is None
        # and model_fields_set contains the field
        if self.default_min_sum is None and "default_min_sum" in self.model_fields_set:
            _dict['defaultMinSum'] = None

        # set to None if default_from (nullable) is None
        # and model_fields_set contains the field
        if self.default_from is None and "default_from" in self.model_fields_set:
            _dict['defaultFrom'] = None

        # set to None if default_to (nullable) is None
        # and model_fields_set contains the field
        if self.default_to is None and "default_to" in self.model_fields_set:
            _dict['defaultTo'] = None

        # set to None if default_delivery_service_product_id (nullable) is None
        # and model_fields_set contains the field
        if self.default_delivery_service_product_id is None and "default_delivery_service_product_id" in self.model_fields_set:
            _dict['defaultDeliveryServiceProductId'] = None

        # set to None if external_assignation_service_url (nullable) is None
        # and model_fields_set contains the field
        if self.external_assignation_service_url is None and "external_assignation_service_url" in self.model_fields_set:
            _dict['externalAssignationServiceUrl'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TransportDeliveryRestrictionsDeliveryRestrictions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "organizationId": obj.get("organizationId"),
            "deliveryGeocodeServiceType": obj.get("deliveryGeocodeServiceType"),
            "deliveryRegionsMapUrl": obj.get("deliveryRegionsMapUrl"),
            "defaultDeliveryDurationInMinutes": obj.get("defaultDeliveryDurationInMinutes"),
            "defaultSelfServiceDurationInMinutes": obj.get("defaultSelfServiceDurationInMinutes"),
            "useSameDeliveryDuration": obj.get("useSameDeliveryDuration"),
            "useSameMinSum": obj.get("useSameMinSum"),
            "defaultMinSum": obj.get("defaultMinSum"),
            "useSameWorkTimeInterval": obj.get("useSameWorkTimeInterval"),
            "defaultFrom": obj.get("defaultFrom"),
            "defaultTo": obj.get("defaultTo"),
            "useSameRestrictionsOnAllWeek": obj.get("useSameRestrictionsOnAllWeek"),
            "restrictions": [TransportDeliveryRestrictionsDeliveryRestrictionItem.from_dict(_item) for _item in obj["restrictions"]] if obj.get("restrictions") is not None else None,
            "deliveryZones": [TransportDeliveryRestrictionsDeliveryZone.from_dict(_item) for _item in obj["deliveryZones"]] if obj.get("deliveryZones") is not None else None,
            "rejectOnGeocodingError": obj.get("rejectOnGeocodingError"),
            "addDeliveryServiceCost": obj.get("addDeliveryServiceCost"),
            "useSameDeliveryServiceProduct": obj.get("useSameDeliveryServiceProduct"),
            "defaultDeliveryServiceProductId": obj.get("defaultDeliveryServiceProductId"),
            "useExternalAssignationService": obj.get("useExternalAssignationService"),
            "frontTrustsCallCenterCheck": obj.get("frontTrustsCallCenterCheck"),
            "externalAssignationServiceUrl": obj.get("externalAssignationServiceUrl"),
            "requireExactAddressForGeocoding": obj.get("requireExactAddressForGeocoding"),
            "zonesMode": obj.get("zonesMode"),
            "autoAssignExternalDeliveries": obj.get("autoAssignExternalDeliveries"),
            "actionOnValidationRejection": obj.get("actionOnValidationRejection")
        })
        return _obj


