# coding: utf-8

"""
    iikoCloud API

    <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from iikocloud_client.models.transport_deliveries_response_order_region import TransportDeliveriesResponseOrderRegion
from iikocloud_client.models.transport_deliveries_response_order_street import TransportDeliveriesResponseOrderStreet
from typing import Optional, Set
from typing_extensions import Self

class TransportDeliveriesResponseOrderAddress(BaseModel):
    """
    Address details.
    """ # noqa: E501
    street: Optional[TransportDeliveriesResponseOrderStreet] = Field(default=None, description="Street.")
    index: Optional[StrictStr] = Field(default=None, description="Postcode.")
    house: Optional[StrictStr] = Field(default=None, description="House.")
    building: Optional[StrictStr] = Field(default=None, description="Building.")
    flat: Optional[StrictStr] = Field(default=None, description="Apartment.")
    entrance: Optional[StrictStr] = Field(default=None, description="Entrance.")
    floor: Optional[StrictStr] = Field(default=None, description="Floor.")
    doorphone: Optional[StrictStr] = Field(default=None, description="Intercom.")
    region: Optional[TransportDeliveriesResponseOrderRegion] = Field(description="Region")
    line1: Optional[StrictStr] = Field(default=None, description="Address line 1.  Contains the primary address information.")
    __properties: ClassVar[List[str]] = ["street", "index", "house", "building", "flat", "entrance", "floor", "doorphone", "region", "line1"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TransportDeliveriesResponseOrderAddress from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of street
        if self.street:
            _dict['street'] = self.street.to_dict()
        # override the default output from pydantic by calling `to_dict()` of region
        if self.region:
            _dict['region'] = self.region.to_dict()
        # set to None if street (nullable) is None
        # and model_fields_set contains the field
        if self.street is None and "street" in self.model_fields_set:
            _dict['street'] = None

        # set to None if index (nullable) is None
        # and model_fields_set contains the field
        if self.index is None and "index" in self.model_fields_set:
            _dict['index'] = None

        # set to None if house (nullable) is None
        # and model_fields_set contains the field
        if self.house is None and "house" in self.model_fields_set:
            _dict['house'] = None

        # set to None if building (nullable) is None
        # and model_fields_set contains the field
        if self.building is None and "building" in self.model_fields_set:
            _dict['building'] = None

        # set to None if flat (nullable) is None
        # and model_fields_set contains the field
        if self.flat is None and "flat" in self.model_fields_set:
            _dict['flat'] = None

        # set to None if entrance (nullable) is None
        # and model_fields_set contains the field
        if self.entrance is None and "entrance" in self.model_fields_set:
            _dict['entrance'] = None

        # set to None if floor (nullable) is None
        # and model_fields_set contains the field
        if self.floor is None and "floor" in self.model_fields_set:
            _dict['floor'] = None

        # set to None if doorphone (nullable) is None
        # and model_fields_set contains the field
        if self.doorphone is None and "doorphone" in self.model_fields_set:
            _dict['doorphone'] = None

        # set to None if region (nullable) is None
        # and model_fields_set contains the field
        if self.region is None and "region" in self.model_fields_set:
            _dict['region'] = None

        # set to None if line1 (nullable) is None
        # and model_fields_set contains the field
        if self.line1 is None and "line1" in self.model_fields_set:
            _dict['line1'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TransportDeliveriesResponseOrderAddress from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "street": TransportDeliveriesResponseOrderStreet.from_dict(obj["street"]) if obj.get("street") is not None else None,
            "index": obj.get("index"),
            "house": obj.get("house"),
            "building": obj.get("building"),
            "flat": obj.get("flat"),
            "entrance": obj.get("entrance"),
            "floor": obj.get("floor"),
            "doorphone": obj.get("doorphone"),
            "region": TransportDeliveriesResponseOrderRegion.from_dict(obj["region"]) if obj.get("region") is not None else None,
            "line1": obj.get("line1")
        })
        return _obj


