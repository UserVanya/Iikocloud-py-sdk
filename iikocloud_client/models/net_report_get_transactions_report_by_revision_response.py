# coding: utf-8

"""
    iikoCloud API

    <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from iikocloud_client.models.net_report_transport_transactions_report_item import NetReportTransportTransactionsReportItem
from typing import Optional, Set
from typing_extensions import Self

class NetReportGetTransactionsReportByRevisionResponse(BaseModel):
    """
    Get transactions report by revision response.
    """ # noqa: E501
    transactions: Optional[List[NetReportTransportTransactionsReportItem]] = Field(default=None, description="Transactions.")
    last_revision: Optional[StrictInt] = Field(default=None, description="Last known transaction revision.", alias="lastRevision")
    last_transaction_id: Optional[StrictStr] = Field(default=None, description="Last known transaction id.", alias="lastTransactionId")
    page_size: Optional[StrictInt] = Field(default=None, description="Page size.", alias="pageSize")
    __properties: ClassVar[List[str]] = ["transactions", "lastRevision", "lastTransactionId", "pageSize"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NetReportGetTransactionsReportByRevisionResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in transactions (list)
        _items = []
        if self.transactions:
            for _item_transactions in self.transactions:
                if _item_transactions:
                    _items.append(_item_transactions.to_dict())
            _dict['transactions'] = _items
        # set to None if last_transaction_id (nullable) is None
        # and model_fields_set contains the field
        if self.last_transaction_id is None and "last_transaction_id" in self.model_fields_set:
            _dict['lastTransactionId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NetReportGetTransactionsReportByRevisionResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "transactions": [NetReportTransportTransactionsReportItem.from_dict(_item) for _item in obj["transactions"]] if obj.get("transactions") is not None else None,
            "lastRevision": obj.get("lastRevision"),
            "lastTransactionId": obj.get("lastTransactionId"),
            "pageSize": obj.get("pageSize")
        })
        return _obj


