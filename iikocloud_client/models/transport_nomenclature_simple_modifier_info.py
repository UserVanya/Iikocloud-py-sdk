# coding: utf-8

"""
    iikoCloud API

    <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class TransportNomenclatureSimpleModifierInfo(BaseModel):
    """
    Modifier details.
    """ # noqa: E501
    id: StrictStr = Field(description="ID.")
    default_amount: Optional[StrictInt] = Field(default=None, description="Default quantity.", alias="defaultAmount")
    min_amount: StrictInt = Field(description="Minimum quantity.", alias="minAmount")
    max_amount: StrictInt = Field(description="Maximum quantity.", alias="maxAmount")
    required: Optional[StrictBool] = Field(default=None, description="Required availability.")
    hide_if_default_amount: Optional[StrictBool] = Field(default=None, description="Hide if default amount applied. This field is supported since 7.2.4 iikoRMS version.", alias="hideIfDefaultAmount")
    splittable: Optional[StrictBool] = Field(default=None, description="Modifier can be split. This field is supported since 7.2.4 iikoRMS version.")
    free_of_charge_amount: Optional[StrictInt] = Field(default=None, description="Free of charge amount. This field is supported since 7.2.4 iikoRMS version.", alias="freeOfChargeAmount")
    __properties: ClassVar[List[str]] = ["id", "defaultAmount", "minAmount", "maxAmount", "required", "hideIfDefaultAmount", "splittable", "freeOfChargeAmount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TransportNomenclatureSimpleModifierInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if default_amount (nullable) is None
        # and model_fields_set contains the field
        if self.default_amount is None and "default_amount" in self.model_fields_set:
            _dict['defaultAmount'] = None

        # set to None if required (nullable) is None
        # and model_fields_set contains the field
        if self.required is None and "required" in self.model_fields_set:
            _dict['required'] = None

        # set to None if hide_if_default_amount (nullable) is None
        # and model_fields_set contains the field
        if self.hide_if_default_amount is None and "hide_if_default_amount" in self.model_fields_set:
            _dict['hideIfDefaultAmount'] = None

        # set to None if splittable (nullable) is None
        # and model_fields_set contains the field
        if self.splittable is None and "splittable" in self.model_fields_set:
            _dict['splittable'] = None

        # set to None if free_of_charge_amount (nullable) is None
        # and model_fields_set contains the field
        if self.free_of_charge_amount is None and "free_of_charge_amount" in self.model_fields_set:
            _dict['freeOfChargeAmount'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TransportNomenclatureSimpleModifierInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "defaultAmount": obj.get("defaultAmount"),
            "minAmount": obj.get("minAmount"),
            "maxAmount": obj.get("maxAmount"),
            "required": obj.get("required"),
            "hideIfDefaultAmount": obj.get("hideIfDefaultAmount"),
            "splittable": obj.get("splittable"),
            "freeOfChargeAmount": obj.get("freeOfChargeAmount")
        })
        return _obj


