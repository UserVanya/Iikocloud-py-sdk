# coding: utf-8

"""
    iikoCloud API

    <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from iikocloud_client.models.transport_payment_types_payment_processing_type import TransportPaymentTypesPaymentProcessingType
from iikocloud_client.models.transport_payment_types_payment_type_kind import TransportPaymentTypesPaymentTypeKind
from iikocloud_client.models.transport_terminals_terminal_group import TransportTerminalsTerminalGroup
from typing import Optional, Set
from typing_extensions import Self

class TransportPaymentTypesPaymentType(BaseModel):
    """
    DTO for payment type in iikoRMS
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Payment type ID")
    code: Optional[StrictStr] = Field(default=None, description="Payment type code")
    name: Optional[StrictStr] = Field(default=None, description="Payment type name")
    comment: Optional[StrictStr] = Field(default=None, description="Payment type comment")
    combinable: Optional[StrictBool] = Field(default=None, description="Combinability attribute")
    external_revision: Optional[StrictInt] = Field(default=None, description="External system revision number.", alias="externalRevision")
    applicable_marketing_campaigns: List[StrictStr] = Field(description="Array of marketing campaigns associated with LoyaltyApp payment type applicable to this organization.", alias="applicableMarketingCampaigns")
    is_deleted: Optional[StrictBool] = Field(default=None, description="IsDeleted attribute of payment type.", alias="isDeleted")
    print_cheque: Optional[StrictBool] = Field(default=None, description="If true, payment type is fiscal and bill will be printed.", alias="printCheque")
    payment_processing_type: Optional[TransportPaymentTypesPaymentProcessingType] = Field(default=None, description="Describes operation processing type.", alias="paymentProcessingType")
    payment_type_kind: Optional[TransportPaymentTypesPaymentTypeKind] = Field(default=None, description="Payment type category.", alias="paymentTypeKind")
    terminal_groups: List[TransportTerminalsTerminalGroup] = Field(description="Terminal groups where this payment type is available.", alias="terminalGroups")
    __properties: ClassVar[List[str]] = ["id", "code", "name", "comment", "combinable", "externalRevision", "applicableMarketingCampaigns", "isDeleted", "printCheque", "paymentProcessingType", "paymentTypeKind", "terminalGroups"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TransportPaymentTypesPaymentType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in terminal_groups (list)
        _items = []
        if self.terminal_groups:
            for _item_terminal_groups in self.terminal_groups:
                if _item_terminal_groups:
                    _items.append(_item_terminal_groups.to_dict())
            _dict['terminalGroups'] = _items
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if code (nullable) is None
        # and model_fields_set contains the field
        if self.code is None and "code" in self.model_fields_set:
            _dict['code'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if comment (nullable) is None
        # and model_fields_set contains the field
        if self.comment is None and "comment" in self.model_fields_set:
            _dict['comment'] = None

        # set to None if external_revision (nullable) is None
        # and model_fields_set contains the field
        if self.external_revision is None and "external_revision" in self.model_fields_set:
            _dict['externalRevision'] = None

        # set to None if payment_processing_type (nullable) is None
        # and model_fields_set contains the field
        if self.payment_processing_type is None and "payment_processing_type" in self.model_fields_set:
            _dict['paymentProcessingType'] = None

        # set to None if payment_type_kind (nullable) is None
        # and model_fields_set contains the field
        if self.payment_type_kind is None and "payment_type_kind" in self.model_fields_set:
            _dict['paymentTypeKind'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TransportPaymentTypesPaymentType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "code": obj.get("code"),
            "name": obj.get("name"),
            "comment": obj.get("comment"),
            "combinable": obj.get("combinable"),
            "externalRevision": obj.get("externalRevision"),
            "applicableMarketingCampaigns": obj.get("applicableMarketingCampaigns"),
            "isDeleted": obj.get("isDeleted"),
            "printCheque": obj.get("printCheque"),
            "paymentProcessingType": obj.get("paymentProcessingType"),
            "paymentTypeKind": obj.get("paymentTypeKind"),
            "terminalGroups": [TransportTerminalsTerminalGroup.from_dict(_item) for _item in obj["terminalGroups"]] if obj.get("terminalGroups") is not None else None
        })
        return _obj


