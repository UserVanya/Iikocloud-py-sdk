# coding: utf-8

"""
    iikoCloud API

    <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from iikocloud_client.models.transport_integration_web_hooks_filters_delivery_order_web_hooks_filter import TransportIntegrationWebHooksFiltersDeliveryOrderWebHooksFilter
from iikocloud_client.models.transport_integration_web_hooks_filters_reserve_web_hook_filter import TransportIntegrationWebHooksFiltersReserveWebHookFilter
from iikocloud_client.models.transport_integration_web_hooks_filters_table_order_web_hook_filter import TransportIntegrationWebHooksFiltersTableOrderWebHookFilter
from iikocloud_client.models.transport_integration_web_hooks_filters_web_hook_short_filter import TransportIntegrationWebHooksFiltersWebHookShortFilter
from typing import Optional, Set
from typing_extensions import Self

class TransportIntegrationWebHooksFiltersWebHooksFilter(BaseModel):
    """
    Webhooks filter.
    """ # noqa: E501
    delivery_order_filter: Optional[TransportIntegrationWebHooksFiltersDeliveryOrderWebHooksFilter] = Field(default=None, description="Filter for delivery orders.", alias="deliveryOrderFilter")
    table_order_filter: Optional[TransportIntegrationWebHooksFiltersTableOrderWebHookFilter] = Field(default=None, description="Filter for table orders.", alias="tableOrderFilter")
    reserve_filter: Optional[TransportIntegrationWebHooksFiltersReserveWebHookFilter] = Field(default=None, description="Filter for banquets/reserves.", alias="reserveFilter")
    stop_list_update_filter: Optional[TransportIntegrationWebHooksFiltersWebHookShortFilter] = Field(default=None, description="Filter for stop-lists changes.", alias="stopListUpdateFilter")
    personal_shift_filter: Optional[TransportIntegrationWebHooksFiltersWebHookShortFilter] = Field(default=None, description="Filter for personal shift.", alias="personalShiftFilter")
    nomenclature_update_filter: Optional[TransportIntegrationWebHooksFiltersWebHookShortFilter] = Field(default=None, description="Filter for nomenclature changes.", alias="nomenclatureUpdateFilter")
    __properties: ClassVar[List[str]] = ["deliveryOrderFilter", "tableOrderFilter", "reserveFilter", "stopListUpdateFilter", "personalShiftFilter", "nomenclatureUpdateFilter"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TransportIntegrationWebHooksFiltersWebHooksFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of delivery_order_filter
        if self.delivery_order_filter:
            _dict['deliveryOrderFilter'] = self.delivery_order_filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of table_order_filter
        if self.table_order_filter:
            _dict['tableOrderFilter'] = self.table_order_filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reserve_filter
        if self.reserve_filter:
            _dict['reserveFilter'] = self.reserve_filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of stop_list_update_filter
        if self.stop_list_update_filter:
            _dict['stopListUpdateFilter'] = self.stop_list_update_filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of personal_shift_filter
        if self.personal_shift_filter:
            _dict['personalShiftFilter'] = self.personal_shift_filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of nomenclature_update_filter
        if self.nomenclature_update_filter:
            _dict['nomenclatureUpdateFilter'] = self.nomenclature_update_filter.to_dict()
        # set to None if delivery_order_filter (nullable) is None
        # and model_fields_set contains the field
        if self.delivery_order_filter is None and "delivery_order_filter" in self.model_fields_set:
            _dict['deliveryOrderFilter'] = None

        # set to None if table_order_filter (nullable) is None
        # and model_fields_set contains the field
        if self.table_order_filter is None and "table_order_filter" in self.model_fields_set:
            _dict['tableOrderFilter'] = None

        # set to None if reserve_filter (nullable) is None
        # and model_fields_set contains the field
        if self.reserve_filter is None and "reserve_filter" in self.model_fields_set:
            _dict['reserveFilter'] = None

        # set to None if stop_list_update_filter (nullable) is None
        # and model_fields_set contains the field
        if self.stop_list_update_filter is None and "stop_list_update_filter" in self.model_fields_set:
            _dict['stopListUpdateFilter'] = None

        # set to None if personal_shift_filter (nullable) is None
        # and model_fields_set contains the field
        if self.personal_shift_filter is None and "personal_shift_filter" in self.model_fields_set:
            _dict['personalShiftFilter'] = None

        # set to None if nomenclature_update_filter (nullable) is None
        # and model_fields_set contains the field
        if self.nomenclature_update_filter is None and "nomenclature_update_filter" in self.model_fields_set:
            _dict['nomenclatureUpdateFilter'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TransportIntegrationWebHooksFiltersWebHooksFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "deliveryOrderFilter": TransportIntegrationWebHooksFiltersDeliveryOrderWebHooksFilter.from_dict(obj["deliveryOrderFilter"]) if obj.get("deliveryOrderFilter") is not None else None,
            "tableOrderFilter": TransportIntegrationWebHooksFiltersTableOrderWebHookFilter.from_dict(obj["tableOrderFilter"]) if obj.get("tableOrderFilter") is not None else None,
            "reserveFilter": TransportIntegrationWebHooksFiltersReserveWebHookFilter.from_dict(obj["reserveFilter"]) if obj.get("reserveFilter") is not None else None,
            "stopListUpdateFilter": TransportIntegrationWebHooksFiltersWebHookShortFilter.from_dict(obj["stopListUpdateFilter"]) if obj.get("stopListUpdateFilter") is not None else None,
            "personalShiftFilter": TransportIntegrationWebHooksFiltersWebHookShortFilter.from_dict(obj["personalShiftFilter"]) if obj.get("personalShiftFilter") is not None else None,
            "nomenclatureUpdateFilter": TransportIntegrationWebHooksFiltersWebHookShortFilter.from_dict(obj["nomenclatureUpdateFilter"]) if obj.get("nomenclatureUpdateFilter") is not None else None
        })
        return _obj


