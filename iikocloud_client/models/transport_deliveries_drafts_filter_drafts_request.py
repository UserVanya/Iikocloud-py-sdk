# coding: utf-8

"""
    iikoCloud API

    <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from iikocloud_client.models.transport_common_sort_direction import TransportCommonSortDirection
from iikocloud_client.models.transport_deliveries_drafts_order_draft_sort_property import TransportDeliveriesDraftsOrderDraftSortProperty
from typing import Optional, Set
from typing_extensions import Self

class TransportDeliveriesDraftsFilterDraftsRequest(BaseModel):
    """
    Request for the list of order drafts by several filters.
    """ # noqa: E501
    organization_ids: List[StrictStr] = Field(description="Organization ID for which the order drafts search will be performed.                Can be obtained by `/organizations` operation.", alias="organizationIds")
    date_from: Optional[StrictStr] = Field(default=None, description="Draft creation time (UTC). Lower limit.", alias="dateFrom")
    date_to: Optional[StrictStr] = Field(default=None, description="Draft creation time (UTC). Upper limit.", alias="dateTo")
    phone: Optional[StrictStr] = Field(default=None, description="Phone number.")
    limit: Optional[StrictInt] = Field(default=None, description="Desirable size of result set (50 by default).")
    offset: Optional[StrictInt] = Field(default=None, description="Offset from the beginning of full result set for paging.")
    source_keys: Optional[List[StrictStr]] = Field(default=None, description="Delivery sources (DeliveryClub, PH and etc.)", alias="sourceKeys")
    terminal_group_ids: Optional[List[StrictStr]] = Field(default=None, description="List of terminal groups IDs.", alias="terminalGroupIds")
    search_text: Optional[StrictStr] = Field(default=None, description="Value for search. Used for prefix search.", alias="searchText")
    sort_property: Optional[TransportDeliveriesDraftsOrderDraftSortProperty] = Field(default=None, description="Sorting property.", alias="sortProperty")
    sort_direction: Optional[TransportCommonSortDirection] = Field(default=None, description="Sorting direction.", alias="sortDirection")
    operator_ids: Optional[List[StrictStr]] = Field(default=None, description="List of drafts operator IDs.", alias="operatorIds")
    order_type_ids: Optional[List[StrictStr]] = Field(default=None, description="List of drafts order type IDs.", alias="orderTypeIds")
    __properties: ClassVar[List[str]] = ["organizationIds", "dateFrom", "dateTo", "phone", "limit", "offset", "sourceKeys", "terminalGroupIds", "searchText", "sortProperty", "sortDirection", "operatorIds", "orderTypeIds"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TransportDeliveriesDraftsFilterDraftsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if date_from (nullable) is None
        # and model_fields_set contains the field
        if self.date_from is None and "date_from" in self.model_fields_set:
            _dict['dateFrom'] = None

        # set to None if date_to (nullable) is None
        # and model_fields_set contains the field
        if self.date_to is None and "date_to" in self.model_fields_set:
            _dict['dateTo'] = None

        # set to None if phone (nullable) is None
        # and model_fields_set contains the field
        if self.phone is None and "phone" in self.model_fields_set:
            _dict['phone'] = None

        # set to None if limit (nullable) is None
        # and model_fields_set contains the field
        if self.limit is None and "limit" in self.model_fields_set:
            _dict['limit'] = None

        # set to None if offset (nullable) is None
        # and model_fields_set contains the field
        if self.offset is None and "offset" in self.model_fields_set:
            _dict['offset'] = None

        # set to None if source_keys (nullable) is None
        # and model_fields_set contains the field
        if self.source_keys is None and "source_keys" in self.model_fields_set:
            _dict['sourceKeys'] = None

        # set to None if terminal_group_ids (nullable) is None
        # and model_fields_set contains the field
        if self.terminal_group_ids is None and "terminal_group_ids" in self.model_fields_set:
            _dict['terminalGroupIds'] = None

        # set to None if search_text (nullable) is None
        # and model_fields_set contains the field
        if self.search_text is None and "search_text" in self.model_fields_set:
            _dict['searchText'] = None

        # set to None if sort_property (nullable) is None
        # and model_fields_set contains the field
        if self.sort_property is None and "sort_property" in self.model_fields_set:
            _dict['sortProperty'] = None

        # set to None if sort_direction (nullable) is None
        # and model_fields_set contains the field
        if self.sort_direction is None and "sort_direction" in self.model_fields_set:
            _dict['sortDirection'] = None

        # set to None if operator_ids (nullable) is None
        # and model_fields_set contains the field
        if self.operator_ids is None and "operator_ids" in self.model_fields_set:
            _dict['operatorIds'] = None

        # set to None if order_type_ids (nullable) is None
        # and model_fields_set contains the field
        if self.order_type_ids is None and "order_type_ids" in self.model_fields_set:
            _dict['orderTypeIds'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TransportDeliveriesDraftsFilterDraftsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "organizationIds": obj.get("organizationIds"),
            "dateFrom": obj.get("dateFrom"),
            "dateTo": obj.get("dateTo"),
            "phone": obj.get("phone"),
            "limit": obj.get("limit"),
            "offset": obj.get("offset"),
            "sourceKeys": obj.get("sourceKeys"),
            "terminalGroupIds": obj.get("terminalGroupIds"),
            "searchText": obj.get("searchText"),
            "sortProperty": obj.get("sortProperty"),
            "sortDirection": obj.get("sortDirection"),
            "operatorIds": obj.get("operatorIds"),
            "orderTypeIds": obj.get("orderTypeIds")
        })
        return _obj


