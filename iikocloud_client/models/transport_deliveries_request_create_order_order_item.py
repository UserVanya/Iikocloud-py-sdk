# coding: utf-8

"""
    iikoCloud API

    <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from importlib import import_module
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from iikocloud_client.models.transport_deliveries_request_create_order_combo_item_information import TransportDeliveriesRequestCreateOrderComboItemInformation
from typing import Optional, Set
from typing_extensions import Self

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from iikocloud_client.models.transport_deliveries_request_create_order_compound_order_item import TransportDeliveriesRequestCreateOrderCompoundOrderItem
    from iikocloud_client.models.transport_deliveries_request_create_order_product_order_item import TransportDeliveriesRequestCreateOrderProductOrderItem

class TransportDeliveriesRequestCreateOrderOrderItem(BaseModel):
    """
    Order item.
    """ # noqa: E501
    type: StrictStr
    amount: Union[Annotated[float, Field(le=999.999, strict=True, ge=0)], Annotated[int, Field(le=999, strict=True, ge=0)]] = Field(description="Quantity.")
    product_size_id: Optional[StrictStr] = Field(default=None, description="Size ID. Required if a stock list item has a size scale.", alias="productSizeId")
    combo_information: Optional[TransportDeliveriesRequestCreateOrderComboItemInformation] = Field(default=None, description="Combo details if combo includes order item.", alias="comboInformation")
    comment: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=255)]] = Field(default=None, description="Comment.")
    __properties: ClassVar[List[str]] = ["type", "amount", "productSizeId", "comboInformation", "comment"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'type'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'Compound': 'TransportDeliveriesRequestCreateOrderCompoundOrderItem','Product': 'TransportDeliveriesRequestCreateOrderProductOrderItem'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Union[TransportDeliveriesRequestCreateOrderCompoundOrderItem, TransportDeliveriesRequestCreateOrderProductOrderItem]]:
        """Create an instance of TransportDeliveriesRequestCreateOrderOrderItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of combo_information
        if self.combo_information:
            _dict['comboInformation'] = self.combo_information.to_dict()
        # set to None if product_size_id (nullable) is None
        # and model_fields_set contains the field
        if self.product_size_id is None and "product_size_id" in self.model_fields_set:
            _dict['productSizeId'] = None

        # set to None if combo_information (nullable) is None
        # and model_fields_set contains the field
        if self.combo_information is None and "combo_information" in self.model_fields_set:
            _dict['comboInformation'] = None

        # set to None if comment (nullable) is None
        # and model_fields_set contains the field
        if self.comment is None and "comment" in self.model_fields_set:
            _dict['comment'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Union[TransportDeliveriesRequestCreateOrderCompoundOrderItem, TransportDeliveriesRequestCreateOrderProductOrderItem]]:
        """Create an instance of TransportDeliveriesRequestCreateOrderOrderItem from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type ==  'TransportDeliveriesRequestCreateOrderCompoundOrderItem':
            return import_module("iikocloud_client.models.transport_deliveries_request_create_order_compound_order_item").TransportDeliveriesRequestCreateOrderCompoundOrderItem.from_dict(obj)
        if object_type ==  'TransportDeliveriesRequestCreateOrderProductOrderItem':
            return import_module("iikocloud_client.models.transport_deliveries_request_create_order_product_order_item").TransportDeliveriesRequestCreateOrderProductOrderItem.from_dict(obj)

        raise ValueError("TransportDeliveriesRequestCreateOrderOrderItem failed to lookup discriminator value from " +
                            json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                            ", mapping: " + json.dumps(cls.__discriminator_value_class_map))


