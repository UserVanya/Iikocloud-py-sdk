# coding: utf-8

"""
    iikoCloud API

    <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from iikocloud_client.models.transport_deliveries_response_order_creation_status import TransportDeliveriesResponseOrderCreationStatus
from iikocloud_client.models.transport_errors_error_info import TransportErrorsErrorInfo
from iikocloud_client.models.transport_reserves_reserve import TransportReservesReserve
from typing import Optional, Set
from typing_extensions import Self

class TransportReservesReserveInfo(BaseModel):
    """
    Banquet/reserve.
    """ # noqa: E501
    id: StrictStr = Field(description="Banquet/reserve ID.")
    external_number: Optional[StrictStr] = Field(default=None, description="Banquet/reserve external number.", alias="externalNumber")
    organization_id: StrictStr = Field(description="Organization ID.                Can be obtained by `/organizations` operation.", alias="organizationId")
    timestamp: StrictInt = Field(description="Timestamp of most recent banquet/reserve change that took place on iikoTransport server.")
    creation_status: TransportDeliveriesResponseOrderCreationStatus = Field(description="Banquet/reserve creation status. In case of asynchronous creation, it allows to track the instance an banquet/reserve was validated/created in iikoFront.", alias="creationStatus")
    error_info: Optional[TransportErrorsErrorInfo] = Field(default=None, description="Banquet/reserve creation error details.  > Required only if \"creationStatus\"=\"Error\".", alias="errorInfo")
    is_deleted: StrictBool = Field(description="Banquet/reserve is deleted.", alias="isDeleted")
    reserve: Optional[TransportReservesReserve] = Field(default=None, description="Banquet/reserve.")
    __properties: ClassVar[List[str]] = ["id", "externalNumber", "organizationId", "timestamp", "creationStatus", "errorInfo", "isDeleted", "reserve"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TransportReservesReserveInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of error_info
        if self.error_info:
            _dict['errorInfo'] = self.error_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reserve
        if self.reserve:
            _dict['reserve'] = self.reserve.to_dict()
        # set to None if external_number (nullable) is None
        # and model_fields_set contains the field
        if self.external_number is None and "external_number" in self.model_fields_set:
            _dict['externalNumber'] = None

        # set to None if error_info (nullable) is None
        # and model_fields_set contains the field
        if self.error_info is None and "error_info" in self.model_fields_set:
            _dict['errorInfo'] = None

        # set to None if reserve (nullable) is None
        # and model_fields_set contains the field
        if self.reserve is None and "reserve" in self.model_fields_set:
            _dict['reserve'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TransportReservesReserveInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "externalNumber": obj.get("externalNumber"),
            "organizationId": obj.get("organizationId"),
            "timestamp": obj.get("timestamp"),
            "creationStatus": obj.get("creationStatus"),
            "errorInfo": TransportErrorsErrorInfo.from_dict(obj["errorInfo"]) if obj.get("errorInfo") is not None else None,
            "isDeleted": obj.get("isDeleted"),
            "reserve": TransportReservesReserve.from_dict(obj["reserve"]) if obj.get("reserve") is not None else None
        })
        return _obj


