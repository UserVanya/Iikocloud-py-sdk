# coding: utf-8

"""
    iikoCloud API

    <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from iikocloud_client.models.transport_address_hints_address_hints_service_type import TransportAddressHintsAddressHintsServiceType
from iikocloud_client.models.transport_common_external_data import TransportCommonExternalData
from iikocloud_client.models.transport_organizations_address_format_type import TransportOrganizationsAddressFormatType
from iikocloud_client.models.transport_organizations_delivery_order_payment_settings import TransportOrganizationsDeliveryOrderPaymentSettings
from iikocloud_client.models.transport_organizations_delivery_settings_service_type import TransportOrganizationsDeliverySettingsServiceType
from iikocloud_client.models.transport_organizations_organization_info import TransportOrganizationsOrganizationInfo
from typing import Optional, Set
from typing_extensions import Self

class TransportOrganizationsExtendedOrganizationInfo(TransportOrganizationsOrganizationInfo):
    """
    Organization details.
    """ # noqa: E501
    country: Optional[StrictStr] = Field(description="Country.")
    restaurant_address: Optional[StrictStr] = Field(description="Restaurant address.", alias="restaurantAddress")
    latitude: Union[StrictFloat, StrictInt] = Field(description="Latitude.")
    longitude: Union[StrictFloat, StrictInt] = Field(description="Longitude.")
    use_uae_addressing_system: StrictBool = Field(description="Regional setting \"Use the UAE Addressing System\".", alias="useUaeAddressingSystem")
    version: StrictStr = Field(description="RMS version.")
    currency_iso_name: Optional[StrictStr] = Field(description="ISO currency code (for example: RUB, USD, EUR).", alias="currencyIsoName")
    currency_minimum_denomination: Optional[Union[StrictFloat, StrictInt]] = Field(description="Value rounding of position.", alias="currencyMinimumDenomination")
    country_phone_code: Optional[StrictStr] = Field(description="Country dialing code.", alias="countryPhoneCode")
    marketing_source_required_in_delivery: Optional[StrictBool] = Field(description="Require mandatory marketing source input when creating a delivery.", alias="marketingSourceRequiredInDelivery")
    default_delivery_city_id: Optional[StrictStr] = Field(description="Default delivery city.", alias="defaultDeliveryCityId")
    delivery_city_ids: Optional[List[StrictStr]] = Field(description="Delivery cities.", alias="deliveryCityIds")
    delivery_service_type: Optional[TransportOrganizationsDeliverySettingsServiceType] = Field(description="Delivery type.", alias="deliveryServiceType")
    delivery_order_payment_settings: Optional[TransportOrganizationsDeliveryOrderPaymentSettings] = Field(default=None, description="Delivery order payment settings.", alias="deliveryOrderPaymentSettings")
    default_call_center_payment_type_id: Optional[StrictStr] = Field(description="Default payment type for CallCenter.", alias="defaultCallCenterPaymentTypeId")
    order_item_comment_enabled: Optional[StrictBool] = Field(description="Allow text comments for order items (in all restaurant sections).", alias="orderItemCommentEnabled")
    inn: Optional[StrictStr] = Field(description="Restaurant`s INN (Taxpayer Identification Number).")
    address_format_type: TransportOrganizationsAddressFormatType = Field(description="Address format type.", alias="addressFormatType")
    is_confirmation_enabled: Optional[StrictBool] = Field(description="Determines whether to use delivery confirmation.", alias="isConfirmationEnabled")
    confirm_allowed_interval_in_minutes: Optional[StrictInt] = Field(description="Confirm orders time interval.", alias="confirmAllowedIntervalInMinutes")
    is_cloud: StrictBool = Field(description="Determines whether organization is hosted in iikoCloud.", alias="isCloud")
    is_anonymous_guests_allowed: Optional[StrictBool] = Field(default=None, description="If the store allows orders for anonymous guests, then it is not necessary to transfer  information about the guest as part of the delivery order. You can only transfer  the phone number and optionally name of the guest, which will not be stored in the guest base  and will only be used for the delivery of a current delivery order.", alias="isAnonymousGuestsAllowed")
    address_lookup: List[TransportAddressHintsAddressHintsServiceType] = Field(description="Available address lookup services.", alias="addressLookup")
    __properties: ClassVar[List[str]] = ["responseType", "id", "name", "code", "externalData"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TransportOrganizationsExtendedOrganizationInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in external_data (list)
        _items = []
        if self.external_data:
            for _item_external_data in self.external_data:
                if _item_external_data:
                    _items.append(_item_external_data.to_dict())
            _dict['externalData'] = _items
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if code (nullable) is None
        # and model_fields_set contains the field
        if self.code is None and "code" in self.model_fields_set:
            _dict['code'] = None

        # set to None if external_data (nullable) is None
        # and model_fields_set contains the field
        if self.external_data is None and "external_data" in self.model_fields_set:
            _dict['externalData'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TransportOrganizationsExtendedOrganizationInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "responseType": obj.get("responseType"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "code": obj.get("code"),
            "externalData": [TransportCommonExternalData.from_dict(_item) for _item in obj["externalData"]] if obj.get("externalData") is not None else None
        })
        return _obj


