# coding: utf-8

"""
    iikoCloud API

    <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from iikocloud_client.models.transport_discounts_discount_card_mode import TransportDiscountsDiscountCardMode
from iikocloud_client.models.transport_discounts_product_category_discount import TransportDiscountsProductCategoryDiscount
from typing import Optional, Set
from typing_extensions import Self

class TransportDiscountsDiscountCardTypeInfo(BaseModel):
    """
    Discount/surcharge DTO.
    """ # noqa: E501
    id: StrictStr = Field(description="Discount ID in RMS.")
    name: Optional[StrictStr] = Field(description="Discount name.")
    percent: Union[StrictFloat, StrictInt] = Field(description="Total discount rate.  > Ignored if \"isCategorisedDiscount\" specified.")
    is_categorised_discount: StrictBool = Field(description="Whether it is category discount or not.  > If true, \"productCategoryDiscounts\" discounts will apply.", alias="isCategorisedDiscount")
    product_category_discounts: List[TransportDiscountsProductCategoryDiscount] = Field(description="Category discount.", alias="productCategoryDiscounts")
    comment: Optional[StrictStr] = Field(default=None, description="Comment.")
    can_be_applied_selectively: StrictBool = Field(description="Whether discount allows for selected application to individual items at user's discretion.", alias="canBeAppliedSelectively")
    min_order_sum: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Minimum order amount required for discount application.  If order amount is less than specified threshold, discount does not apply.", alias="minOrderSum")
    mode: TransportDiscountsDiscountCardMode = Field(description="Discount type.     Can be obtained by `/api/1/discounts` operation.")
    sum: Union[StrictFloat, StrictInt] = Field(description="Fixed amount.  > Triggers if fixed amount has been specified.")
    can_apply_by_card_number: StrictBool = Field(description="Can be applied by card No.  > If true, it's enough to enter discount card No. (card swiping not required)", alias="canApplyByCardNumber")
    is_manual: StrictBool = Field(description="Created manually.", alias="isManual")
    is_card: StrictBool = Field(description="Executed by card.", alias="isCard")
    is_automatic: StrictBool = Field(description="Created automatically.", alias="isAutomatic")
    is_deleted: Optional[StrictBool] = Field(default=None, description="IsDeleted.", alias="isDeleted")
    __properties: ClassVar[List[str]] = ["id", "name", "percent", "isCategorisedDiscount", "productCategoryDiscounts", "comment", "canBeAppliedSelectively", "minOrderSum", "mode", "sum", "canApplyByCardNumber", "isManual", "isCard", "isAutomatic", "isDeleted"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TransportDiscountsDiscountCardTypeInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in product_category_discounts (list)
        _items = []
        if self.product_category_discounts:
            for _item_product_category_discounts in self.product_category_discounts:
                if _item_product_category_discounts:
                    _items.append(_item_product_category_discounts.to_dict())
            _dict['productCategoryDiscounts'] = _items
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if comment (nullable) is None
        # and model_fields_set contains the field
        if self.comment is None and "comment" in self.model_fields_set:
            _dict['comment'] = None

        # set to None if min_order_sum (nullable) is None
        # and model_fields_set contains the field
        if self.min_order_sum is None and "min_order_sum" in self.model_fields_set:
            _dict['minOrderSum'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TransportDiscountsDiscountCardTypeInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "percent": obj.get("percent"),
            "isCategorisedDiscount": obj.get("isCategorisedDiscount"),
            "productCategoryDiscounts": [TransportDiscountsProductCategoryDiscount.from_dict(_item) for _item in obj["productCategoryDiscounts"]] if obj.get("productCategoryDiscounts") is not None else None,
            "comment": obj.get("comment"),
            "canBeAppliedSelectively": obj.get("canBeAppliedSelectively"),
            "minOrderSum": obj.get("minOrderSum"),
            "mode": obj.get("mode"),
            "sum": obj.get("sum"),
            "canApplyByCardNumber": obj.get("canApplyByCardNumber"),
            "isManual": obj.get("isManual"),
            "isCard": obj.get("isCard"),
            "isAutomatic": obj.get("isAutomatic"),
            "isDeleted": obj.get("isDeleted")
        })
        return _obj


