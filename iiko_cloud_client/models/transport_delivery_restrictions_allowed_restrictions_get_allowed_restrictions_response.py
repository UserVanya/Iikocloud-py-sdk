# coding: utf-8

"""
    iikoCloud API

    <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from iiko_cloud_client.models.transport_delivery_restrictions_allowed_restrictions_allowed_item_with_duration import TransportDeliveryRestrictionsAllowedRestrictionsAllowedItemWithDuration
from iiko_cloud_client.models.transport_delivery_restrictions_allowed_restrictions_order_location import TransportDeliveryRestrictionsAllowedRestrictionsOrderLocation
from iiko_cloud_client.models.transport_delivery_restrictions_allowed_restrictions_reject_item import TransportDeliveryRestrictionsAllowedRestrictionsRejectItem
from typing import Optional, Set
from typing_extensions import Self

class TransportDeliveryRestrictionsAllowedRestrictionsGetAllowedRestrictionsResponse(BaseModel):
    """
    Response for a request to identify suitable terminal groups.
    """ # noqa: E501
    correlation_id: StrictStr = Field(description="Operation ID.", alias="correlationId")
    is_allowed: StrictBool = Field(description="A sign of successful verification.", alias="isAllowed")
    reject_cause: Optional[StrictStr] = Field(description="Reject cause.", alias="rejectCause")
    address_external_id: Optional[StrictStr] = Field(description="Delivery address ID in external mapping system.", alias="addressExternalId")
    location: Optional[TransportDeliveryRestrictionsAllowedRestrictionsOrderLocation] = Field(description="Coordinates returned by geocoding service.")
    allowed_items: List[TransportDeliveryRestrictionsAllowedRestrictionsAllowedItemWithDuration] = Field(description="Suitable terminal groups with a delivery duration for them.", alias="allowedItems")
    rejected_items: List[TransportDeliveryRestrictionsAllowedRestrictionsRejectItem] = Field(description="Rejected items with cause.", alias="rejectedItems")
    __properties: ClassVar[List[str]] = ["correlationId", "isAllowed", "rejectCause", "addressExternalId", "location", "allowedItems", "rejectedItems"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TransportDeliveryRestrictionsAllowedRestrictionsGetAllowedRestrictionsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in allowed_items (list)
        _items = []
        if self.allowed_items:
            for _item_allowed_items in self.allowed_items:
                if _item_allowed_items:
                    _items.append(_item_allowed_items.to_dict())
            _dict['allowedItems'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in rejected_items (list)
        _items = []
        if self.rejected_items:
            for _item_rejected_items in self.rejected_items:
                if _item_rejected_items:
                    _items.append(_item_rejected_items.to_dict())
            _dict['rejectedItems'] = _items
        # set to None if reject_cause (nullable) is None
        # and model_fields_set contains the field
        if self.reject_cause is None and "reject_cause" in self.model_fields_set:
            _dict['rejectCause'] = None

        # set to None if address_external_id (nullable) is None
        # and model_fields_set contains the field
        if self.address_external_id is None and "address_external_id" in self.model_fields_set:
            _dict['addressExternalId'] = None

        # set to None if location (nullable) is None
        # and model_fields_set contains the field
        if self.location is None and "location" in self.model_fields_set:
            _dict['location'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TransportDeliveryRestrictionsAllowedRestrictionsGetAllowedRestrictionsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "correlationId": obj.get("correlationId"),
            "isAllowed": obj.get("isAllowed"),
            "rejectCause": obj.get("rejectCause"),
            "addressExternalId": obj.get("addressExternalId"),
            "location": TransportDeliveryRestrictionsAllowedRestrictionsOrderLocation.from_dict(obj["location"]) if obj.get("location") is not None else None,
            "allowedItems": [TransportDeliveryRestrictionsAllowedRestrictionsAllowedItemWithDuration.from_dict(_item) for _item in obj["allowedItems"]] if obj.get("allowedItems") is not None else None,
            "rejectedItems": [TransportDeliveryRestrictionsAllowedRestrictionsRejectItem.from_dict(_item) for _item in obj["rejectedItems"]] if obj.get("rejectedItems") is not None else None
        })
        return _obj


