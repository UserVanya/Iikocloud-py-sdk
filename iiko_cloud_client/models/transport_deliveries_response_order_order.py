# coding: utf-8

"""
    iikoCloud API

    <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from iiko_cloud_client.models.transport_deliveries_common_delivery_status import TransportDeliveriesCommonDeliveryStatus
from iiko_cloud_client.models.transport_deliveries_response_order_cancel_info import TransportDeliveriesResponseOrderCancelInfo
from iiko_cloud_client.models.transport_deliveries_response_order_conception import TransportDeliveriesResponseOrderConception
from iiko_cloud_client.models.transport_deliveries_response_order_courier_info import TransportDeliveriesResponseOrderCourierInfo
from iiko_cloud_client.models.transport_deliveries_response_order_customer import TransportDeliveriesResponseOrderCustomer
from iiko_cloud_client.models.transport_deliveries_response_order_delivery_point import TransportDeliveriesResponseOrderDeliveryPoint
from iiko_cloud_client.models.transport_deliveries_response_order_discount_item import TransportDeliveriesResponseOrderDiscountItem
from iiko_cloud_client.models.transport_deliveries_response_order_employee import TransportDeliveriesResponseOrderEmployee
from iiko_cloud_client.models.transport_deliveries_response_order_external_courier_service import TransportDeliveriesResponseOrderExternalCourierService
from iiko_cloud_client.models.transport_deliveries_response_order_external_data import TransportDeliveriesResponseOrderExternalData
from iiko_cloud_client.models.transport_deliveries_response_order_guests_info import TransportDeliveriesResponseOrderGuestsInfo
from iiko_cloud_client.models.transport_deliveries_response_order_loyalty_info import TransportDeliveriesResponseOrderLoyaltyInfo
from iiko_cloud_client.models.transport_deliveries_response_order_marketing_source import TransportDeliveriesResponseOrderMarketingSource
from iiko_cloud_client.models.transport_deliveries_response_order_order_combo import TransportDeliveriesResponseOrderOrderCombo
from iiko_cloud_client.models.transport_deliveries_response_order_order_item import TransportDeliveriesResponseOrderOrderItem
from iiko_cloud_client.models.transport_deliveries_response_order_order_type import TransportDeliveriesResponseOrderOrderType
from iiko_cloud_client.models.transport_deliveries_response_order_payment_item import TransportDeliveriesResponseOrderPaymentItem
from iiko_cloud_client.models.transport_deliveries_response_order_problem import TransportDeliveriesResponseOrderProblem
from iiko_cloud_client.models.transport_deliveries_response_order_tips_payment_item import TransportDeliveriesResponseOrderTipsPaymentItem
from typing import Optional, Set
from typing_extensions import Self

class TransportDeliveriesResponseOrderOrder(BaseModel):
    """
    Order details.
    """ # noqa: E501
    parent_delivery_id: Optional[StrictStr] = Field(default=None, description="ID of delivery serving as source for splitting by FCRs.", alias="parentDeliveryId")
    customer: Optional[TransportDeliveriesResponseOrderCustomer] = Field(default=None, description="Delivery customer.")
    phone: StrictStr = Field(description="Delivery phone number.")
    delivery_point: Optional[TransportDeliveriesResponseOrderDeliveryPoint] = Field(default=None, description="Delivery point details.  <remarks>  Not required if order type is customer pickup. Otherwise, required.  </remarks>", alias="deliveryPoint")
    status: TransportDeliveriesCommonDeliveryStatus = Field(description="Delivery status.                > Delivery status `ReadyForCooking` is deprecated from version `9.0.6`.")
    cancel_info: Optional[TransportDeliveriesResponseOrderCancelInfo] = Field(default=None, description="Delivery cancellation details.  <remarks>  Required only if delivery is canceled, i.e. status=Canceled.  </remarks>", alias="cancelInfo")
    courier_info: Optional[TransportDeliveriesResponseOrderCourierInfo] = Field(default=None, description="Driver information.", alias="courierInfo")
    complete_before: StrictStr = Field(description="Order fulfillment time (Local for the terminal).", alias="completeBefore")
    when_created: StrictStr = Field(description="Delivery creation time in iikoFront (Local for the terminal).", alias="whenCreated")
    when_confirmed: Optional[StrictStr] = Field(default=None, description="Delivery confirmation time (Local for the terminal).", alias="whenConfirmed")
    when_printed: Optional[StrictStr] = Field(default=None, description="Service printing time (Local for the terminal).", alias="whenPrinted")
    when_cooking_completed: Optional[StrictStr] = Field(default=None, description="Cooking completion time (Local for the terminal).", alias="whenCookingCompleted")
    when_sended: Optional[StrictStr] = Field(default=None, description="Delivery dispatch time (Local for the terminal).", alias="whenSended")
    when_delivered: Optional[StrictStr] = Field(default=None, description="Actual delivery time (Local for delivery terminal).", alias="whenDelivered")
    comment: Optional[StrictStr] = Field(default=None, description="Order comment.")
    problem: Optional[TransportDeliveriesResponseOrderProblem] = Field(default=None, description="Problem flag.")
    operator: Optional[TransportDeliveriesResponseOrderEmployee] = Field(default=None, description="Operator that took order.")
    marketing_source: Optional[TransportDeliveriesResponseOrderMarketingSource] = Field(default=None, description="Marketing source.", alias="marketingSource")
    delivery_duration: Optional[StrictInt] = Field(default=None, description="Duration of delivery (in minutes).", alias="deliveryDuration")
    index_in_courier_route: Optional[StrictInt] = Field(default=None, description="Ordinal number in route list.  <remarks>  Field is filled up at the time of delivery allocation by logistics in iikoFront.  If logistics is not in use, the field is not filled up.  </remarks>", alias="indexInCourierRoute")
    cooking_start_time: StrictStr = Field(description="The time when you need to start cooking an order (Local for the terminal).", alias="cookingStartTime")
    is_deleted: Optional[StrictBool] = Field(default=None, description="Order is deleted.", alias="isDeleted")
    when_received_by_api: Optional[StrictStr] = Field(default=None, description="Moment of time when CloudAPI received the request to create the order (UTC).", alias="whenReceivedByApi")
    when_received_from_front: Optional[StrictStr] = Field(default=None, description="Moment of time when the order first received and saved from iikoFront (UTC).", alias="whenReceivedFromFront")
    moved_from_delivery_id: Optional[StrictStr] = Field(default=None, description="Tells that this delivery has been moved from terminal group  with id *MovedFromTerminalGroupId* by cancelling delivery with deliveryId *MovedFromDeliveryId*.   > Allowed from version `7.5.4`.", alias="movedFromDeliveryId")
    moved_from_terminal_group_id: Optional[StrictStr] = Field(default=None, description="Tells that this delivery has been moved from terminal group  with id *MovedFromTerminalGroupId* by cancelling delivery with deliveryId *MovedFromDeliveryId*.   > Allowed from version `7.5.4`.", alias="movedFromTerminalGroupId")
    moved_from_organization_id: Optional[StrictStr] = Field(default=None, description="Tells that this delivery has been moved from terminal group  with id *MovedFromTerminalGroupId* by cancelling delivery with deliveryId *MovedFromDeliveryId*.   > Allowed from version `7.5.4`.", alias="movedFromOrganizationId")
    external_courier_service: Optional[TransportDeliveriesResponseOrderExternalCourierService] = Field(default=None, description="ECS info.   > Allowed from version `7.7.7`.", alias="externalCourierService")
    moved_to_delivery_id: Optional[StrictStr] = Field(default=None, description="Tells that this delivery has been canceled and moved to terminal group  with id *MovedToTerminalGroupId*.", alias="movedToDeliveryId")
    moved_to_terminal_group_id: Optional[StrictStr] = Field(default=None, alias="movedToTerminalGroupId")
    moved_to_organization_id: Optional[StrictStr] = Field(default=None, alias="movedToOrganizationId")
    menu_id: Optional[StrictStr] = Field(default=None, description="External menu ID.", alias="menuId")
    delivery_zone: Optional[StrictStr] = Field(default=None, description="Name of delivery zone.", alias="deliveryZone")
    estimated_time: Optional[StrictStr] = Field(default=None, description="Delivery estimated time.", alias="estimatedTime")
    is_asap: Optional[StrictBool] = Field(default=None, description="Whether to deliver as soon as possible.", alias="isAsap")
    when_packed: Optional[StrictStr] = Field(default=None, description="Delivery packing time (Local for the terminal).", alias="whenPacked")
    sum: Union[StrictFloat, StrictInt] = Field(description="Order amount (after discount or surcharge).")
    number: StrictInt = Field(description="Delivery No.")
    source_key: Optional[StrictStr] = Field(default=None, description="Delivery source.", alias="sourceKey")
    when_bill_printed: Optional[StrictStr] = Field(default=None, description="Invoice printing time (guest bill time).", alias="whenBillPrinted")
    when_closed: Optional[StrictStr] = Field(default=None, description="Delivery closing time (Local for delivery terminal).", alias="whenClosed")
    conception: Optional[TransportDeliveriesResponseOrderConception] = Field(default=None, description="Concept.")
    guests_info: Optional[TransportDeliveriesResponseOrderGuestsInfo] = Field(description="Information about order guests.", alias="guestsInfo")
    items: List[TransportDeliveriesResponseOrderOrderItem] = Field(description="Order items.")
    combos: Optional[List[TransportDeliveriesResponseOrderOrderCombo]] = Field(default=None, description="Combo.")
    payments: Optional[List[TransportDeliveriesResponseOrderPaymentItem]] = Field(default=None, description="Payments.")
    tips: Optional[List[TransportDeliveriesResponseOrderTipsPaymentItem]] = Field(default=None, description="Tips.")
    discounts: Optional[List[TransportDeliveriesResponseOrderDiscountItem]] = Field(default=None, description="Discounts.")
    order_type: Optional[TransportDeliveriesResponseOrderOrderType] = Field(description="Order type.", alias="orderType")
    terminal_group_id: StrictStr = Field(description="ID of the terminal group where the order is located.", alias="terminalGroupId")
    processed_payments_sum: Optional[Union[StrictFloat, StrictInt]] = Field(description="The amount of processed payments.  <remarks>  null - only for unsupported POS versions.  </remarks>   > Allowed from version `7.6.0`.", alias="processedPaymentsSum")
    loyalty_info: Optional[TransportDeliveriesResponseOrderLoyaltyInfo] = Field(default=None, description="Information about Loyalty app.  <remarks>  null - only for unsupported POS versions.  </remarks>", alias="loyaltyInfo")
    external_data: Optional[List[TransportDeliveriesResponseOrderExternalData]] = Field(default=None, description="Order external data.   > Allowed from version `8.0.6`.", alias="externalData")
    __properties: ClassVar[List[str]] = ["parentDeliveryId", "customer", "phone", "deliveryPoint", "status", "cancelInfo", "courierInfo", "completeBefore", "whenCreated", "whenConfirmed", "whenPrinted", "whenCookingCompleted", "whenSended", "whenDelivered", "comment", "problem", "operator", "marketingSource", "deliveryDuration", "indexInCourierRoute", "cookingStartTime", "isDeleted", "whenReceivedByApi", "whenReceivedFromFront", "movedFromDeliveryId", "movedFromTerminalGroupId", "movedFromOrganizationId", "externalCourierService", "movedToDeliveryId", "movedToTerminalGroupId", "movedToOrganizationId", "menuId", "deliveryZone", "estimatedTime", "isAsap", "whenPacked", "sum", "number", "sourceKey", "whenBillPrinted", "whenClosed", "conception", "guestsInfo", "items", "combos", "payments", "tips", "discounts", "orderType", "terminalGroupId", "processedPaymentsSum", "loyaltyInfo", "externalData"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TransportDeliveriesResponseOrderOrder from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of customer
        if self.customer:
            _dict['customer'] = self.customer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delivery_point
        if self.delivery_point:
            _dict['deliveryPoint'] = self.delivery_point.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cancel_info
        if self.cancel_info:
            _dict['cancelInfo'] = self.cancel_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of courier_info
        if self.courier_info:
            _dict['courierInfo'] = self.courier_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of problem
        if self.problem:
            _dict['problem'] = self.problem.to_dict()
        # override the default output from pydantic by calling `to_dict()` of operator
        if self.operator:
            _dict['operator'] = self.operator.to_dict()
        # override the default output from pydantic by calling `to_dict()` of marketing_source
        if self.marketing_source:
            _dict['marketingSource'] = self.marketing_source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of external_courier_service
        if self.external_courier_service:
            _dict['externalCourierService'] = self.external_courier_service.to_dict()
        # override the default output from pydantic by calling `to_dict()` of conception
        if self.conception:
            _dict['conception'] = self.conception.to_dict()
        # override the default output from pydantic by calling `to_dict()` of guests_info
        if self.guests_info:
            _dict['guestsInfo'] = self.guests_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item_items in self.items:
                if _item_items:
                    _items.append(_item_items.to_dict())
            _dict['items'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in combos (list)
        _items = []
        if self.combos:
            for _item_combos in self.combos:
                if _item_combos:
                    _items.append(_item_combos.to_dict())
            _dict['combos'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in payments (list)
        _items = []
        if self.payments:
            for _item_payments in self.payments:
                if _item_payments:
                    _items.append(_item_payments.to_dict())
            _dict['payments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tips (list)
        _items = []
        if self.tips:
            for _item_tips in self.tips:
                if _item_tips:
                    _items.append(_item_tips.to_dict())
            _dict['tips'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in discounts (list)
        _items = []
        if self.discounts:
            for _item_discounts in self.discounts:
                if _item_discounts:
                    _items.append(_item_discounts.to_dict())
            _dict['discounts'] = _items
        # override the default output from pydantic by calling `to_dict()` of order_type
        if self.order_type:
            _dict['orderType'] = self.order_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of loyalty_info
        if self.loyalty_info:
            _dict['loyaltyInfo'] = self.loyalty_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in external_data (list)
        _items = []
        if self.external_data:
            for _item_external_data in self.external_data:
                if _item_external_data:
                    _items.append(_item_external_data.to_dict())
            _dict['externalData'] = _items
        # set to None if parent_delivery_id (nullable) is None
        # and model_fields_set contains the field
        if self.parent_delivery_id is None and "parent_delivery_id" in self.model_fields_set:
            _dict['parentDeliveryId'] = None

        # set to None if customer (nullable) is None
        # and model_fields_set contains the field
        if self.customer is None and "customer" in self.model_fields_set:
            _dict['customer'] = None

        # set to None if delivery_point (nullable) is None
        # and model_fields_set contains the field
        if self.delivery_point is None and "delivery_point" in self.model_fields_set:
            _dict['deliveryPoint'] = None

        # set to None if cancel_info (nullable) is None
        # and model_fields_set contains the field
        if self.cancel_info is None and "cancel_info" in self.model_fields_set:
            _dict['cancelInfo'] = None

        # set to None if courier_info (nullable) is None
        # and model_fields_set contains the field
        if self.courier_info is None and "courier_info" in self.model_fields_set:
            _dict['courierInfo'] = None

        # set to None if when_confirmed (nullable) is None
        # and model_fields_set contains the field
        if self.when_confirmed is None and "when_confirmed" in self.model_fields_set:
            _dict['whenConfirmed'] = None

        # set to None if when_printed (nullable) is None
        # and model_fields_set contains the field
        if self.when_printed is None and "when_printed" in self.model_fields_set:
            _dict['whenPrinted'] = None

        # set to None if when_cooking_completed (nullable) is None
        # and model_fields_set contains the field
        if self.when_cooking_completed is None and "when_cooking_completed" in self.model_fields_set:
            _dict['whenCookingCompleted'] = None

        # set to None if when_sended (nullable) is None
        # and model_fields_set contains the field
        if self.when_sended is None and "when_sended" in self.model_fields_set:
            _dict['whenSended'] = None

        # set to None if when_delivered (nullable) is None
        # and model_fields_set contains the field
        if self.when_delivered is None and "when_delivered" in self.model_fields_set:
            _dict['whenDelivered'] = None

        # set to None if comment (nullable) is None
        # and model_fields_set contains the field
        if self.comment is None and "comment" in self.model_fields_set:
            _dict['comment'] = None

        # set to None if problem (nullable) is None
        # and model_fields_set contains the field
        if self.problem is None and "problem" in self.model_fields_set:
            _dict['problem'] = None

        # set to None if operator (nullable) is None
        # and model_fields_set contains the field
        if self.operator is None and "operator" in self.model_fields_set:
            _dict['operator'] = None

        # set to None if marketing_source (nullable) is None
        # and model_fields_set contains the field
        if self.marketing_source is None and "marketing_source" in self.model_fields_set:
            _dict['marketingSource'] = None

        # set to None if delivery_duration (nullable) is None
        # and model_fields_set contains the field
        if self.delivery_duration is None and "delivery_duration" in self.model_fields_set:
            _dict['deliveryDuration'] = None

        # set to None if index_in_courier_route (nullable) is None
        # and model_fields_set contains the field
        if self.index_in_courier_route is None and "index_in_courier_route" in self.model_fields_set:
            _dict['indexInCourierRoute'] = None

        # set to None if is_deleted (nullable) is None
        # and model_fields_set contains the field
        if self.is_deleted is None and "is_deleted" in self.model_fields_set:
            _dict['isDeleted'] = None

        # set to None if when_received_by_api (nullable) is None
        # and model_fields_set contains the field
        if self.when_received_by_api is None and "when_received_by_api" in self.model_fields_set:
            _dict['whenReceivedByApi'] = None

        # set to None if when_received_from_front (nullable) is None
        # and model_fields_set contains the field
        if self.when_received_from_front is None and "when_received_from_front" in self.model_fields_set:
            _dict['whenReceivedFromFront'] = None

        # set to None if moved_from_delivery_id (nullable) is None
        # and model_fields_set contains the field
        if self.moved_from_delivery_id is None and "moved_from_delivery_id" in self.model_fields_set:
            _dict['movedFromDeliveryId'] = None

        # set to None if moved_from_terminal_group_id (nullable) is None
        # and model_fields_set contains the field
        if self.moved_from_terminal_group_id is None and "moved_from_terminal_group_id" in self.model_fields_set:
            _dict['movedFromTerminalGroupId'] = None

        # set to None if moved_from_organization_id (nullable) is None
        # and model_fields_set contains the field
        if self.moved_from_organization_id is None and "moved_from_organization_id" in self.model_fields_set:
            _dict['movedFromOrganizationId'] = None

        # set to None if external_courier_service (nullable) is None
        # and model_fields_set contains the field
        if self.external_courier_service is None and "external_courier_service" in self.model_fields_set:
            _dict['externalCourierService'] = None

        # set to None if moved_to_delivery_id (nullable) is None
        # and model_fields_set contains the field
        if self.moved_to_delivery_id is None and "moved_to_delivery_id" in self.model_fields_set:
            _dict['movedToDeliveryId'] = None

        # set to None if moved_to_terminal_group_id (nullable) is None
        # and model_fields_set contains the field
        if self.moved_to_terminal_group_id is None and "moved_to_terminal_group_id" in self.model_fields_set:
            _dict['movedToTerminalGroupId'] = None

        # set to None if moved_to_organization_id (nullable) is None
        # and model_fields_set contains the field
        if self.moved_to_organization_id is None and "moved_to_organization_id" in self.model_fields_set:
            _dict['movedToOrganizationId'] = None

        # set to None if menu_id (nullable) is None
        # and model_fields_set contains the field
        if self.menu_id is None and "menu_id" in self.model_fields_set:
            _dict['menuId'] = None

        # set to None if delivery_zone (nullable) is None
        # and model_fields_set contains the field
        if self.delivery_zone is None and "delivery_zone" in self.model_fields_set:
            _dict['deliveryZone'] = None

        # set to None if estimated_time (nullable) is None
        # and model_fields_set contains the field
        if self.estimated_time is None and "estimated_time" in self.model_fields_set:
            _dict['estimatedTime'] = None

        # set to None if is_asap (nullable) is None
        # and model_fields_set contains the field
        if self.is_asap is None and "is_asap" in self.model_fields_set:
            _dict['isAsap'] = None

        # set to None if when_packed (nullable) is None
        # and model_fields_set contains the field
        if self.when_packed is None and "when_packed" in self.model_fields_set:
            _dict['whenPacked'] = None

        # set to None if source_key (nullable) is None
        # and model_fields_set contains the field
        if self.source_key is None and "source_key" in self.model_fields_set:
            _dict['sourceKey'] = None

        # set to None if when_bill_printed (nullable) is None
        # and model_fields_set contains the field
        if self.when_bill_printed is None and "when_bill_printed" in self.model_fields_set:
            _dict['whenBillPrinted'] = None

        # set to None if when_closed (nullable) is None
        # and model_fields_set contains the field
        if self.when_closed is None and "when_closed" in self.model_fields_set:
            _dict['whenClosed'] = None

        # set to None if conception (nullable) is None
        # and model_fields_set contains the field
        if self.conception is None and "conception" in self.model_fields_set:
            _dict['conception'] = None

        # set to None if guests_info (nullable) is None
        # and model_fields_set contains the field
        if self.guests_info is None and "guests_info" in self.model_fields_set:
            _dict['guestsInfo'] = None

        # set to None if combos (nullable) is None
        # and model_fields_set contains the field
        if self.combos is None and "combos" in self.model_fields_set:
            _dict['combos'] = None

        # set to None if payments (nullable) is None
        # and model_fields_set contains the field
        if self.payments is None and "payments" in self.model_fields_set:
            _dict['payments'] = None

        # set to None if tips (nullable) is None
        # and model_fields_set contains the field
        if self.tips is None and "tips" in self.model_fields_set:
            _dict['tips'] = None

        # set to None if discounts (nullable) is None
        # and model_fields_set contains the field
        if self.discounts is None and "discounts" in self.model_fields_set:
            _dict['discounts'] = None

        # set to None if order_type (nullable) is None
        # and model_fields_set contains the field
        if self.order_type is None and "order_type" in self.model_fields_set:
            _dict['orderType'] = None

        # set to None if processed_payments_sum (nullable) is None
        # and model_fields_set contains the field
        if self.processed_payments_sum is None and "processed_payments_sum" in self.model_fields_set:
            _dict['processedPaymentsSum'] = None

        # set to None if loyalty_info (nullable) is None
        # and model_fields_set contains the field
        if self.loyalty_info is None and "loyalty_info" in self.model_fields_set:
            _dict['loyaltyInfo'] = None

        # set to None if external_data (nullable) is None
        # and model_fields_set contains the field
        if self.external_data is None and "external_data" in self.model_fields_set:
            _dict['externalData'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TransportDeliveriesResponseOrderOrder from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "parentDeliveryId": obj.get("parentDeliveryId"),
            "customer": TransportDeliveriesResponseOrderCustomer.from_dict(obj["customer"]) if obj.get("customer") is not None else None,
            "phone": obj.get("phone"),
            "deliveryPoint": TransportDeliveriesResponseOrderDeliveryPoint.from_dict(obj["deliveryPoint"]) if obj.get("deliveryPoint") is not None else None,
            "status": obj.get("status"),
            "cancelInfo": TransportDeliveriesResponseOrderCancelInfo.from_dict(obj["cancelInfo"]) if obj.get("cancelInfo") is not None else None,
            "courierInfo": TransportDeliveriesResponseOrderCourierInfo.from_dict(obj["courierInfo"]) if obj.get("courierInfo") is not None else None,
            "completeBefore": obj.get("completeBefore"),
            "whenCreated": obj.get("whenCreated"),
            "whenConfirmed": obj.get("whenConfirmed"),
            "whenPrinted": obj.get("whenPrinted"),
            "whenCookingCompleted": obj.get("whenCookingCompleted"),
            "whenSended": obj.get("whenSended"),
            "whenDelivered": obj.get("whenDelivered"),
            "comment": obj.get("comment"),
            "problem": TransportDeliveriesResponseOrderProblem.from_dict(obj["problem"]) if obj.get("problem") is not None else None,
            "operator": TransportDeliveriesResponseOrderEmployee.from_dict(obj["operator"]) if obj.get("operator") is not None else None,
            "marketingSource": TransportDeliveriesResponseOrderMarketingSource.from_dict(obj["marketingSource"]) if obj.get("marketingSource") is not None else None,
            "deliveryDuration": obj.get("deliveryDuration"),
            "indexInCourierRoute": obj.get("indexInCourierRoute"),
            "cookingStartTime": obj.get("cookingStartTime"),
            "isDeleted": obj.get("isDeleted"),
            "whenReceivedByApi": obj.get("whenReceivedByApi"),
            "whenReceivedFromFront": obj.get("whenReceivedFromFront"),
            "movedFromDeliveryId": obj.get("movedFromDeliveryId"),
            "movedFromTerminalGroupId": obj.get("movedFromTerminalGroupId"),
            "movedFromOrganizationId": obj.get("movedFromOrganizationId"),
            "externalCourierService": TransportDeliveriesResponseOrderExternalCourierService.from_dict(obj["externalCourierService"]) if obj.get("externalCourierService") is not None else None,
            "movedToDeliveryId": obj.get("movedToDeliveryId"),
            "movedToTerminalGroupId": obj.get("movedToTerminalGroupId"),
            "movedToOrganizationId": obj.get("movedToOrganizationId"),
            "menuId": obj.get("menuId"),
            "deliveryZone": obj.get("deliveryZone"),
            "estimatedTime": obj.get("estimatedTime"),
            "isAsap": obj.get("isAsap"),
            "whenPacked": obj.get("whenPacked"),
            "sum": obj.get("sum"),
            "number": obj.get("number"),
            "sourceKey": obj.get("sourceKey"),
            "whenBillPrinted": obj.get("whenBillPrinted"),
            "whenClosed": obj.get("whenClosed"),
            "conception": TransportDeliveriesResponseOrderConception.from_dict(obj["conception"]) if obj.get("conception") is not None else None,
            "guestsInfo": TransportDeliveriesResponseOrderGuestsInfo.from_dict(obj["guestsInfo"]) if obj.get("guestsInfo") is not None else None,
            "items": [TransportDeliveriesResponseOrderOrderItem.from_dict(_item) for _item in obj["items"]] if obj.get("items") is not None else None,
            "combos": [TransportDeliveriesResponseOrderOrderCombo.from_dict(_item) for _item in obj["combos"]] if obj.get("combos") is not None else None,
            "payments": [TransportDeliveriesResponseOrderPaymentItem.from_dict(_item) for _item in obj["payments"]] if obj.get("payments") is not None else None,
            "tips": [TransportDeliveriesResponseOrderTipsPaymentItem.from_dict(_item) for _item in obj["tips"]] if obj.get("tips") is not None else None,
            "discounts": [TransportDeliveriesResponseOrderDiscountItem.from_dict(_item) for _item in obj["discounts"]] if obj.get("discounts") is not None else None,
            "orderType": TransportDeliveriesResponseOrderOrderType.from_dict(obj["orderType"]) if obj.get("orderType") is not None else None,
            "terminalGroupId": obj.get("terminalGroupId"),
            "processedPaymentsSum": obj.get("processedPaymentsSum"),
            "loyaltyInfo": TransportDeliveriesResponseOrderLoyaltyInfo.from_dict(obj["loyaltyInfo"]) if obj.get("loyaltyInfo") is not None else None,
            "externalData": [TransportDeliveriesResponseOrderExternalData.from_dict(_item) for _item in obj["externalData"]] if obj.get("externalData") is not None else None
        })
        return _obj


