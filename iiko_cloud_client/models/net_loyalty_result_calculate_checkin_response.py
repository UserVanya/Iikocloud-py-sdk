# coding: utf-8

"""
    iikoCloud API

    <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from iiko_cloud_client.models.net_loyalty_result_available_payment import NetLoyaltyResultAvailablePayment
from iiko_cloud_client.models.net_loyalty_result_loyalty_program_result import NetLoyaltyResultLoyaltyProgramResult
from iiko_cloud_client.models.net_loyalty_result_warning_info import NetLoyaltyResultWarningInfo
from typing import Optional, Set
from typing_extensions import Self

class NetLoyaltyResultCalculateCheckinResponse(BaseModel):
    """
    Loyalty result for order.
    """ # noqa: E501
    loyalty_program_results: Optional[List[NetLoyaltyResultLoyaltyProgramResult]] = Field(default=None, description="Loyalty program results.", alias="loyaltyProgramResults")
    available_payments: Optional[List[NetLoyaltyResultAvailablePayment]] = Field(default=None, description="Marketing campaigns with available payments.", alias="availablePayments")
    validation_warnings: Optional[List[StrictStr]] = Field(default=None, description="Warnings about errors, not blocking loyalty calculation.", alias="validationWarnings")
    warnings: Optional[List[NetLoyaltyResultWarningInfo]] = Field(default=None, description="Warnings about errors, not blocking loyalty calculation.", alias="Warnings")
    loyalty_trace: Optional[StrictStr] = Field(default=None, description="Loyalty trace. Can be null.", alias="loyaltyTrace")
    __properties: ClassVar[List[str]] = ["loyaltyProgramResults", "availablePayments", "validationWarnings", "Warnings", "loyaltyTrace"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NetLoyaltyResultCalculateCheckinResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in loyalty_program_results (list)
        _items = []
        if self.loyalty_program_results:
            for _item_loyalty_program_results in self.loyalty_program_results:
                if _item_loyalty_program_results:
                    _items.append(_item_loyalty_program_results.to_dict())
            _dict['loyaltyProgramResults'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in available_payments (list)
        _items = []
        if self.available_payments:
            for _item_available_payments in self.available_payments:
                if _item_available_payments:
                    _items.append(_item_available_payments.to_dict())
            _dict['availablePayments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in warnings (list)
        _items = []
        if self.warnings:
            for _item_warnings in self.warnings:
                if _item_warnings:
                    _items.append(_item_warnings.to_dict())
            _dict['Warnings'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NetLoyaltyResultCalculateCheckinResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "loyaltyProgramResults": [NetLoyaltyResultLoyaltyProgramResult.from_dict(_item) for _item in obj["loyaltyProgramResults"]] if obj.get("loyaltyProgramResults") is not None else None,
            "availablePayments": [NetLoyaltyResultAvailablePayment.from_dict(_item) for _item in obj["availablePayments"]] if obj.get("availablePayments") is not None else None,
            "validationWarnings": obj.get("validationWarnings"),
            "Warnings": [NetLoyaltyResultWarningInfo.from_dict(_item) for _item in obj["Warnings"]] if obj.get("Warnings") is not None else None,
            "loyaltyTrace": obj.get("loyaltyTrace")
        })
        return _obj


