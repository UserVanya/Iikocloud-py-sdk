# coding: utf-8

"""
    iikoCloud API

    <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from iiko_cloud_client.models.transport_delivery_restrictions_allowed_restrictions_order_location import TransportDeliveryRestrictionsAllowedRestrictionsOrderLocation
from iiko_cloud_client.models.transport_delivery_restrictions_allowed_restrictions_restrictions_address import TransportDeliveryRestrictionsAllowedRestrictionsRestrictionsAddress
from iiko_cloud_client.models.transport_delivery_restrictions_allowed_restrictions_restrictions_order_item import TransportDeliveryRestrictionsAllowedRestrictionsRestrictionsOrderItem
from typing import Optional, Set
from typing_extensions import Self

class TransportDeliveryRestrictionsAllowedRestrictionsGetAllowedRestrictionsRequest(BaseModel):
    """
    Request to identify suitable terminal groups.
    """ # noqa: E501
    organization_id: Optional[StrictStr] = Field(default=None, description="Organization ID. Deprecated, use \"organizationIds\".", alias="organizationId")
    organization_ids: Optional[List[StrictStr]] = Field(default=None, description="Organization IDs.                Can be obtained by `/api/1/organizations` operation.", alias="organizationIds")
    delivery_address: Optional[TransportDeliveryRestrictionsAllowedRestrictionsRestrictionsAddress] = Field(default=None, description="Delivery address.", alias="deliveryAddress")
    order_location: Optional[TransportDeliveryRestrictionsAllowedRestrictionsOrderLocation] = Field(default=None, description="Order location.", alias="orderLocation")
    order_items: Optional[List[TransportDeliveryRestrictionsAllowedRestrictionsRestrictionsOrderItem]] = Field(default=None, description="Order list.", alias="orderItems")
    is_courier_delivery: StrictBool = Field(description="Type of delivery service.", alias="isCourierDelivery")
    delivery_date: Optional[StrictStr] = Field(default=None, description="Delivery date (Local for delivery terminal).", alias="deliveryDate")
    delivery_sum: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Sum.", alias="deliverySum")
    discount_sum: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Discounts sum.", alias="discountSum")
    __properties: ClassVar[List[str]] = ["organizationId", "organizationIds", "deliveryAddress", "orderLocation", "orderItems", "isCourierDelivery", "deliveryDate", "deliverySum", "discountSum"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TransportDeliveryRestrictionsAllowedRestrictionsGetAllowedRestrictionsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of delivery_address
        if self.delivery_address:
            _dict['deliveryAddress'] = self.delivery_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of order_location
        if self.order_location:
            _dict['orderLocation'] = self.order_location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in order_items (list)
        _items = []
        if self.order_items:
            for _item_order_items in self.order_items:
                if _item_order_items:
                    _items.append(_item_order_items.to_dict())
            _dict['orderItems'] = _items
        # set to None if organization_id (nullable) is None
        # and model_fields_set contains the field
        if self.organization_id is None and "organization_id" in self.model_fields_set:
            _dict['organizationId'] = None

        # set to None if delivery_address (nullable) is None
        # and model_fields_set contains the field
        if self.delivery_address is None and "delivery_address" in self.model_fields_set:
            _dict['deliveryAddress'] = None

        # set to None if order_location (nullable) is None
        # and model_fields_set contains the field
        if self.order_location is None and "order_location" in self.model_fields_set:
            _dict['orderLocation'] = None

        # set to None if delivery_date (nullable) is None
        # and model_fields_set contains the field
        if self.delivery_date is None and "delivery_date" in self.model_fields_set:
            _dict['deliveryDate'] = None

        # set to None if delivery_sum (nullable) is None
        # and model_fields_set contains the field
        if self.delivery_sum is None and "delivery_sum" in self.model_fields_set:
            _dict['deliverySum'] = None

        # set to None if discount_sum (nullable) is None
        # and model_fields_set contains the field
        if self.discount_sum is None and "discount_sum" in self.model_fields_set:
            _dict['discountSum'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TransportDeliveryRestrictionsAllowedRestrictionsGetAllowedRestrictionsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "organizationId": obj.get("organizationId"),
            "organizationIds": obj.get("organizationIds"),
            "deliveryAddress": TransportDeliveryRestrictionsAllowedRestrictionsRestrictionsAddress.from_dict(obj["deliveryAddress"]) if obj.get("deliveryAddress") is not None else None,
            "orderLocation": TransportDeliveryRestrictionsAllowedRestrictionsOrderLocation.from_dict(obj["orderLocation"]) if obj.get("orderLocation") is not None else None,
            "orderItems": [TransportDeliveryRestrictionsAllowedRestrictionsRestrictionsOrderItem.from_dict(_item) for _item in obj["orderItems"]] if obj.get("orderItems") is not None else None,
            "isCourierDelivery": obj.get("isCourierDelivery"),
            "deliveryDate": obj.get("deliveryDate"),
            "deliverySum": obj.get("deliverySum"),
            "discountSum": obj.get("discountSum")
        })
        return _obj


