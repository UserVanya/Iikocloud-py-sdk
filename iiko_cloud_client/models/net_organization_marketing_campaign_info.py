# coding: utf-8

"""
    iikoCloud API

    <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from iiko_cloud_client.models.net_organization_marketing_campaign_action_condition_binding_info import NetOrganizationMarketingCampaignActionConditionBindingInfo
from typing import Optional, Set
from typing_extensions import Self

class NetOrganizationMarketingCampaignInfo(BaseModel):
    """
    Marketing campaign info.
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Marketing campaign id.")
    program_id: Optional[StrictStr] = Field(default=None, description="Loyalty program id.", alias="programId")
    name: Optional[StrictStr] = Field(default=None, description="Loyalty program name. Can be null.")
    description: Optional[StrictStr] = Field(default=None, description="Marketing campaign description. Can be null.")
    is_active: Optional[StrictBool] = Field(default=None, description="Marketing campaign is active.", alias="isActive")
    period_from: Optional[StrictStr] = Field(default=None, description="Marketing campaign works since date.", alias="periodFrom")
    period_to: Optional[StrictStr] = Field(default=None, description="Marketing campaign works till date. Null means limitless.", alias="periodTo")
    order_action_condition_bindings: Optional[List[NetOrganizationMarketingCampaignActionConditionBindingInfo]] = Field(default=None, description="Conditions and actions that will be checked when order is processed.", alias="orderActionConditionBindings")
    periodic_action_condition_bindings: Optional[List[NetOrganizationMarketingCampaignActionConditionBindingInfo]] = Field(default=None, description="Conditions and actions that will be checked by schedule.", alias="periodicActionConditionBindings")
    overdraft_action_condition_bindings: Optional[List[NetOrganizationMarketingCampaignActionConditionBindingInfo]] = Field(default=None, description="Conditions and actions that will be checked by overdraft.", alias="overdraftActionConditionBindings")
    guest_registration_action_condition_bindings: Optional[List[NetOrganizationMarketingCampaignActionConditionBindingInfo]] = Field(default=None, description="Conditions and actions that will be checked by guest registration.", alias="guestRegistrationActionConditionBindings")
    __properties: ClassVar[List[str]] = ["id", "programId", "name", "description", "isActive", "periodFrom", "periodTo", "orderActionConditionBindings", "periodicActionConditionBindings", "overdraftActionConditionBindings", "guestRegistrationActionConditionBindings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NetOrganizationMarketingCampaignInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in order_action_condition_bindings (list)
        _items = []
        if self.order_action_condition_bindings:
            for _item_order_action_condition_bindings in self.order_action_condition_bindings:
                if _item_order_action_condition_bindings:
                    _items.append(_item_order_action_condition_bindings.to_dict())
            _dict['orderActionConditionBindings'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in periodic_action_condition_bindings (list)
        _items = []
        if self.periodic_action_condition_bindings:
            for _item_periodic_action_condition_bindings in self.periodic_action_condition_bindings:
                if _item_periodic_action_condition_bindings:
                    _items.append(_item_periodic_action_condition_bindings.to_dict())
            _dict['periodicActionConditionBindings'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in overdraft_action_condition_bindings (list)
        _items = []
        if self.overdraft_action_condition_bindings:
            for _item_overdraft_action_condition_bindings in self.overdraft_action_condition_bindings:
                if _item_overdraft_action_condition_bindings:
                    _items.append(_item_overdraft_action_condition_bindings.to_dict())
            _dict['overdraftActionConditionBindings'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in guest_registration_action_condition_bindings (list)
        _items = []
        if self.guest_registration_action_condition_bindings:
            for _item_guest_registration_action_condition_bindings in self.guest_registration_action_condition_bindings:
                if _item_guest_registration_action_condition_bindings:
                    _items.append(_item_guest_registration_action_condition_bindings.to_dict())
            _dict['guestRegistrationActionConditionBindings'] = _items
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if program_id (nullable) is None
        # and model_fields_set contains the field
        if self.program_id is None and "program_id" in self.model_fields_set:
            _dict['programId'] = None

        # set to None if period_to (nullable) is None
        # and model_fields_set contains the field
        if self.period_to is None and "period_to" in self.model_fields_set:
            _dict['periodTo'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NetOrganizationMarketingCampaignInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "programId": obj.get("programId"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "isActive": obj.get("isActive"),
            "periodFrom": obj.get("periodFrom"),
            "periodTo": obj.get("periodTo"),
            "orderActionConditionBindings": [NetOrganizationMarketingCampaignActionConditionBindingInfo.from_dict(_item) for _item in obj["orderActionConditionBindings"]] if obj.get("orderActionConditionBindings") is not None else None,
            "periodicActionConditionBindings": [NetOrganizationMarketingCampaignActionConditionBindingInfo.from_dict(_item) for _item in obj["periodicActionConditionBindings"]] if obj.get("periodicActionConditionBindings") is not None else None,
            "overdraftActionConditionBindings": [NetOrganizationMarketingCampaignActionConditionBindingInfo.from_dict(_item) for _item in obj["overdraftActionConditionBindings"]] if obj.get("overdraftActionConditionBindings") is not None else None,
            "guestRegistrationActionConditionBindings": [NetOrganizationMarketingCampaignActionConditionBindingInfo.from_dict(_item) for _item in obj["guestRegistrationActionConditionBindings"]] if obj.get("guestRegistrationActionConditionBindings") is not None else None
        })
        return _obj


