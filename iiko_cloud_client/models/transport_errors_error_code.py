# coding: utf-8

"""
    iikoCloud API

    <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
from enum import Enum
from typing_extensions import Self


class TransportErrorsErrorCode(str, Enum):
    """
    TransportErrorsErrorCode
    """

    """
    allowed enum values
    """
    COMMON = 'Common'
    ILLEGALDELIVERYSTATUS = 'IllegalDeliveryStatus'
    CUSTOMERNAMENOTSPECIFIED = 'CustomerNameNotSpecified'
    PRODUCTNOTFOUND = 'ProductNotFound'
    MARKETINGSOURCENOTFOUND = 'MarketingSourceNotFound'
    PAYMENTTYPENOTFOUND = 'PaymentTypeNotFound'
    PRODUCTSIZENOTFOUND = 'ProductSizeNotFound'
    PRODUCTGROUPNOTFOUND = 'ProductGroupNotFound'
    ORDERNOTFOUND = 'OrderNotFound'
    CONCEPTIONNOTFOUND = 'ConceptionNotFound'
    DUPLICATEDORDERID = 'DuplicatedOrderId'
    TERMINALGROUPIDNOTDETERMINED = 'TerminalGroupIdNotDetermined'
    TERMINALGROUPUNREGISTERED = 'TerminalGroupUnregistered'
    INVALIDPHONE = 'InvalidPhone'
    MODIFIERDUPLICATED = 'ModifierDuplicated'
    PRODUCTCANBUYFROMCASHDESK = 'ProductCanBuyFromCashdesk'
    DELIVERYOPINIONMARKINVALID = 'DeliveryOpinionMarkInvalid'
    WRONGDELIVERYSTATUSFOROPINION = 'WrongDeliveryStatusForOpinion'
    OPINIONCOMMENTTOOLONG = 'OpinionCommentTooLong'
    SURVEYITEMNOTFOUND = 'SurveyItemNotFound'
    PAYMENTTYPECANNOTBEUSEDASEXTERNAL = 'PaymentTypeCanNotBeUsedAsExternal'
    ADDRESSNOTFOUND = 'AddressNotFound'
    HOMENOTFOUND = 'HomeNotFound'
    IIKONETPAYMENTADDITIONALDATACANNOTBEPARSED = 'IikonetPaymentAdditionalDataCanNotBeParsed'
    IIKONETPAYMENTEXTERNALIDNOTFOUND = 'IikonetPaymentExternalIdNotFound'
    IIKONETPAYMENTSUMLESSTHANMARKETINGDISCOUNT = 'IikonetPaymentSumLessThanMarketingDiscount'
    DISCOUNTCARDNOTFOUND = 'DiscountCardNotFound'
    DISCOUNTCARDTYPEMODEFORBIDDEN = 'DiscountCardTypeModeForbidden'
    IIKOCARD5PAYMENTADDITIONALDATACANNOTBEPARSED = 'Iikocard5PaymentAdditionalDataCanNotBeParsed'
    IIKOCARD5PAYMENTEXTERNALIDNOTFOUND = 'Iikocard5PaymentExternalIdNotFound'
    IIKOCARD5PAYMENTSUMLESSTHANMARKETINGDISCOUNT = 'Iikocard5PaymentSumLessThanMarketingDiscount'
    IIKOCARD5PAYMENTCANNOTCREATECUSTOMDATA = 'Iikocard5PaymentCanNotCreateCustomData'
    COURIERIDDOESNOTEXIST = 'CourierIdDoesNotExist'
    COURIERDOESNOTOWNORDER = 'CourierDoesNotOwnOrder'
    WRONGDELIVERYSTATUS = 'WrongDeliveryStatus'
    CANNOTASSIGNCOURIERTOORDER = 'CanNotAssignCourierToOrder'
    USERNOTFOUNDBYEXTERNALPASSWORD = 'UserNotFoundByExternalPassword'
    USERNOTFOUND = 'UserNotFound'
    IIKOCARD51PAYMENTADDITIONALDATACANNOTBEPARSED = 'Iikocard51PaymentAdditionalDataCanNotBeParsed'
    IIKOCARD51PAYMENTCREDENTIALNOTFOUND = 'Iikocard51PaymentCredentialNotFound'
    IIKOCARD51PAYMENTSEARCHSCOPENOTFOUND = 'Iikocard51PaymentSearchScopeNotFound'
    COMBODUPLICATED = 'ComboDuplicated'
    INVALIDREFERENCETOCOMBO = 'InvalidReferenceToCombo'
    INVALIDCOMBOITEMSAMOUNT = 'InvalidComboItemsAmount'
    INVALIDCOMBOITEMSGUEST = 'InvalidComboItemsGuest'
    INVALIDREFERENCETOGUEST = 'InvalidReferenceToGuest'
    GUESTDUPLICATED = 'GuestDuplicated'
    GUESTNAMENOTSPECIFIED = 'GuestNameNotSpecified'
    ORDERTYPENOTFOUND = 'OrderTypeNotFound'
    ORDERSERVICETYPEDOESNOTMATCHSELFSERVICEMODE = 'OrderServiceTypeDoesNotMatchSelfServiceMode'
    DELIVERYDATENOTSPECIFIED = 'DeliveryDateNotSpecified'
    ORDERSTATUSCHANGEDINIIKOFRONT = 'OrderStatusChangedInIikoFront'
    PAYMENTADDITIONALDATATOOLONG = 'PaymentAdditionalDataTooLong'
    PAYMENTSUMSHOULDBEPOSITIVE = 'PaymentSumShouldBePositive'
    DISCOUNTSUMNOTSPECIFIED = 'DiscountSumNotSpecified'
    INVALIDDISCOUNTITEM = 'InvalidDiscountItem'
    REQUESTPRODUCTPRICEISNOTEQUALTOFRONTPRICE = 'RequestProductPriceIsNotEqualToFrontPrice'
    ORDERITEMSNOTEXISTS = 'OrderItemsNotExists'
    ENTITYALREADYINUSE = 'EntityAlreadyInUse'
    DISCOUNTITEMPOSITIONNOTFOUND = 'DiscountItemPositionNotFound'
    DISCOUNTITEMDUPLICATEPOSITIONS = 'DiscountItemDuplicatePositions'
    NONUNQIUEORDERITEMPOSITION = 'NonUnqiueOrderItemPosition'
    EMPTYORDERITEMPOSITION = 'EmptyOrderItemPosition'
    INCORRECTORDERTYPE = 'IncorrectOrderType'
    INCORRECT = 'Incorrect'
    TERMINALGROUPDISABLED = 'TerminalGroupDisabled'
    ORGANIZATIONUNREGISTERED = 'OrganizationUnregistered'
    ORGANIZATIONDISABLED = 'OrganizationDisabled'
    TOOSMALLDELIVERYDATE = 'TooSmallDeliveryDate'
    IIKOFRONTTOOOLDVERSION = 'IikoFrontTooOldVersion'
    DUPLICATEDRESERVEID = 'DuplicatedReserveId'
    TIPSTYPENOTAPPLICABLE = 'TipsTypeNotApplicable'
    ANONYMOUSCUSTOMERDISABLED = 'AnonymousCustomerDisabled'
    MAYBEINCONSISTENTUPDATES = 'MayBeInconsistentUpdates'
    INCONSISTENTUPDATES = 'InconsistentUpdates'
    LINE1DISABLED = 'Line1Disabled'
    INTERNALSERVERERROR = 'InternalServerError'
    UNKNOWNERROR = 'UnknownError'

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of TransportErrorsErrorCode from a JSON string"""
        return cls(json.loads(json_str))


