# coding: utf-8

"""
    iikoCloud API

    <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from iiko_cloud_client.models.iiko_net_common_enums_refill_type import IikoNetCommonEnumsRefillType
from iiko_cloud_client.models.iiko_net_common_enums_template_type import IikoNetCommonEnumsTemplateType
from iiko_cloud_client.models.net_organization_marketing_campaign_info import NetOrganizationMarketingCampaignInfo
from iiko_cloud_client.models.net_program_type import NetProgramType
from typing import Optional, Set
from typing_extensions import Self

class NetOrganizationLoyaltyProgram(BaseModel):
    """
    Loyalty program.
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Program id.")
    name: Optional[StrictStr] = Field(default=None, description="Program name. Can be null.")
    description: Optional[StrictStr] = Field(default=None, description="Program description. Can be null.")
    service_from: Optional[StrictStr] = Field(default=None, description="Program works since date.", alias="serviceFrom")
    service_to: Optional[StrictStr] = Field(default=None, description="Program works till date.", alias="serviceTo")
    notify_about_balance_changes: Optional[StrictBool] = Field(default=None, description="Notify customer when balance has changed (sms/push).", alias="notifyAboutBalanceChanges")
    program_type: Optional[NetProgramType] = Field(default=None, description="Program type.  <br>0 - deposit or corporate nutrition,<br />1 - bonus program,<br />2 - products program,<br />3 - discount program,<br />4 - certificate program.", alias="programType")
    is_active: Optional[StrictBool] = Field(default=None, description="Program is active.", alias="isActive")
    wallet_id: Optional[StrictStr] = Field(default=None, description="Wallet id. Program has only wallet that means global payment type for customers.", alias="walletId")
    marketing_campaigns: Optional[List[NetOrganizationMarketingCampaignInfo]] = Field(default=None, description="Program marketing campaigns.", alias="marketingCampaigns")
    applied_organizations: Optional[List[StrictStr]] = Field(default=None, description="Program applied organizations.", alias="appliedOrganizations")
    template_type: Optional[IikoNetCommonEnumsTemplateType] = Field(default=None, description="Program template type.  <br>0 - None,<br />1 - BonusProgram,<br />2 - DiscountProgram,<br />3 - NthDishProgram,<br />4 - ManualOrderAnonymousDiscount,<br />5 - AutoOrderAnonymousDiscount,<br />6 - AutoDishAnonymousDiscount,<br />7 - PromotionsProgram,<br />8 - NthDishPromotionsProgram.", alias="templateType")
    is_exchange_rate_enabled: Optional[StrictBool] = Field(default=None, description="Exchange rate for bonuses and real currency.", alias="isExchangeRateEnabled")
    refill_type: Optional[IikoNetCommonEnumsRefillType] = Field(default=None, description="Refill type with payment.", alias="refillType")
    __properties: ClassVar[List[str]] = ["id", "name", "description", "serviceFrom", "serviceTo", "notifyAboutBalanceChanges", "programType", "isActive", "walletId", "marketingCampaigns", "appliedOrganizations", "templateType", "isExchangeRateEnabled", "refillType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NetOrganizationLoyaltyProgram from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in marketing_campaigns (list)
        _items = []
        if self.marketing_campaigns:
            for _item_marketing_campaigns in self.marketing_campaigns:
                if _item_marketing_campaigns:
                    _items.append(_item_marketing_campaigns.to_dict())
            _dict['marketingCampaigns'] = _items
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if service_to (nullable) is None
        # and model_fields_set contains the field
        if self.service_to is None and "service_to" in self.model_fields_set:
            _dict['serviceTo'] = None

        # set to None if wallet_id (nullable) is None
        # and model_fields_set contains the field
        if self.wallet_id is None and "wallet_id" in self.model_fields_set:
            _dict['walletId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NetOrganizationLoyaltyProgram from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "serviceFrom": obj.get("serviceFrom"),
            "serviceTo": obj.get("serviceTo"),
            "notifyAboutBalanceChanges": obj.get("notifyAboutBalanceChanges"),
            "programType": obj.get("programType"),
            "isActive": obj.get("isActive"),
            "walletId": obj.get("walletId"),
            "marketingCampaigns": [NetOrganizationMarketingCampaignInfo.from_dict(_item) for _item in obj["marketingCampaigns"]] if obj.get("marketingCampaigns") is not None else None,
            "appliedOrganizations": obj.get("appliedOrganizations"),
            "templateType": obj.get("templateType"),
            "isExchangeRateEnabled": obj.get("isExchangeRateEnabled"),
            "refillType": obj.get("refillType")
        })
        return _obj


