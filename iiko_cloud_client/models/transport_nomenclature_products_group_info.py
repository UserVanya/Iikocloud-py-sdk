# coding: utf-8

"""
    iikoCloud API

    <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class TransportNomenclatureProductsGroupInfo(BaseModel):
    """
    DTO for outside transferring of external menu group details.
    """ # noqa: E501
    image_links: List[StrictStr] = Field(description="Links to images.", alias="imageLinks")
    parent_group: Optional[StrictStr] = Field(default=None, description="Parent group.", alias="parentGroup")
    order: StrictInt = Field(description="Group's order (priority) in menu.")
    is_included_in_menu: StrictBool = Field(description="On-the-menu attribute.", alias="isIncludedInMenu")
    is_group_modifier: StrictBool = Field(description="Is group modifier attribute.  * true - group modifier.  * false - external menu group.", alias="isGroupModifier")
    id: StrictStr = Field(description="ID.")
    code: Optional[StrictStr] = Field(default=None, description="SKU.")
    name: StrictStr = Field(description="Name.")
    description: Optional[StrictStr] = Field(default=None, description="Description.")
    additional_info: Optional[StrictStr] = Field(default=None, description="Additional information.", alias="additionalInfo")
    tags: Optional[List[StrictStr]] = Field(default=None, description="Tags.")
    is_deleted: Optional[StrictBool] = Field(default=None, description="Is-Deleted attribute.", alias="isDeleted")
    seo_description: Optional[StrictStr] = Field(default=None, description="SEO description for client.", alias="seoDescription")
    seo_text: Optional[StrictStr] = Field(default=None, description="SEO text for robots.", alias="seoText")
    seo_keywords: Optional[StrictStr] = Field(default=None, description="SEO key words.", alias="seoKeywords")
    seo_title: Optional[StrictStr] = Field(default=None, description="SEO header.", alias="seoTitle")
    __properties: ClassVar[List[str]] = ["imageLinks", "parentGroup", "order", "isIncludedInMenu", "isGroupModifier", "id", "code", "name", "description", "additionalInfo", "tags", "isDeleted", "seoDescription", "seoText", "seoKeywords", "seoTitle"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TransportNomenclatureProductsGroupInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if parent_group (nullable) is None
        # and model_fields_set contains the field
        if self.parent_group is None and "parent_group" in self.model_fields_set:
            _dict['parentGroup'] = None

        # set to None if code (nullable) is None
        # and model_fields_set contains the field
        if self.code is None and "code" in self.model_fields_set:
            _dict['code'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if additional_info (nullable) is None
        # and model_fields_set contains the field
        if self.additional_info is None and "additional_info" in self.model_fields_set:
            _dict['additionalInfo'] = None

        # set to None if tags (nullable) is None
        # and model_fields_set contains the field
        if self.tags is None and "tags" in self.model_fields_set:
            _dict['tags'] = None

        # set to None if seo_description (nullable) is None
        # and model_fields_set contains the field
        if self.seo_description is None and "seo_description" in self.model_fields_set:
            _dict['seoDescription'] = None

        # set to None if seo_text (nullable) is None
        # and model_fields_set contains the field
        if self.seo_text is None and "seo_text" in self.model_fields_set:
            _dict['seoText'] = None

        # set to None if seo_keywords (nullable) is None
        # and model_fields_set contains the field
        if self.seo_keywords is None and "seo_keywords" in self.model_fields_set:
            _dict['seoKeywords'] = None

        # set to None if seo_title (nullable) is None
        # and model_fields_set contains the field
        if self.seo_title is None and "seo_title" in self.model_fields_set:
            _dict['seoTitle'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TransportNomenclatureProductsGroupInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "imageLinks": obj.get("imageLinks"),
            "parentGroup": obj.get("parentGroup"),
            "order": obj.get("order"),
            "isIncludedInMenu": obj.get("isIncludedInMenu"),
            "isGroupModifier": obj.get("isGroupModifier"),
            "id": obj.get("id"),
            "code": obj.get("code"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "additionalInfo": obj.get("additionalInfo"),
            "tags": obj.get("tags"),
            "isDeleted": obj.get("isDeleted"),
            "seoDescription": obj.get("seoDescription"),
            "seoText": obj.get("seoText"),
            "seoKeywords": obj.get("seoKeywords"),
            "seoTitle": obj.get("seoTitle")
        })
        return _obj


