# coding: utf-8

"""
    iikoCloud API

    <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from iiko_cloud_client.models.transport_integration_web_hooks_filters_web_hooks_filter import TransportIntegrationWebHooksFiltersWebHooksFilter
from typing import Optional, Set
from typing_extensions import Self

class TransportWebHooksUpdateWebHookSettingsRequest(BaseModel):
    """
    Request to add or update webhooks settings for listed api logins of the specified organization.
    """ # noqa: E501
    organization_id: StrictStr = Field(description="Organization UOC Id.                Can be obtained by `/api/1/organizations` operation.", alias="organizationId")
    web_hooks_uri: StrictStr = Field(description="Webhook handler url.", alias="webHooksUri")
    auth_token: Optional[StrictStr] = Field(default=None, description="Authorization token to pass to the webhook handler.", alias="authToken")
    web_hooks_filter: Optional[TransportIntegrationWebHooksFiltersWebHooksFilter] = Field(default=None, description="Webhooks filter.", alias="webHooksFilter")
    __properties: ClassVar[List[str]] = ["organizationId", "webHooksUri", "authToken", "webHooksFilter"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TransportWebHooksUpdateWebHookSettingsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of web_hooks_filter
        if self.web_hooks_filter:
            _dict['webHooksFilter'] = self.web_hooks_filter.to_dict()
        # set to None if auth_token (nullable) is None
        # and model_fields_set contains the field
        if self.auth_token is None and "auth_token" in self.model_fields_set:
            _dict['authToken'] = None

        # set to None if web_hooks_filter (nullable) is None
        # and model_fields_set contains the field
        if self.web_hooks_filter is None and "web_hooks_filter" in self.model_fields_set:
            _dict['webHooksFilter'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TransportWebHooksUpdateWebHookSettingsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "organizationId": obj.get("organizationId"),
            "webHooksUri": obj.get("webHooksUri"),
            "authToken": obj.get("authToken"),
            "webHooksFilter": TransportIntegrationWebHooksFiltersWebHooksFilter.from_dict(obj["webHooksFilter"]) if obj.get("webHooksFilter") is not None else None
        })
        return _obj


