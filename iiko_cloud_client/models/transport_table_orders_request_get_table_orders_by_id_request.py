# coding: utf-8

"""
    iikoCloud API

    <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class TransportTableOrdersRequestGetTableOrdersByIdRequest(BaseModel):
    """
    Request for information about orders using IDs.
    """ # noqa: E501
    source_keys: Optional[List[StrictStr]] = Field(default=None, description="Source keys.", alias="sourceKeys")
    organization_ids: List[StrictStr] = Field(description="Organization IDs.                Can be obtained by `/api/1/organizations` operation.", alias="organizationIds")
    order_ids: Optional[List[StrictStr]] = Field(default=None, description="Order IDs.                > Required if \"posOrderIds\" is null. Must be null if \"posOrderIds\" is not null.", alias="orderIds")
    pos_order_ids: Optional[List[StrictStr]] = Field(default=None, description="POS order IDs.                > Required if \"orderIds\" is null. Must be null if \"orderIds\" is not null.", alias="posOrderIds")
    return_external_data_keys: Optional[List[StrictStr]] = Field(default=None, description="Keys for retrun external data information.", alias="returnExternalDataKeys")
    __properties: ClassVar[List[str]] = ["sourceKeys", "organizationIds", "orderIds", "posOrderIds", "returnExternalDataKeys"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TransportTableOrdersRequestGetTableOrdersByIdRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if source_keys (nullable) is None
        # and model_fields_set contains the field
        if self.source_keys is None and "source_keys" in self.model_fields_set:
            _dict['sourceKeys'] = None

        # set to None if order_ids (nullable) is None
        # and model_fields_set contains the field
        if self.order_ids is None and "order_ids" in self.model_fields_set:
            _dict['orderIds'] = None

        # set to None if pos_order_ids (nullable) is None
        # and model_fields_set contains the field
        if self.pos_order_ids is None and "pos_order_ids" in self.model_fields_set:
            _dict['posOrderIds'] = None

        # set to None if return_external_data_keys (nullable) is None
        # and model_fields_set contains the field
        if self.return_external_data_keys is None and "return_external_data_keys" in self.model_fields_set:
            _dict['returnExternalDataKeys'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TransportTableOrdersRequestGetTableOrdersByIdRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sourceKeys": obj.get("sourceKeys"),
            "organizationIds": obj.get("organizationIds"),
            "orderIds": obj.get("orderIds"),
            "posOrderIds": obj.get("posOrderIds"),
            "returnExternalDataKeys": obj.get("returnExternalDataKeys")
        })
        return _obj


