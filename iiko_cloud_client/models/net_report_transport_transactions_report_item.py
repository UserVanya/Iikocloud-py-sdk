# coding: utf-8

"""
    iikoCloud API

    <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from iiko_cloud_client.models.net_report_certificate_counteragent_type import NetReportCertificateCounteragentType
from iiko_cloud_client.models.net_report_transaction_type import NetReportTransactionType
from iiko_cloud_client.models.net_report_transport_transactions_certificate_report_item import NetReportTransportTransactionsCertificateReportItem
from iiko_cloud_client.models.net_report_transport_transactions_coupon_report_item import NetReportTransportTransactionsCouponReportItem
from typing import Optional, Set
from typing_extensions import Self

class NetReportTransportTransactionsReportItem(BaseModel):
    """
    Transactions report item.
    """ # noqa: E501
    api_client_login: Optional[StrictStr] = Field(default=None, description="Api client login. Can be null.", alias="apiClientLogin")
    balance_after: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Balance after.", alias="balanceAfter")
    balance_before: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Balance before.", alias="balanceBefore")
    block_reason: Optional[StrictStr] = Field(default=None, description="Block reason. Can be null.", alias="blockReason")
    certificate: Optional[NetReportTransportTransactionsCertificateReportItem] = Field(default=None, description="Certificate.")
    comment: Optional[StrictStr] = Field(default=None, description="Comment. Can be null.")
    counteragent: Optional[StrictStr] = Field(default=None, description="Counteragent. Can be null.")
    counteragent_type: Optional[NetReportCertificateCounteragentType] = Field(default=None, description="Counteragent type.", alias="counteragentType")
    counteragent_type_name: Optional[StrictStr] = Field(default=None, description="Counteragent type name. Can be null.", alias="counteragentTypeName")
    coupon: Optional[NetReportTransportTransactionsCouponReportItem] = Field(default=None, description="Coupon.")
    emitent_name: Optional[StrictStr] = Field(default=None, description="Emitent name. Can be null.", alias="emitentName")
    loyalty_user: Optional[StrictStr] = Field(default=None, description="Loyalty user. Can be null.", alias="loyaltyUser")
    marketing_campaign_id: Optional[StrictStr] = Field(default=None, description="Marketing campaign id.", alias="marketingCampaignId")
    nominal: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Nominal.")
    order_number: Optional[StrictInt] = Field(default=None, description="Order number.", alias="orderNumber")
    order_sum: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Order sum.", alias="orderSum")
    organization_id: Optional[StrictStr] = Field(description="Organization id.", alias="organizationId")
    pos_balance_before: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Pos balance before.", alias="posBalanceBefore")
    program_id: Optional[StrictStr] = Field(default=None, description="Program id.", alias="programId")
    sum: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Sum.")
    type: Optional[NetReportTransactionType] = Field(default=None, description="Type.")
    type_name: Optional[StrictStr] = Field(default=None, description="Type name. Can be null.", alias="typeName")
    wallet_id: Optional[StrictStr] = Field(default=None, description="Wallet id.", alias="walletId")
    when_created: Optional[datetime] = Field(default=None, description="When created.", alias="whenCreated")
    when_created_order: Optional[datetime] = Field(default=None, description="When created order.", alias="whenCreatedOrder")
    id: StrictStr = Field(description="Id.")
    is_delivery: Optional[StrictBool] = Field(default=None, description="Is delivery.", alias="isDelivery")
    is_ignored: Optional[StrictBool] = Field(default=None, description="Is ignored.", alias="isIgnored")
    pos_order_id: Optional[StrictStr] = Field(default=None, description="Pos order id.", alias="posOrderId")
    revision: StrictInt = Field(description="Revision.")
    terminal_group_id: Optional[StrictStr] = Field(default=None, description="Terminal group id.", alias="terminalGroupId")
    __properties: ClassVar[List[str]] = ["apiClientLogin", "balanceAfter", "balanceBefore", "blockReason", "certificate", "comment", "counteragent", "counteragentType", "counteragentTypeName", "coupon", "emitentName", "loyaltyUser", "marketingCampaignId", "nominal", "orderNumber", "orderSum", "organizationId", "posBalanceBefore", "programId", "sum", "type", "typeName", "walletId", "whenCreated", "whenCreatedOrder", "id", "isDelivery", "isIgnored", "posOrderId", "revision", "terminalGroupId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NetReportTransportTransactionsReportItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of certificate
        if self.certificate:
            _dict['certificate'] = self.certificate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of coupon
        if self.coupon:
            _dict['coupon'] = self.coupon.to_dict()
        # set to None if balance_after (nullable) is None
        # and model_fields_set contains the field
        if self.balance_after is None and "balance_after" in self.model_fields_set:
            _dict['balanceAfter'] = None

        # set to None if balance_before (nullable) is None
        # and model_fields_set contains the field
        if self.balance_before is None and "balance_before" in self.model_fields_set:
            _dict['balanceBefore'] = None

        # set to None if counteragent_type (nullable) is None
        # and model_fields_set contains the field
        if self.counteragent_type is None and "counteragent_type" in self.model_fields_set:
            _dict['counteragentType'] = None

        # set to None if marketing_campaign_id (nullable) is None
        # and model_fields_set contains the field
        if self.marketing_campaign_id is None and "marketing_campaign_id" in self.model_fields_set:
            _dict['marketingCampaignId'] = None

        # set to None if nominal (nullable) is None
        # and model_fields_set contains the field
        if self.nominal is None and "nominal" in self.model_fields_set:
            _dict['nominal'] = None

        # set to None if order_number (nullable) is None
        # and model_fields_set contains the field
        if self.order_number is None and "order_number" in self.model_fields_set:
            _dict['orderNumber'] = None

        # set to None if order_sum (nullable) is None
        # and model_fields_set contains the field
        if self.order_sum is None and "order_sum" in self.model_fields_set:
            _dict['orderSum'] = None

        # set to None if organization_id (nullable) is None
        # and model_fields_set contains the field
        if self.organization_id is None and "organization_id" in self.model_fields_set:
            _dict['organizationId'] = None

        # set to None if pos_balance_before (nullable) is None
        # and model_fields_set contains the field
        if self.pos_balance_before is None and "pos_balance_before" in self.model_fields_set:
            _dict['posBalanceBefore'] = None

        # set to None if program_id (nullable) is None
        # and model_fields_set contains the field
        if self.program_id is None and "program_id" in self.model_fields_set:
            _dict['programId'] = None

        # set to None if wallet_id (nullable) is None
        # and model_fields_set contains the field
        if self.wallet_id is None and "wallet_id" in self.model_fields_set:
            _dict['walletId'] = None

        # set to None if when_created_order (nullable) is None
        # and model_fields_set contains the field
        if self.when_created_order is None and "when_created_order" in self.model_fields_set:
            _dict['whenCreatedOrder'] = None

        # set to None if is_delivery (nullable) is None
        # and model_fields_set contains the field
        if self.is_delivery is None and "is_delivery" in self.model_fields_set:
            _dict['isDelivery'] = None

        # set to None if pos_order_id (nullable) is None
        # and model_fields_set contains the field
        if self.pos_order_id is None and "pos_order_id" in self.model_fields_set:
            _dict['posOrderId'] = None

        # set to None if terminal_group_id (nullable) is None
        # and model_fields_set contains the field
        if self.terminal_group_id is None and "terminal_group_id" in self.model_fields_set:
            _dict['terminalGroupId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NetReportTransportTransactionsReportItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "apiClientLogin": obj.get("apiClientLogin"),
            "balanceAfter": obj.get("balanceAfter"),
            "balanceBefore": obj.get("balanceBefore"),
            "blockReason": obj.get("blockReason"),
            "certificate": NetReportTransportTransactionsCertificateReportItem.from_dict(obj["certificate"]) if obj.get("certificate") is not None else None,
            "comment": obj.get("comment"),
            "counteragent": obj.get("counteragent"),
            "counteragentType": obj.get("counteragentType"),
            "counteragentTypeName": obj.get("counteragentTypeName"),
            "coupon": NetReportTransportTransactionsCouponReportItem.from_dict(obj["coupon"]) if obj.get("coupon") is not None else None,
            "emitentName": obj.get("emitentName"),
            "loyaltyUser": obj.get("loyaltyUser"),
            "marketingCampaignId": obj.get("marketingCampaignId"),
            "nominal": obj.get("nominal"),
            "orderNumber": obj.get("orderNumber"),
            "orderSum": obj.get("orderSum"),
            "organizationId": obj.get("organizationId"),
            "posBalanceBefore": obj.get("posBalanceBefore"),
            "programId": obj.get("programId"),
            "sum": obj.get("sum"),
            "type": obj.get("type"),
            "typeName": obj.get("typeName"),
            "walletId": obj.get("walletId"),
            "whenCreated": obj.get("whenCreated"),
            "whenCreatedOrder": obj.get("whenCreatedOrder"),
            "id": obj.get("id"),
            "isDelivery": obj.get("isDelivery"),
            "isIgnored": obj.get("isIgnored"),
            "posOrderId": obj.get("posOrderId"),
            "revision": obj.get("revision"),
            "terminalGroupId": obj.get("terminalGroupId")
        })
        return _obj


