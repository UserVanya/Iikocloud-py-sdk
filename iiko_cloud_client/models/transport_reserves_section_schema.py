# coding: utf-8

"""
    iikoCloud API

    <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List
from iiko_cloud_client.models.transport_reserves_restaurant_section_ellipse import TransportReservesRestaurantSectionEllipse
from iiko_cloud_client.models.transport_reserves_restaurant_section_mark import TransportReservesRestaurantSectionMark
from iiko_cloud_client.models.transport_reserves_restaurant_section_rectangle import TransportReservesRestaurantSectionRectangle
from iiko_cloud_client.models.transport_reserves_restaurant_section_table import TransportReservesRestaurantSectionTable
from typing import Optional, Set
from typing_extensions import Self

class TransportReservesSectionSchema(BaseModel):
    """
    Table layout.
    """ # noqa: E501
    width: StrictInt = Field(description="Layout width in px.")
    height: StrictInt = Field(description="Layout height in px.")
    mark_elements: List[TransportReservesRestaurantSectionMark] = Field(description="Collection of restaurant section marks.", alias="markElements")
    table_elements: List[TransportReservesRestaurantSectionTable] = Field(description="Collection of restaurant section tables.", alias="tableElements")
    rectangle_elements: List[TransportReservesRestaurantSectionRectangle] = Field(description="Collection of restaurant section rectangles.", alias="rectangleElements")
    ellipse_elements: List[TransportReservesRestaurantSectionEllipse] = Field(description="Collection of restaurant section ellipses.", alias="ellipseElements")
    revision: StrictInt = Field(description="Last modified time.")
    is_deleted: StrictBool = Field(description="Is schema deleted.", alias="isDeleted")
    __properties: ClassVar[List[str]] = ["width", "height", "markElements", "tableElements", "rectangleElements", "ellipseElements", "revision", "isDeleted"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TransportReservesSectionSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in mark_elements (list)
        _items = []
        if self.mark_elements:
            for _item_mark_elements in self.mark_elements:
                if _item_mark_elements:
                    _items.append(_item_mark_elements.to_dict())
            _dict['markElements'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in table_elements (list)
        _items = []
        if self.table_elements:
            for _item_table_elements in self.table_elements:
                if _item_table_elements:
                    _items.append(_item_table_elements.to_dict())
            _dict['tableElements'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in rectangle_elements (list)
        _items = []
        if self.rectangle_elements:
            for _item_rectangle_elements in self.rectangle_elements:
                if _item_rectangle_elements:
                    _items.append(_item_rectangle_elements.to_dict())
            _dict['rectangleElements'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in ellipse_elements (list)
        _items = []
        if self.ellipse_elements:
            for _item_ellipse_elements in self.ellipse_elements:
                if _item_ellipse_elements:
                    _items.append(_item_ellipse_elements.to_dict())
            _dict['ellipseElements'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TransportReservesSectionSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "width": obj.get("width"),
            "height": obj.get("height"),
            "markElements": [TransportReservesRestaurantSectionMark.from_dict(_item) for _item in obj["markElements"]] if obj.get("markElements") is not None else None,
            "tableElements": [TransportReservesRestaurantSectionTable.from_dict(_item) for _item in obj["tableElements"]] if obj.get("tableElements") is not None else None,
            "rectangleElements": [TransportReservesRestaurantSectionRectangle.from_dict(_item) for _item in obj["rectangleElements"]] if obj.get("rectangleElements") is not None else None,
            "ellipseElements": [TransportReservesRestaurantSectionEllipse.from_dict(_item) for _item in obj["ellipseElements"]] if obj.get("ellipseElements") is not None else None,
            "revision": obj.get("revision"),
            "isDeleted": obj.get("isDeleted")
        })
        return _obj


