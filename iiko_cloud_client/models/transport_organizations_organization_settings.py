# coding: utf-8

"""
    iikoCloud API

    <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from iiko_cloud_client.models.transport_address_hints_address_hints_service_type import TransportAddressHintsAddressHintsServiceType
from iiko_cloud_client.models.transport_common_external_data import TransportCommonExternalData
from iiko_cloud_client.models.transport_organizations_address_format_type import TransportOrganizationsAddressFormatType
from iiko_cloud_client.models.transport_organizations_delivery_order_payment_settings import TransportOrganizationsDeliveryOrderPaymentSettings
from iiko_cloud_client.models.transport_organizations_delivery_settings_service_type import TransportOrganizationsDeliverySettingsServiceType
from typing import Optional, Set
from typing_extensions import Self

class TransportOrganizationsOrganizationSettings(BaseModel):
    """
    Organization settings.
    """ # noqa: E501
    id: StrictStr = Field(description="Organization ID.")
    prices_vat_inclusive: Optional[StrictBool] = Field(default=None, description="Determines whether organization prices include VAT.                Available if `VAT` requested.", alias="pricesVatInclusive")
    loyalty_discount_affects_vat: Optional[StrictBool] = Field(default=None, description="Determines whether organization loyalty discounts affects VAT.                > Working only if \"pricesVatInclusive\" = false                Available if `VAT` requested.", alias="loyaltyDiscountAffectsVat")
    version: Optional[StrictStr] = Field(default=None, description="RMS version.                Available if `Version` requested.")
    address_format_type: Optional[TransportOrganizationsAddressFormatType] = Field(default=None, description="Address format type.                Available if `AddressFormatType` requested.", alias="addressFormatType")
    is_anonymous_guests_allowed: Optional[StrictBool] = Field(default=None, description="If the store allows orders for anonymous guests, then it is not necessary to transfer  information about the guest as part of the delivery order. You can only transfer  the phone number and optionally name of the guest, which will not be stored in the guest base  and will only be used for the delivery of a current delivery order.                Available if `IsAnonymousGuestsAllowed` requested.", alias="isAnonymousGuestsAllowed")
    name: Optional[StrictStr] = Field(default=None, description="Organization name.                Available if `Name` requested.")
    country: Optional[StrictStr] = Field(default=None, description="Country.                Available if `Country` requested.")
    restaurant_address: Optional[StrictStr] = Field(default=None, description="Restaurant address.                Available if `RestaurantAddress` requested.", alias="restaurantAddress")
    latitude: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Latitude.                Available if `Latitude` requested.")
    longitude: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Longitude.                Available if `Longitude` requested.")
    use_uae_addressing_system: Optional[StrictBool] = Field(default=None, description="Regional setting \"Use the UAE Addressing System\".                Available if `UseUaeAddressingSystem` requested.", alias="useUaeAddressingSystem")
    country_phone_code: Optional[StrictStr] = Field(default=None, description="Country dialing code.                Available if `CountryPhoneCode` requested.", alias="countryPhoneCode")
    marketing_source_required_in_delivery: Optional[StrictBool] = Field(default=None, description="Require mandatory marketing source input when creating a delivery.                Available if `MarketingSourceRequiredInDelivery` requested.", alias="marketingSourceRequiredInDelivery")
    default_delivery_city_id: Optional[StrictStr] = Field(default=None, description="Default delivery city.                Available if `DefaultDeliveryCityId` requested.", alias="defaultDeliveryCityId")
    delivery_city_ids: Optional[List[StrictStr]] = Field(default=None, description="Delivery cities.                Available if `DeliveryCityIds` requested.", alias="deliveryCityIds")
    delivery_service_type: Optional[TransportOrganizationsDeliverySettingsServiceType] = Field(default=None, description="Delivery type.                Available if `DeliveryServiceType` requested.", alias="deliveryServiceType")
    delivery_order_payment_settings: Optional[TransportOrganizationsDeliveryOrderPaymentSettings] = Field(default=None, description="Delivery order payment settings.                Available if `DeliveryOrderPaymentSettings` requested.", alias="deliveryOrderPaymentSettings")
    default_call_center_payment_type_id: Optional[StrictStr] = Field(default=None, description="Default payment type for CallCenter.                Available if `DefaultCallCenterPaymentTypeId` requested.", alias="defaultCallCenterPaymentTypeId")
    order_item_comment_enabled: Optional[StrictBool] = Field(default=None, description="Allow text comments for order items (in all restaurant sections).                Available if `OrderItemCommentEnabled` requested.", alias="orderItemCommentEnabled")
    is_confirmation_enabled: Optional[StrictBool] = Field(default=None, description="Determines whether to use delivery confirmation.                Available if `IsConfirmationEnabled` requested.", alias="isConfirmationEnabled")
    confirm_allowed_interval_in_minutes: Optional[StrictInt] = Field(default=None, description="Confirm orders time interval.                Available if `ConfirmAllowedIntervalInMinutes` requested.", alias="confirmAllowedIntervalInMinutes")
    address_lookup: Optional[List[TransportAddressHintsAddressHintsServiceType]] = Field(default=None, description="Available address lookup services.                Available if `AddressLookup` requested.", alias="addressLookup")
    use_business_hours_and_mapping: Optional[StrictBool] = Field(default=None, description="Determines whether the organization use a business hours and mapping settings.", alias="useBusinessHoursAndMapping")
    currency_iso_name: Optional[StrictStr] = Field(default=None, description="ISO currency code (for example: RUB, USD, EUR).", alias="currencyIsoName")
    external_data: Optional[List[TransportCommonExternalData]] = Field(default=None, description="Organization`s external data.", alias="externalData")
    __properties: ClassVar[List[str]] = ["id", "pricesVatInclusive", "loyaltyDiscountAffectsVat", "version", "addressFormatType", "isAnonymousGuestsAllowed", "name", "country", "restaurantAddress", "latitude", "longitude", "useUaeAddressingSystem", "countryPhoneCode", "marketingSourceRequiredInDelivery", "defaultDeliveryCityId", "deliveryCityIds", "deliveryServiceType", "deliveryOrderPaymentSettings", "defaultCallCenterPaymentTypeId", "orderItemCommentEnabled", "isConfirmationEnabled", "confirmAllowedIntervalInMinutes", "addressLookup", "useBusinessHoursAndMapping", "currencyIsoName", "externalData"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TransportOrganizationsOrganizationSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in external_data (list)
        _items = []
        if self.external_data:
            for _item_external_data in self.external_data:
                if _item_external_data:
                    _items.append(_item_external_data.to_dict())
            _dict['externalData'] = _items
        # set to None if prices_vat_inclusive (nullable) is None
        # and model_fields_set contains the field
        if self.prices_vat_inclusive is None and "prices_vat_inclusive" in self.model_fields_set:
            _dict['pricesVatInclusive'] = None

        # set to None if loyalty_discount_affects_vat (nullable) is None
        # and model_fields_set contains the field
        if self.loyalty_discount_affects_vat is None and "loyalty_discount_affects_vat" in self.model_fields_set:
            _dict['loyaltyDiscountAffectsVat'] = None

        # set to None if version (nullable) is None
        # and model_fields_set contains the field
        if self.version is None and "version" in self.model_fields_set:
            _dict['version'] = None

        # set to None if address_format_type (nullable) is None
        # and model_fields_set contains the field
        if self.address_format_type is None and "address_format_type" in self.model_fields_set:
            _dict['addressFormatType'] = None

        # set to None if is_anonymous_guests_allowed (nullable) is None
        # and model_fields_set contains the field
        if self.is_anonymous_guests_allowed is None and "is_anonymous_guests_allowed" in self.model_fields_set:
            _dict['isAnonymousGuestsAllowed'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if country (nullable) is None
        # and model_fields_set contains the field
        if self.country is None and "country" in self.model_fields_set:
            _dict['country'] = None

        # set to None if restaurant_address (nullable) is None
        # and model_fields_set contains the field
        if self.restaurant_address is None and "restaurant_address" in self.model_fields_set:
            _dict['restaurantAddress'] = None

        # set to None if latitude (nullable) is None
        # and model_fields_set contains the field
        if self.latitude is None and "latitude" in self.model_fields_set:
            _dict['latitude'] = None

        # set to None if longitude (nullable) is None
        # and model_fields_set contains the field
        if self.longitude is None and "longitude" in self.model_fields_set:
            _dict['longitude'] = None

        # set to None if use_uae_addressing_system (nullable) is None
        # and model_fields_set contains the field
        if self.use_uae_addressing_system is None and "use_uae_addressing_system" in self.model_fields_set:
            _dict['useUaeAddressingSystem'] = None

        # set to None if country_phone_code (nullable) is None
        # and model_fields_set contains the field
        if self.country_phone_code is None and "country_phone_code" in self.model_fields_set:
            _dict['countryPhoneCode'] = None

        # set to None if marketing_source_required_in_delivery (nullable) is None
        # and model_fields_set contains the field
        if self.marketing_source_required_in_delivery is None and "marketing_source_required_in_delivery" in self.model_fields_set:
            _dict['marketingSourceRequiredInDelivery'] = None

        # set to None if default_delivery_city_id (nullable) is None
        # and model_fields_set contains the field
        if self.default_delivery_city_id is None and "default_delivery_city_id" in self.model_fields_set:
            _dict['defaultDeliveryCityId'] = None

        # set to None if delivery_city_ids (nullable) is None
        # and model_fields_set contains the field
        if self.delivery_city_ids is None and "delivery_city_ids" in self.model_fields_set:
            _dict['deliveryCityIds'] = None

        # set to None if delivery_service_type (nullable) is None
        # and model_fields_set contains the field
        if self.delivery_service_type is None and "delivery_service_type" in self.model_fields_set:
            _dict['deliveryServiceType'] = None

        # set to None if delivery_order_payment_settings (nullable) is None
        # and model_fields_set contains the field
        if self.delivery_order_payment_settings is None and "delivery_order_payment_settings" in self.model_fields_set:
            _dict['deliveryOrderPaymentSettings'] = None

        # set to None if default_call_center_payment_type_id (nullable) is None
        # and model_fields_set contains the field
        if self.default_call_center_payment_type_id is None and "default_call_center_payment_type_id" in self.model_fields_set:
            _dict['defaultCallCenterPaymentTypeId'] = None

        # set to None if order_item_comment_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.order_item_comment_enabled is None and "order_item_comment_enabled" in self.model_fields_set:
            _dict['orderItemCommentEnabled'] = None

        # set to None if is_confirmation_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.is_confirmation_enabled is None and "is_confirmation_enabled" in self.model_fields_set:
            _dict['isConfirmationEnabled'] = None

        # set to None if confirm_allowed_interval_in_minutes (nullable) is None
        # and model_fields_set contains the field
        if self.confirm_allowed_interval_in_minutes is None and "confirm_allowed_interval_in_minutes" in self.model_fields_set:
            _dict['confirmAllowedIntervalInMinutes'] = None

        # set to None if address_lookup (nullable) is None
        # and model_fields_set contains the field
        if self.address_lookup is None and "address_lookup" in self.model_fields_set:
            _dict['addressLookup'] = None

        # set to None if use_business_hours_and_mapping (nullable) is None
        # and model_fields_set contains the field
        if self.use_business_hours_and_mapping is None and "use_business_hours_and_mapping" in self.model_fields_set:
            _dict['useBusinessHoursAndMapping'] = None

        # set to None if currency_iso_name (nullable) is None
        # and model_fields_set contains the field
        if self.currency_iso_name is None and "currency_iso_name" in self.model_fields_set:
            _dict['currencyIsoName'] = None

        # set to None if external_data (nullable) is None
        # and model_fields_set contains the field
        if self.external_data is None and "external_data" in self.model_fields_set:
            _dict['externalData'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TransportOrganizationsOrganizationSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "pricesVatInclusive": obj.get("pricesVatInclusive"),
            "loyaltyDiscountAffectsVat": obj.get("loyaltyDiscountAffectsVat"),
            "version": obj.get("version"),
            "addressFormatType": obj.get("addressFormatType"),
            "isAnonymousGuestsAllowed": obj.get("isAnonymousGuestsAllowed"),
            "name": obj.get("name"),
            "country": obj.get("country"),
            "restaurantAddress": obj.get("restaurantAddress"),
            "latitude": obj.get("latitude"),
            "longitude": obj.get("longitude"),
            "useUaeAddressingSystem": obj.get("useUaeAddressingSystem"),
            "countryPhoneCode": obj.get("countryPhoneCode"),
            "marketingSourceRequiredInDelivery": obj.get("marketingSourceRequiredInDelivery"),
            "defaultDeliveryCityId": obj.get("defaultDeliveryCityId"),
            "deliveryCityIds": obj.get("deliveryCityIds"),
            "deliveryServiceType": obj.get("deliveryServiceType"),
            "deliveryOrderPaymentSettings": obj.get("deliveryOrderPaymentSettings"),
            "defaultCallCenterPaymentTypeId": obj.get("defaultCallCenterPaymentTypeId"),
            "orderItemCommentEnabled": obj.get("orderItemCommentEnabled"),
            "isConfirmationEnabled": obj.get("isConfirmationEnabled"),
            "confirmAllowedIntervalInMinutes": obj.get("confirmAllowedIntervalInMinutes"),
            "addressLookup": obj.get("addressLookup"),
            "useBusinessHoursAndMapping": obj.get("useBusinessHoursAndMapping"),
            "currencyIsoName": obj.get("currencyIsoName"),
            "externalData": [TransportCommonExternalData.from_dict(_item) for _item in obj["externalData"]] if obj.get("externalData") is not None else None
        })
        return _obj


