# coding: utf-8

"""
    iikoCloud API

    <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from iiko_cloud_client.models.allergen_group_dto import AllergenGroupDto
from iiko_cloud_client.models.modifier_restrictions_dto import ModifierRestrictionsDto
from iiko_cloud_client.models.tag_dto import TagDto
from iiko_cloud_client.models.transport_price_dto import TransportPriceDto
from typing import Optional, Set
from typing_extensions import Self

class TransportModifierItemDto(BaseModel):
    """
    TransportModifierItemDto
    """ # noqa: E501
    prices: Optional[List[TransportPriceDto]] = None
    sku: Optional[StrictStr] = Field(default=None, description="Modifier's code")
    name: Optional[StrictStr] = Field(default=None, description="Modifier's name")
    description: Optional[StrictStr] = Field(default=None, description="Modifier's description")
    button_image: Optional[StrictStr] = Field(default=None, description="Links to images", alias="buttonImage")
    restrictions: Optional[ModifierRestrictionsDto] = None
    allergen_groups: Optional[List[AllergenGroupDto]] = Field(default=None, alias="allergenGroups")
    nutrition_per_hundred_grams: Optional[Dict[str, Any]] = Field(default=None, alias="nutritionPerHundredGrams")
    portion_weight_grams: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Modifier's weight in gramms", alias="portionWeightGrams")
    tags: Optional[List[TagDto]] = None
    item_id: Optional[StrictStr] = Field(default=None, description="Modifier's Id", alias="itemId")
    __properties: ClassVar[List[str]] = ["prices", "sku", "name", "description", "buttonImage", "restrictions", "allergenGroups", "nutritionPerHundredGrams", "portionWeightGrams", "tags", "itemId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TransportModifierItemDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in prices (list)
        _items = []
        if self.prices:
            for _item_prices in self.prices:
                if _item_prices:
                    _items.append(_item_prices.to_dict())
            _dict['prices'] = _items
        # override the default output from pydantic by calling `to_dict()` of restrictions
        if self.restrictions:
            _dict['restrictions'] = self.restrictions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in allergen_groups (list)
        _items = []
        if self.allergen_groups:
            for _item_allergen_groups in self.allergen_groups:
                if _item_allergen_groups:
                    _items.append(_item_allergen_groups.to_dict())
            _dict['allergenGroups'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item_tags in self.tags:
                if _item_tags:
                    _items.append(_item_tags.to_dict())
            _dict['tags'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TransportModifierItemDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "prices": [TransportPriceDto.from_dict(_item) for _item in obj["prices"]] if obj.get("prices") is not None else None,
            "sku": obj.get("sku"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "buttonImage": obj.get("buttonImage"),
            "restrictions": ModifierRestrictionsDto.from_dict(obj["restrictions"]) if obj.get("restrictions") is not None else None,
            "allergenGroups": [AllergenGroupDto.from_dict(_item) for _item in obj["allergenGroups"]] if obj.get("allergenGroups") is not None else None,
            "nutritionPerHundredGrams": obj.get("nutritionPerHundredGrams"),
            "portionWeightGrams": obj.get("portionWeightGrams"),
            "tags": [TagDto.from_dict(_item) for _item in obj["tags"]] if obj.get("tags") is not None else None,
            "itemId": obj.get("itemId")
        })
        return _obj


