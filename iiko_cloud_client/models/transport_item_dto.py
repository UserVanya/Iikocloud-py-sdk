# coding: utf-8

"""
    iikoCloud API

    <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from iiko_cloud_client.models.allergen_group_dto import AllergenGroupDto
from iiko_cloud_client.models.tax_category_dto import TaxCategoryDto
from iiko_cloud_client.models.transport_item_size_dto import TransportItemSizeDto
from typing import Optional, Set
from typing_extensions import Self

class TransportItemDto(BaseModel):
    """
    TransportItemDto
    """ # noqa: E501
    item_sizes: Optional[List[TransportItemSizeDto]] = Field(default=None, alias="itemSizes")
    sku: Optional[StrictStr] = Field(default=None, description="Product code")
    name: Optional[StrictStr] = Field(default=None, description="Product name")
    description: Optional[StrictStr] = Field(default=None, description="Product description")
    allergen_groups: Optional[List[AllergenGroupDto]] = Field(default=None, alias="allergenGroups")
    item_id: Optional[StrictStr] = Field(default=None, description="Product ID", alias="itemId")
    modifier_schema_id: Optional[StrictStr] = Field(default=None, description="Modifier schema ID", alias="modifierSchemaId")
    tax_category: Optional[TaxCategoryDto] = Field(default=None, alias="taxCategory")
    order_item_type: Optional[StrictStr] = Field(default=None, description="Product or compound. Depends on modifiers scheme existence", alias="orderItemType")
    __properties: ClassVar[List[str]] = ["itemSizes", "sku", "name", "description", "allergenGroups", "itemId", "modifierSchemaId", "taxCategory", "orderItemType"]

    @field_validator('order_item_type')
    def order_item_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Product', 'Compound']):
            raise ValueError("must be one of enum values ('Product', 'Compound')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TransportItemDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in item_sizes (list)
        _items = []
        if self.item_sizes:
            for _item_item_sizes in self.item_sizes:
                if _item_item_sizes:
                    _items.append(_item_item_sizes.to_dict())
            _dict['itemSizes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in allergen_groups (list)
        _items = []
        if self.allergen_groups:
            for _item_allergen_groups in self.allergen_groups:
                if _item_allergen_groups:
                    _items.append(_item_allergen_groups.to_dict())
            _dict['allergenGroups'] = _items
        # override the default output from pydantic by calling `to_dict()` of tax_category
        if self.tax_category:
            _dict['taxCategory'] = self.tax_category.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TransportItemDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "itemSizes": [TransportItemSizeDto.from_dict(_item) for _item in obj["itemSizes"]] if obj.get("itemSizes") is not None else None,
            "sku": obj.get("sku"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "allergenGroups": [AllergenGroupDto.from_dict(_item) for _item in obj["allergenGroups"]] if obj.get("allergenGroups") is not None else None,
            "itemId": obj.get("itemId"),
            "modifierSchemaId": obj.get("modifierSchemaId"),
            "taxCategory": TaxCategoryDto.from_dict(obj["taxCategory"]) if obj.get("taxCategory") is not None else None,
            "orderItemType": obj.get("orderItemType")
        })
        return _obj


