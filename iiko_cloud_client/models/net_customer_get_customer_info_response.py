# coding: utf-8

"""
    iikoCloud API

    <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from iiko_cloud_client.models.net_customer_guest_balance_info import NetCustomerGuestBalanceInfo
from iiko_cloud_client.models.net_customer_guest_card_info import NetCustomerGuestCardInfo
from iiko_cloud_client.models.net_customer_guest_category_short_info import NetCustomerGuestCategoryShortInfo
from iiko_cloud_client.models.net_customer_iiko_net_user_sex import NetCustomerIikoNetUserSex
from iiko_cloud_client.models.net_customer_personal_data_consent_status import NetCustomerPersonalDataConsentStatus
from typing import Optional, Set
from typing_extensions import Self

class NetCustomerGetCustomerInfoResponse(BaseModel):
    """
    Get customer info response.
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Guest id.")
    referrer_id: Optional[StrictStr] = Field(default=None, description="Guest referrer id.", alias="referrerId")
    name: Optional[StrictStr] = Field(default=None, description="Guest name. Can be null.")
    surname: Optional[StrictStr] = Field(default=None, description="Guest surname. Can be null.")
    middle_name: Optional[StrictStr] = Field(default=None, description="Guest middle name. Can be null.", alias="middleName")
    comment: Optional[StrictStr] = Field(default=None, description="Guest comment. Can be null.")
    phone: Optional[StrictStr] = Field(default=None, description="Main customer's phone. Can be null.")
    culture_name: Optional[StrictStr] = Field(default=None, description="Guest culture name. Can be null.", alias="cultureName")
    birthday: Optional[StrictStr] = Field(default=None, description="Guest birthday.")
    email: Optional[StrictStr] = Field(default=None, description="Guest email. Can be null.")
    sex: Optional[NetCustomerIikoNetUserSex] = Field(default=None, description="Sex.  <br>0 - not specified,<br />1 - male,<br />2 - female.")
    consent_status: Optional[NetCustomerPersonalDataConsentStatus] = Field(default=None, description="Guest consent status.  <br>0 - unknown,<br />1 - given,<br />2 - revoked.", alias="consentStatus")
    anonymized: Optional[StrictBool] = Field(default=None, description="Guest anonymized.")
    cards: Optional[List[NetCustomerGuestCardInfo]] = Field(default=None, description="Customer's cards.")
    categories: Optional[List[NetCustomerGuestCategoryShortInfo]] = Field(default=None, description="Customer categories.")
    wallet_balances: Optional[List[NetCustomerGuestBalanceInfo]] = Field(default=None, description="Customer's user wallets. Contains bonus balances of different loyalty programs.", alias="walletBalances")
    user_data: Optional[StrictStr] = Field(default=None, description="Technical user data, customizable by restaurateur. Can be null.", alias="userData")
    should_receive_promo_actions_info: Optional[StrictBool] = Field(default=None, description="Customer get promo messages (email, sms). If null - unknown.", alias="shouldReceivePromoActionsInfo")
    should_receive_loyalty_info: Optional[StrictBool] = Field(default=None, description="Guest should receive loyalty info.", alias="shouldReceiveLoyaltyInfo")
    should_receive_order_status_info: Optional[StrictBool] = Field(default=None, description="Guest should receive order status info.", alias="shouldReceiveOrderStatusInfo")
    personal_data_consent_from: Optional[StrictStr] = Field(default=None, description="Guest personal data consent from.", alias="personalDataConsentFrom")
    personal_data_consent_to: Optional[StrictStr] = Field(default=None, description="Guest personal data consent to.", alias="personalDataConsentTo")
    personal_data_processing_from: Optional[StrictStr] = Field(default=None, description="Guest personal data processing from.", alias="personalDataProcessingFrom")
    personal_data_processing_to: Optional[StrictStr] = Field(default=None, description="Guest personal data processing to.", alias="personalDataProcessingTo")
    is_deleted: Optional[StrictBool] = Field(default=None, description="Customer marked as deleted.", alias="isDeleted")
    when_registered: Optional[StrictStr] = Field(default=None, description="Registration date.", alias="whenRegistered")
    last_processed_order_date: Optional[StrictStr] = Field(default=None, description="Last order date.", alias="lastProcessedOrderDate")
    first_order_date: Optional[StrictStr] = Field(default=None, description="First order date.", alias="firstOrderDate")
    last_visited_organization_id: Optional[StrictStr] = Field(default=None, description="Guest last visited organization id.", alias="lastVisitedOrganizationId")
    registration_organization_id: Optional[StrictStr] = Field(default=None, description="Guest registration organization id.", alias="registrationOrganizationId")
    __properties: ClassVar[List[str]] = ["id", "referrerId", "name", "surname", "middleName", "comment", "phone", "cultureName", "birthday", "email", "sex", "consentStatus", "anonymized", "cards", "categories", "walletBalances", "userData", "shouldReceivePromoActionsInfo", "shouldReceiveLoyaltyInfo", "shouldReceiveOrderStatusInfo", "personalDataConsentFrom", "personalDataConsentTo", "personalDataProcessingFrom", "personalDataProcessingTo", "isDeleted", "whenRegistered", "lastProcessedOrderDate", "firstOrderDate", "lastVisitedOrganizationId", "registrationOrganizationId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NetCustomerGetCustomerInfoResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in cards (list)
        _items = []
        if self.cards:
            for _item_cards in self.cards:
                if _item_cards:
                    _items.append(_item_cards.to_dict())
            _dict['cards'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in categories (list)
        _items = []
        if self.categories:
            for _item_categories in self.categories:
                if _item_categories:
                    _items.append(_item_categories.to_dict())
            _dict['categories'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in wallet_balances (list)
        _items = []
        if self.wallet_balances:
            for _item_wallet_balances in self.wallet_balances:
                if _item_wallet_balances:
                    _items.append(_item_wallet_balances.to_dict())
            _dict['walletBalances'] = _items
        # set to None if referrer_id (nullable) is None
        # and model_fields_set contains the field
        if self.referrer_id is None and "referrer_id" in self.model_fields_set:
            _dict['referrerId'] = None

        # set to None if birthday (nullable) is None
        # and model_fields_set contains the field
        if self.birthday is None and "birthday" in self.model_fields_set:
            _dict['birthday'] = None

        # set to None if should_receive_promo_actions_info (nullable) is None
        # and model_fields_set contains the field
        if self.should_receive_promo_actions_info is None and "should_receive_promo_actions_info" in self.model_fields_set:
            _dict['shouldReceivePromoActionsInfo'] = None

        # set to None if should_receive_loyalty_info (nullable) is None
        # and model_fields_set contains the field
        if self.should_receive_loyalty_info is None and "should_receive_loyalty_info" in self.model_fields_set:
            _dict['shouldReceiveLoyaltyInfo'] = None

        # set to None if should_receive_order_status_info (nullable) is None
        # and model_fields_set contains the field
        if self.should_receive_order_status_info is None and "should_receive_order_status_info" in self.model_fields_set:
            _dict['shouldReceiveOrderStatusInfo'] = None

        # set to None if personal_data_consent_from (nullable) is None
        # and model_fields_set contains the field
        if self.personal_data_consent_from is None and "personal_data_consent_from" in self.model_fields_set:
            _dict['personalDataConsentFrom'] = None

        # set to None if personal_data_consent_to (nullable) is None
        # and model_fields_set contains the field
        if self.personal_data_consent_to is None and "personal_data_consent_to" in self.model_fields_set:
            _dict['personalDataConsentTo'] = None

        # set to None if personal_data_processing_from (nullable) is None
        # and model_fields_set contains the field
        if self.personal_data_processing_from is None and "personal_data_processing_from" in self.model_fields_set:
            _dict['personalDataProcessingFrom'] = None

        # set to None if personal_data_processing_to (nullable) is None
        # and model_fields_set contains the field
        if self.personal_data_processing_to is None and "personal_data_processing_to" in self.model_fields_set:
            _dict['personalDataProcessingTo'] = None

        # set to None if is_deleted (nullable) is None
        # and model_fields_set contains the field
        if self.is_deleted is None and "is_deleted" in self.model_fields_set:
            _dict['isDeleted'] = None

        # set to None if last_processed_order_date (nullable) is None
        # and model_fields_set contains the field
        if self.last_processed_order_date is None and "last_processed_order_date" in self.model_fields_set:
            _dict['lastProcessedOrderDate'] = None

        # set to None if first_order_date (nullable) is None
        # and model_fields_set contains the field
        if self.first_order_date is None and "first_order_date" in self.model_fields_set:
            _dict['firstOrderDate'] = None

        # set to None if last_visited_organization_id (nullable) is None
        # and model_fields_set contains the field
        if self.last_visited_organization_id is None and "last_visited_organization_id" in self.model_fields_set:
            _dict['lastVisitedOrganizationId'] = None

        # set to None if registration_organization_id (nullable) is None
        # and model_fields_set contains the field
        if self.registration_organization_id is None and "registration_organization_id" in self.model_fields_set:
            _dict['registrationOrganizationId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NetCustomerGetCustomerInfoResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "referrerId": obj.get("referrerId"),
            "name": obj.get("name"),
            "surname": obj.get("surname"),
            "middleName": obj.get("middleName"),
            "comment": obj.get("comment"),
            "phone": obj.get("phone"),
            "cultureName": obj.get("cultureName"),
            "birthday": obj.get("birthday"),
            "email": obj.get("email"),
            "sex": obj.get("sex"),
            "consentStatus": obj.get("consentStatus"),
            "anonymized": obj.get("anonymized"),
            "cards": [NetCustomerGuestCardInfo.from_dict(_item) for _item in obj["cards"]] if obj.get("cards") is not None else None,
            "categories": [NetCustomerGuestCategoryShortInfo.from_dict(_item) for _item in obj["categories"]] if obj.get("categories") is not None else None,
            "walletBalances": [NetCustomerGuestBalanceInfo.from_dict(_item) for _item in obj["walletBalances"]] if obj.get("walletBalances") is not None else None,
            "userData": obj.get("userData"),
            "shouldReceivePromoActionsInfo": obj.get("shouldReceivePromoActionsInfo"),
            "shouldReceiveLoyaltyInfo": obj.get("shouldReceiveLoyaltyInfo"),
            "shouldReceiveOrderStatusInfo": obj.get("shouldReceiveOrderStatusInfo"),
            "personalDataConsentFrom": obj.get("personalDataConsentFrom"),
            "personalDataConsentTo": obj.get("personalDataConsentTo"),
            "personalDataProcessingFrom": obj.get("personalDataProcessingFrom"),
            "personalDataProcessingTo": obj.get("personalDataProcessingTo"),
            "isDeleted": obj.get("isDeleted"),
            "whenRegistered": obj.get("whenRegistered"),
            "lastProcessedOrderDate": obj.get("lastProcessedOrderDate"),
            "firstOrderDate": obj.get("firstOrderDate"),
            "lastVisitedOrganizationId": obj.get("lastVisitedOrganizationId"),
            "registrationOrganizationId": obj.get("registrationOrganizationId")
        })
        return _obj


