# coding: utf-8

"""
    iikoCloud API

    <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from iikocloud_client.models.transport_deliveries_request_create_order_delivery_order import TransportDeliveriesRequestCreateOrderDeliveryOrder

class TestTransportDeliveriesRequestCreateOrderDeliveryOrder(unittest.TestCase):
    """TransportDeliveriesRequestCreateOrderDeliveryOrder unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TransportDeliveriesRequestCreateOrderDeliveryOrder:
        """Test TransportDeliveriesRequestCreateOrderDeliveryOrder
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TransportDeliveriesRequestCreateOrderDeliveryOrder`
        """
        model = TransportDeliveriesRequestCreateOrderDeliveryOrder()
        if include_optional:
            return TransportDeliveriesRequestCreateOrderDeliveryOrder(
                menu_id = '',
                id = '',
                external_number = '',
                complete_before = '2019-08-24 14:15:22.123',
                phone = '01234567',
                order_type_id = '',
                order_service_type = 'DeliveryByCourier',
                delivery_point = iikocloud_client.models.create_order_delivery_point_schema.CreateOrderDeliveryPointSchema(
                    coordinates = null, 
                    address = null, 
                    external_cartography_id = '', 
                    comment = '', ),
                comment = '',
                customer = iikocloud_client.models.create_order_customer_schema.CreateOrderCustomerSchema(
                    type = '', ),
                guests = iikocloud_client.models.create_order_guests_schema.CreateOrderGuestsSchema(
                    count = 56, 
                    split_between_persons = True, ),
                marketing_source_id = '',
                operator_id = '',
                delivery_duration = 56,
                delivery_zone = '',
                items = [
                    iikocloud_client.models.create_order_order_item_schema.CreateOrderOrderItemSchema(
                        type = '', 
                        amount = 0, 
                        product_size_id = '', 
                        combo_information = null, 
                        comment = '', )
                    ],
                combos = [
                    iikocloud_client.models.create_order_combo_schema.CreateOrderComboSchema(
                        id = '', 
                        name = '', 
                        amount = 56, 
                        price = 1.337, 
                        source_id = '', 
                        program_id = '', 
                        size_id = '', )
                    ],
                payments = [
                    iikocloud_client.models.create_order_payment_schema.CreateOrderPaymentSchema(
                        payment_type_kind = '', 
                        sum = 0, 
                        payment_type_id = '', 
                        is_processed_externally = True, 
                        payment_additional_data = null, 
                        is_fiscalized_externally = True, 
                        is_prepay = True, )
                    ],
                tips = [
                    iikocloud_client.models.create_order_tips_payment_schema.CreateOrderTipsPaymentSchema(
                        payment_type_kind = '', 
                        tips_type_id = '', 
                        sum = 0, 
                        payment_type_id = '', 
                        is_processed_externally = True, 
                        payment_additional_data = null, 
                        is_fiscalized_externally = True, 
                        is_prepay = True, )
                    ],
                source_key = '',
                discounts_info = iikocloud_client.models.create_order_discounts_info_schema.CreateOrderDiscountsInfoSchema(
                    card = null, 
                    discounts = [
                        iikocloud_client.models.create_order_discount_schema.CreateOrderDiscountSchema(
                            type = '', )
                        ], 
                    fixed_loyalty_discounts = True, ),
                loyalty_info = iikocloud_client.models.create_order_loyalty_info_schema.CreateOrderLoyaltyInfoSchema(
                    coupon = '', 
                    applicable_manual_conditions = [
                        ''
                        ], ),
                cheque_additional_info = iikocloud_client.models.common_cheque_additional_info_schema.CommonChequeAdditionalInfoSchema(
                    need_receipt = True, 
                    email = '', 
                    settlement_place = '', 
                    phone = '01234567', ),
                external_data = [
                    iikocloud_client.models.create_order_external_data_schema.CreateOrderExternalDataSchema(
                        key = '', 
                        value = '', 
                        is_public = True, )
                    ]
            )
        else:
            return TransportDeliveriesRequestCreateOrderDeliveryOrder(
                phone = '01234567',
                items = [
                    iikocloud_client.models.create_order_order_item_schema.CreateOrderOrderItemSchema(
                        type = '', 
                        amount = 0, 
                        product_size_id = '', 
                        combo_information = null, 
                        comment = '', )
                    ],
        )
        """

    def testTransportDeliveriesRequestCreateOrderDeliveryOrder(self):
        """Test TransportDeliveriesRequestCreateOrderDeliveryOrder"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
