# coding: utf-8

"""
    iikoCloud API

    <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from iikocloud_client.models.transport_reserves_reserve import TransportReservesReserve

class TestTransportReservesReserve(unittest.TestCase):
    """TransportReservesReserve unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TransportReservesReserve:
        """Test TransportReservesReserve
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TransportReservesReserve`
        """
        model = TransportReservesReserve()
        if include_optional:
            return TransportReservesReserve(
                customer = iikocloud_client.models.order_customer_schema.OrderCustomerSchema(
                    type = '', ),
                guests_count = 56,
                comment = '',
                duration_in_minutes = 56,
                should_remind = True,
                status = 'New',
                cancel_reason = 'ClientNotAppeared',
                table_ids = [
                    ''
                    ],
                estimated_start_time = '2019-08-24 14:15:22.123',
                guests_coming_time = '2019-08-24 14:15:22.123',
                phone = '',
                event_type = '',
                order = iikocloud_client.models.response_reserve_order_schema.ResponseReserveOrderSchema(
                    menu_id = '', 
                    sum = 1.337, 
                    number = 56, 
                    source_key = '', 
                    when_bill_printed = '2019-08-24 14:15:22.123', 
                    when_closed = '2019-08-24 14:15:22.123', 
                    conception = null, 
                    guests_info = null, 
                    items = [
                        iikocloud_client.models.order_order_item_schema.OrderOrderItemSchema(
                            type = '', 
                            status = null, 
                            deleted = null, 
                            amount = 1.337, 
                            comment = '', 
                            when_printed = '2019-08-24 14:15:22.123', 
                            size = null, 
                            combo_information = null, )
                        ], 
                    combos = [
                        iikocloud_client.models.order_order_combo_schema.OrderOrderComboSchema(
                            id = '', 
                            name = '', 
                            amount = 56, 
                            price = 1.337, 
                            source_id = '', 
                            size = null, )
                        ], 
                    payments = [
                        iikocloud_client.models.order_payment_item_schema.OrderPaymentItemSchema(
                            payment_type = null, 
                            sum = 1.337, 
                            is_preliminary = True, 
                            is_external = True, 
                            is_processed_externally = True, 
                            is_fiscalized_externally = True, 
                            is_prepay = True, )
                        ], 
                    tips = [
                        iikocloud_client.models.order_tips_payment_item_schema.OrderTipsPaymentItemSchema(
                            tips_type = null, 
                            payment_type = null, 
                            sum = 1.337, 
                            is_preliminary = True, 
                            is_external = True, 
                            is_processed_externally = True, 
                            is_fiscalized_externally = True, 
                            is_prepay = True, )
                        ], 
                    discounts = [
                        iikocloud_client.models.order_discount_item_schema.OrderDiscountItemSchema(
                            discount_type = null, 
                            sum = 1.337, 
                            selective_positions = [
                                ''
                                ], 
                            selective_positions_with_sum = [
                                iikocloud_client.models.order_position_with_sum_schema.OrderPositionWithSumSchema(
                                    position_id = '', 
                                    sum = 1.337, )
                                ], )
                        ], 
                    order_type = null, 
                    terminal_group_id = '', 
                    processed_payments_sum = 1.337, 
                    loyalty_info = null, 
                    external_data = [
                        iikocloud_client.models.order_external_data_schema.OrderExternalDataSchema(
                            key = '', 
                            value = '', )
                        ], )
            )
        else:
            return TransportReservesReserve(
                customer = iikocloud_client.models.order_customer_schema.OrderCustomerSchema(
                    type = '', ),
                guests_count = 56,
                duration_in_minutes = 56,
                should_remind = True,
                status = 'New',
                table_ids = [
                    ''
                    ],
                estimated_start_time = '2019-08-24 14:15:22.123',
        )
        """

    def testTransportReservesReserve(self):
        """Test TransportReservesReserve"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
