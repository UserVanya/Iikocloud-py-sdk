# coding: utf-8

"""
    iikoCloud API

    <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from iiko_cloud_client.models.net_report_get_transactions_report_by_revision_response import NetReportGetTransactionsReportByRevisionResponse

class TestNetReportGetTransactionsReportByRevisionResponse(unittest.TestCase):
    """NetReportGetTransactionsReportByRevisionResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> NetReportGetTransactionsReportByRevisionResponse:
        """Test NetReportGetTransactionsReportByRevisionResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `NetReportGetTransactionsReportByRevisionResponse`
        """
        model = NetReportGetTransactionsReportByRevisionResponse()
        if include_optional:
            return NetReportGetTransactionsReportByRevisionResponse(
                transactions = [
                    iiko_cloud_client.models.report_transport_transactions_report_item_schema.ReportTransportTransactionsReportItemSchema(
                        api_client_login = '', 
                        balance_after = 1.337, 
                        balance_before = 1.337, 
                        block_reason = '', 
                        certificate = null, 
                        comment = '', 
                        counteragent = '', 
                        counteragent_type = null, 
                        counteragent_type_name = '', 
                        coupon = null, 
                        emitent_name = '', 
                        loyalty_user = '', 
                        marketing_campaign_id = '', 
                        nominal = 1.337, 
                        order_number = 56, 
                        order_sum = 1.337, 
                        organization_id = '', 
                        pos_balance_before = 1.337, 
                        program_id = '', 
                        sum = 1.337, 
                        type = null, 
                        type_name = '', 
                        wallet_id = '', 
                        when_created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        when_created_order = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        id = '', 
                        is_delivery = True, 
                        is_ignored = True, 
                        pos_order_id = '', 
                        revision = 56, 
                        terminal_group_id = '', )
                    ],
                last_revision = 56,
                last_transaction_id = '',
                page_size = 56
            )
        else:
            return NetReportGetTransactionsReportByRevisionResponse(
        )
        """

    def testNetReportGetTransactionsReportByRevisionResponse(self):
        """Test NetReportGetTransactionsReportByRevisionResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
