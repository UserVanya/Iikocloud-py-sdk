# coding: utf-8

"""
    iikoCloud API

    <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from iikocloud_client.api.banquets_reserves_api import BanquetsReservesApi


class TestBanquetsReservesApi(unittest.IsolatedAsyncioTestCase):
    """BanquetsReservesApi unit test stubs"""

    async def asyncSetUp(self) -> None:
        self.api = BanquetsReservesApi()

    async def asyncTearDown(self) -> None:
        await self.api.api_client.close()

    async def test_reserve_add_items_post(self) -> None:
        """Test case for reserve_add_items_post

        Add order items.
        """
        pass

    async def test_reserve_add_payments_post(self) -> None:
        """Test case for reserve_add_payments_post

        Add order payments.
        """
        pass

    async def test_reserve_available_organizations_post(self) -> None:
        """Test case for reserve_available_organizations_post

        Returns all organizations of current account (determined by Authorization request header) for which banquet/reserve booking are available.
        """
        pass

    async def test_reserve_available_restaurant_sections_post(self) -> None:
        """Test case for reserve_available_restaurant_sections_post

        Returns all restaurant sections of specified terminal groups, for which banquet/reserve booking are available.
        """
        pass

    async def test_reserve_available_terminal_groups_post(self) -> None:
        """Test case for reserve_available_terminal_groups_post

        Returns all terminal groups of specified organizations, for which banquet/reserve booking are available.
        """
        pass

    async def test_reserve_cancel_post(self) -> None:
        """Test case for reserve_cancel_post

        Cancel reservation due to some reason.
        """
        pass

    async def test_reserve_create_post(self) -> None:
        """Test case for reserve_create_post

        Create banquet/reserve.
        """
        pass

    async def test_reserve_restaurant_sections_workload_post(self) -> None:
        """Test case for reserve_restaurant_sections_workload_post

        Returns all banquets/reserves for passed restaurant sections.
        """
        pass

    async def test_reserve_status_by_id_post(self) -> None:
        """Test case for reserve_status_by_id_post

        Retrieve banquets/reserves statuses by IDs.
        """
        pass


if __name__ == '__main__':
    unittest.main()
